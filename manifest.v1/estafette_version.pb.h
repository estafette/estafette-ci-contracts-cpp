// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: manifest.v1/estafette_version.proto

#ifndef PROTOBUF_INCLUDED_manifest_2ev1_2festafette_5fversion_2eproto
#define PROTOBUF_INCLUDED_manifest_2ev1_2festafette_5fversion_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "manifest.v1/estafette_semver_version.pb.h"
#include "manifest.v1/estafette_custom_version.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_manifest_2ev1_2festafette_5fversion_2eproto 

namespace protobuf_manifest_2ev1_2festafette_5fversion_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_manifest_2ev1_2festafette_5fversion_2eproto
namespace manifest {
namespace v1 {
class EstafetteVersion;
class EstafetteVersionDefaultTypeInternal;
extern EstafetteVersionDefaultTypeInternal _EstafetteVersion_default_instance_;
}  // namespace v1
}  // namespace manifest
namespace google {
namespace protobuf {
template<> ::manifest::v1::EstafetteVersion* Arena::CreateMaybeMessage<::manifest::v1::EstafetteVersion>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace manifest {
namespace v1 {

// ===================================================================

class EstafetteVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manifest.v1.EstafetteVersion) */ {
 public:
  EstafetteVersion();
  virtual ~EstafetteVersion();

  EstafetteVersion(const EstafetteVersion& from);

  inline EstafetteVersion& operator=(const EstafetteVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EstafetteVersion(EstafetteVersion&& from) noexcept
    : EstafetteVersion() {
    *this = ::std::move(from);
  }

  inline EstafetteVersion& operator=(EstafetteVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EstafetteVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstafetteVersion* internal_default_instance() {
    return reinterpret_cast<const EstafetteVersion*>(
               &_EstafetteVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EstafetteVersion* other);
  friend void swap(EstafetteVersion& a, EstafetteVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EstafetteVersion* New() const final {
    return CreateMaybeMessage<EstafetteVersion>(NULL);
  }

  EstafetteVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EstafetteVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EstafetteVersion& from);
  void MergeFrom(const EstafetteVersion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstafetteVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manifest.v1.EstafetteSemverVersion semver = 1;
  bool has_semver() const;
  void clear_semver();
  static const int kSemverFieldNumber = 1;
  private:
  const ::manifest::v1::EstafetteSemverVersion& _internal_semver() const;
  public:
  const ::manifest::v1::EstafetteSemverVersion& semver() const;
  ::manifest::v1::EstafetteSemverVersion* release_semver();
  ::manifest::v1::EstafetteSemverVersion* mutable_semver();
  void set_allocated_semver(::manifest::v1::EstafetteSemverVersion* semver);

  // .manifest.v1.EstafetteCustomVersion custom = 2;
  bool has_custom() const;
  void clear_custom();
  static const int kCustomFieldNumber = 2;
  private:
  const ::manifest::v1::EstafetteCustomVersion& _internal_custom() const;
  public:
  const ::manifest::v1::EstafetteCustomVersion& custom() const;
  ::manifest::v1::EstafetteCustomVersion* release_custom();
  ::manifest::v1::EstafetteCustomVersion* mutable_custom();
  void set_allocated_custom(::manifest::v1::EstafetteCustomVersion* custom);

  // @@protoc_insertion_point(class_scope:manifest.v1.EstafetteVersion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manifest::v1::EstafetteSemverVersion* semver_;
  ::manifest::v1::EstafetteCustomVersion* custom_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manifest_2ev1_2festafette_5fversion_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EstafetteVersion

// .manifest.v1.EstafetteSemverVersion semver = 1;
inline bool EstafetteVersion::has_semver() const {
  return this != internal_default_instance() && semver_ != NULL;
}
inline const ::manifest::v1::EstafetteSemverVersion& EstafetteVersion::_internal_semver() const {
  return *semver_;
}
inline const ::manifest::v1::EstafetteSemverVersion& EstafetteVersion::semver() const {
  const ::manifest::v1::EstafetteSemverVersion* p = semver_;
  // @@protoc_insertion_point(field_get:manifest.v1.EstafetteVersion.semver)
  return p != NULL ? *p : *reinterpret_cast<const ::manifest::v1::EstafetteSemverVersion*>(
      &::manifest::v1::_EstafetteSemverVersion_default_instance_);
}
inline ::manifest::v1::EstafetteSemverVersion* EstafetteVersion::release_semver() {
  // @@protoc_insertion_point(field_release:manifest.v1.EstafetteVersion.semver)
  
  ::manifest::v1::EstafetteSemverVersion* temp = semver_;
  semver_ = NULL;
  return temp;
}
inline ::manifest::v1::EstafetteSemverVersion* EstafetteVersion::mutable_semver() {
  
  if (semver_ == NULL) {
    auto* p = CreateMaybeMessage<::manifest::v1::EstafetteSemverVersion>(GetArenaNoVirtual());
    semver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:manifest.v1.EstafetteVersion.semver)
  return semver_;
}
inline void EstafetteVersion::set_allocated_semver(::manifest::v1::EstafetteSemverVersion* semver) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(semver_);
  }
  if (semver) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      semver = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, semver, submessage_arena);
    }
    
  } else {
    
  }
  semver_ = semver;
  // @@protoc_insertion_point(field_set_allocated:manifest.v1.EstafetteVersion.semver)
}

// .manifest.v1.EstafetteCustomVersion custom = 2;
inline bool EstafetteVersion::has_custom() const {
  return this != internal_default_instance() && custom_ != NULL;
}
inline const ::manifest::v1::EstafetteCustomVersion& EstafetteVersion::_internal_custom() const {
  return *custom_;
}
inline const ::manifest::v1::EstafetteCustomVersion& EstafetteVersion::custom() const {
  const ::manifest::v1::EstafetteCustomVersion* p = custom_;
  // @@protoc_insertion_point(field_get:manifest.v1.EstafetteVersion.custom)
  return p != NULL ? *p : *reinterpret_cast<const ::manifest::v1::EstafetteCustomVersion*>(
      &::manifest::v1::_EstafetteCustomVersion_default_instance_);
}
inline ::manifest::v1::EstafetteCustomVersion* EstafetteVersion::release_custom() {
  // @@protoc_insertion_point(field_release:manifest.v1.EstafetteVersion.custom)
  
  ::manifest::v1::EstafetteCustomVersion* temp = custom_;
  custom_ = NULL;
  return temp;
}
inline ::manifest::v1::EstafetteCustomVersion* EstafetteVersion::mutable_custom() {
  
  if (custom_ == NULL) {
    auto* p = CreateMaybeMessage<::manifest::v1::EstafetteCustomVersion>(GetArenaNoVirtual());
    custom_ = p;
  }
  // @@protoc_insertion_point(field_mutable:manifest.v1.EstafetteVersion.custom)
  return custom_;
}
inline void EstafetteVersion::set_allocated_custom(::manifest::v1::EstafetteCustomVersion* custom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(custom_);
  }
  if (custom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    
  } else {
    
  }
  custom_ = custom;
  // @@protoc_insertion_point(field_set_allocated:manifest.v1.EstafetteVersion.custom)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace manifest

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_manifest_2ev1_2festafette_5fversion_2eproto
