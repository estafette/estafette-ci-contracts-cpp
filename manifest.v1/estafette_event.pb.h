// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: manifest.v1/estafette_event.proto

#ifndef PROTOBUF_INCLUDED_manifest_2ev1_2festafette_5fevent_2eproto
#define PROTOBUF_INCLUDED_manifest_2ev1_2festafette_5fevent_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "manifest.v1/estafette_cron_event.pb.h"
#include "manifest.v1/estafette_docker_event.pb.h"
#include "manifest.v1/estafette_git_event.pb.h"
#include "manifest.v1/estafette_manual_event.pb.h"
#include "manifest.v1/estafette_pipeline_event.pb.h"
#include "manifest.v1/estafette_pub_sub_event.pb.h"
#include "manifest.v1/estafette_release_event.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_manifest_2ev1_2festafette_5fevent_2eproto 

namespace protobuf_manifest_2ev1_2festafette_5fevent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_manifest_2ev1_2festafette_5fevent_2eproto
namespace manifest {
namespace v1 {
class EstafetteEvent;
class EstafetteEventDefaultTypeInternal;
extern EstafetteEventDefaultTypeInternal _EstafetteEvent_default_instance_;
}  // namespace v1
}  // namespace manifest
namespace google {
namespace protobuf {
template<> ::manifest::v1::EstafetteEvent* Arena::CreateMaybeMessage<::manifest::v1::EstafetteEvent>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace manifest {
namespace v1 {

// ===================================================================

class EstafetteEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manifest.v1.EstafetteEvent) */ {
 public:
  EstafetteEvent();
  virtual ~EstafetteEvent();

  EstafetteEvent(const EstafetteEvent& from);

  inline EstafetteEvent& operator=(const EstafetteEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EstafetteEvent(EstafetteEvent&& from) noexcept
    : EstafetteEvent() {
    *this = ::std::move(from);
  }

  inline EstafetteEvent& operator=(EstafetteEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EstafetteEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstafetteEvent* internal_default_instance() {
    return reinterpret_cast<const EstafetteEvent*>(
               &_EstafetteEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EstafetteEvent* other);
  friend void swap(EstafetteEvent& a, EstafetteEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EstafetteEvent* New() const final {
    return CreateMaybeMessage<EstafetteEvent>(NULL);
  }

  EstafetteEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EstafetteEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EstafetteEvent& from);
  void MergeFrom(const EstafetteEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstafetteEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manifest.v1.EstafettePipelineEvent pipeline = 1;
  bool has_pipeline() const;
  void clear_pipeline();
  static const int kPipelineFieldNumber = 1;
  private:
  const ::manifest::v1::EstafettePipelineEvent& _internal_pipeline() const;
  public:
  const ::manifest::v1::EstafettePipelineEvent& pipeline() const;
  ::manifest::v1::EstafettePipelineEvent* release_pipeline();
  ::manifest::v1::EstafettePipelineEvent* mutable_pipeline();
  void set_allocated_pipeline(::manifest::v1::EstafettePipelineEvent* pipeline);

  // .manifest.v1.EstafetteReleaseEvent release = 2;
  bool has_release() const;
  void clear_release();
  static const int kReleaseFieldNumber = 2;
  private:
  const ::manifest::v1::EstafetteReleaseEvent& _internal_release() const;
  public:
  const ::manifest::v1::EstafetteReleaseEvent& release() const;
  ::manifest::v1::EstafetteReleaseEvent* release_release();
  ::manifest::v1::EstafetteReleaseEvent* mutable_release();
  void set_allocated_release(::manifest::v1::EstafetteReleaseEvent* release);

  // .manifest.v1.EstafetteGitEvent git = 3;
  bool has_git() const;
  void clear_git();
  static const int kGitFieldNumber = 3;
  private:
  const ::manifest::v1::EstafetteGitEvent& _internal_git() const;
  public:
  const ::manifest::v1::EstafetteGitEvent& git() const;
  ::manifest::v1::EstafetteGitEvent* release_git();
  ::manifest::v1::EstafetteGitEvent* mutable_git();
  void set_allocated_git(::manifest::v1::EstafetteGitEvent* git);

  // .manifest.v1.EstafetteDockerEvent docker = 4;
  bool has_docker() const;
  void clear_docker();
  static const int kDockerFieldNumber = 4;
  private:
  const ::manifest::v1::EstafetteDockerEvent& _internal_docker() const;
  public:
  const ::manifest::v1::EstafetteDockerEvent& docker() const;
  ::manifest::v1::EstafetteDockerEvent* release_docker();
  ::manifest::v1::EstafetteDockerEvent* mutable_docker();
  void set_allocated_docker(::manifest::v1::EstafetteDockerEvent* docker);

  // .manifest.v1.EstafetteCronEvent cron = 5;
  bool has_cron() const;
  void clear_cron();
  static const int kCronFieldNumber = 5;
  private:
  const ::manifest::v1::EstafetteCronEvent& _internal_cron() const;
  public:
  const ::manifest::v1::EstafetteCronEvent& cron() const;
  ::manifest::v1::EstafetteCronEvent* release_cron();
  ::manifest::v1::EstafetteCronEvent* mutable_cron();
  void set_allocated_cron(::manifest::v1::EstafetteCronEvent* cron);

  // .manifest.v1.EstafettePubSubEvent pub_sub = 6;
  bool has_pub_sub() const;
  void clear_pub_sub();
  static const int kPubSubFieldNumber = 6;
  private:
  const ::manifest::v1::EstafettePubSubEvent& _internal_pub_sub() const;
  public:
  const ::manifest::v1::EstafettePubSubEvent& pub_sub() const;
  ::manifest::v1::EstafettePubSubEvent* release_pub_sub();
  ::manifest::v1::EstafettePubSubEvent* mutable_pub_sub();
  void set_allocated_pub_sub(::manifest::v1::EstafettePubSubEvent* pub_sub);

  // .manifest.v1.EstafetteManualEvent manual = 7;
  bool has_manual() const;
  void clear_manual();
  static const int kManualFieldNumber = 7;
  private:
  const ::manifest::v1::EstafetteManualEvent& _internal_manual() const;
  public:
  const ::manifest::v1::EstafetteManualEvent& manual() const;
  ::manifest::v1::EstafetteManualEvent* release_manual();
  ::manifest::v1::EstafetteManualEvent* mutable_manual();
  void set_allocated_manual(::manifest::v1::EstafetteManualEvent* manual);

  // @@protoc_insertion_point(class_scope:manifest.v1.EstafetteEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manifest::v1::EstafettePipelineEvent* pipeline_;
  ::manifest::v1::EstafetteReleaseEvent* release_;
  ::manifest::v1::EstafetteGitEvent* git_;
  ::manifest::v1::EstafetteDockerEvent* docker_;
  ::manifest::v1::EstafetteCronEvent* cron_;
  ::manifest::v1::EstafettePubSubEvent* pub_sub_;
  ::manifest::v1::EstafetteManualEvent* manual_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_manifest_2ev1_2festafette_5fevent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EstafetteEvent

// .manifest.v1.EstafettePipelineEvent pipeline = 1;
inline bool EstafetteEvent::has_pipeline() const {
  return this != internal_default_instance() && pipeline_ != NULL;
}
inline const ::manifest::v1::EstafettePipelineEvent& EstafetteEvent::_internal_pipeline() const {
  return *pipeline_;
}
inline const ::manifest::v1::EstafettePipelineEvent& EstafetteEvent::pipeline() const {
  const ::manifest::v1::EstafettePipelineEvent* p = pipeline_;
  // @@protoc_insertion_point(field_get:manifest.v1.EstafetteEvent.pipeline)
  return p != NULL ? *p : *reinterpret_cast<const ::manifest::v1::EstafettePipelineEvent*>(
      &::manifest::v1::_EstafettePipelineEvent_default_instance_);
}
inline ::manifest::v1::EstafettePipelineEvent* EstafetteEvent::release_pipeline() {
  // @@protoc_insertion_point(field_release:manifest.v1.EstafetteEvent.pipeline)
  
  ::manifest::v1::EstafettePipelineEvent* temp = pipeline_;
  pipeline_ = NULL;
  return temp;
}
inline ::manifest::v1::EstafettePipelineEvent* EstafetteEvent::mutable_pipeline() {
  
  if (pipeline_ == NULL) {
    auto* p = CreateMaybeMessage<::manifest::v1::EstafettePipelineEvent>(GetArenaNoVirtual());
    pipeline_ = p;
  }
  // @@protoc_insertion_point(field_mutable:manifest.v1.EstafetteEvent.pipeline)
  return pipeline_;
}
inline void EstafetteEvent::set_allocated_pipeline(::manifest::v1::EstafettePipelineEvent* pipeline) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pipeline_);
  }
  if (pipeline) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pipeline = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pipeline, submessage_arena);
    }
    
  } else {
    
  }
  pipeline_ = pipeline;
  // @@protoc_insertion_point(field_set_allocated:manifest.v1.EstafetteEvent.pipeline)
}

// .manifest.v1.EstafetteReleaseEvent release = 2;
inline bool EstafetteEvent::has_release() const {
  return this != internal_default_instance() && release_ != NULL;
}
inline const ::manifest::v1::EstafetteReleaseEvent& EstafetteEvent::_internal_release() const {
  return *release_;
}
inline const ::manifest::v1::EstafetteReleaseEvent& EstafetteEvent::release() const {
  const ::manifest::v1::EstafetteReleaseEvent* p = release_;
  // @@protoc_insertion_point(field_get:manifest.v1.EstafetteEvent.release)
  return p != NULL ? *p : *reinterpret_cast<const ::manifest::v1::EstafetteReleaseEvent*>(
      &::manifest::v1::_EstafetteReleaseEvent_default_instance_);
}
inline ::manifest::v1::EstafetteReleaseEvent* EstafetteEvent::release_release() {
  // @@protoc_insertion_point(field_release:manifest.v1.EstafetteEvent.release)
  
  ::manifest::v1::EstafetteReleaseEvent* temp = release_;
  release_ = NULL;
  return temp;
}
inline ::manifest::v1::EstafetteReleaseEvent* EstafetteEvent::mutable_release() {
  
  if (release_ == NULL) {
    auto* p = CreateMaybeMessage<::manifest::v1::EstafetteReleaseEvent>(GetArenaNoVirtual());
    release_ = p;
  }
  // @@protoc_insertion_point(field_mutable:manifest.v1.EstafetteEvent.release)
  return release_;
}
inline void EstafetteEvent::set_allocated_release(::manifest::v1::EstafetteReleaseEvent* release) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(release_);
  }
  if (release) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      release = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, release, submessage_arena);
    }
    
  } else {
    
  }
  release_ = release;
  // @@protoc_insertion_point(field_set_allocated:manifest.v1.EstafetteEvent.release)
}

// .manifest.v1.EstafetteGitEvent git = 3;
inline bool EstafetteEvent::has_git() const {
  return this != internal_default_instance() && git_ != NULL;
}
inline const ::manifest::v1::EstafetteGitEvent& EstafetteEvent::_internal_git() const {
  return *git_;
}
inline const ::manifest::v1::EstafetteGitEvent& EstafetteEvent::git() const {
  const ::manifest::v1::EstafetteGitEvent* p = git_;
  // @@protoc_insertion_point(field_get:manifest.v1.EstafetteEvent.git)
  return p != NULL ? *p : *reinterpret_cast<const ::manifest::v1::EstafetteGitEvent*>(
      &::manifest::v1::_EstafetteGitEvent_default_instance_);
}
inline ::manifest::v1::EstafetteGitEvent* EstafetteEvent::release_git() {
  // @@protoc_insertion_point(field_release:manifest.v1.EstafetteEvent.git)
  
  ::manifest::v1::EstafetteGitEvent* temp = git_;
  git_ = NULL;
  return temp;
}
inline ::manifest::v1::EstafetteGitEvent* EstafetteEvent::mutable_git() {
  
  if (git_ == NULL) {
    auto* p = CreateMaybeMessage<::manifest::v1::EstafetteGitEvent>(GetArenaNoVirtual());
    git_ = p;
  }
  // @@protoc_insertion_point(field_mutable:manifest.v1.EstafetteEvent.git)
  return git_;
}
inline void EstafetteEvent::set_allocated_git(::manifest::v1::EstafetteGitEvent* git) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(git_);
  }
  if (git) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      git = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, git, submessage_arena);
    }
    
  } else {
    
  }
  git_ = git;
  // @@protoc_insertion_point(field_set_allocated:manifest.v1.EstafetteEvent.git)
}

// .manifest.v1.EstafetteDockerEvent docker = 4;
inline bool EstafetteEvent::has_docker() const {
  return this != internal_default_instance() && docker_ != NULL;
}
inline const ::manifest::v1::EstafetteDockerEvent& EstafetteEvent::_internal_docker() const {
  return *docker_;
}
inline const ::manifest::v1::EstafetteDockerEvent& EstafetteEvent::docker() const {
  const ::manifest::v1::EstafetteDockerEvent* p = docker_;
  // @@protoc_insertion_point(field_get:manifest.v1.EstafetteEvent.docker)
  return p != NULL ? *p : *reinterpret_cast<const ::manifest::v1::EstafetteDockerEvent*>(
      &::manifest::v1::_EstafetteDockerEvent_default_instance_);
}
inline ::manifest::v1::EstafetteDockerEvent* EstafetteEvent::release_docker() {
  // @@protoc_insertion_point(field_release:manifest.v1.EstafetteEvent.docker)
  
  ::manifest::v1::EstafetteDockerEvent* temp = docker_;
  docker_ = NULL;
  return temp;
}
inline ::manifest::v1::EstafetteDockerEvent* EstafetteEvent::mutable_docker() {
  
  if (docker_ == NULL) {
    auto* p = CreateMaybeMessage<::manifest::v1::EstafetteDockerEvent>(GetArenaNoVirtual());
    docker_ = p;
  }
  // @@protoc_insertion_point(field_mutable:manifest.v1.EstafetteEvent.docker)
  return docker_;
}
inline void EstafetteEvent::set_allocated_docker(::manifest::v1::EstafetteDockerEvent* docker) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(docker_);
  }
  if (docker) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      docker = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, docker, submessage_arena);
    }
    
  } else {
    
  }
  docker_ = docker;
  // @@protoc_insertion_point(field_set_allocated:manifest.v1.EstafetteEvent.docker)
}

// .manifest.v1.EstafetteCronEvent cron = 5;
inline bool EstafetteEvent::has_cron() const {
  return this != internal_default_instance() && cron_ != NULL;
}
inline const ::manifest::v1::EstafetteCronEvent& EstafetteEvent::_internal_cron() const {
  return *cron_;
}
inline const ::manifest::v1::EstafetteCronEvent& EstafetteEvent::cron() const {
  const ::manifest::v1::EstafetteCronEvent* p = cron_;
  // @@protoc_insertion_point(field_get:manifest.v1.EstafetteEvent.cron)
  return p != NULL ? *p : *reinterpret_cast<const ::manifest::v1::EstafetteCronEvent*>(
      &::manifest::v1::_EstafetteCronEvent_default_instance_);
}
inline ::manifest::v1::EstafetteCronEvent* EstafetteEvent::release_cron() {
  // @@protoc_insertion_point(field_release:manifest.v1.EstafetteEvent.cron)
  
  ::manifest::v1::EstafetteCronEvent* temp = cron_;
  cron_ = NULL;
  return temp;
}
inline ::manifest::v1::EstafetteCronEvent* EstafetteEvent::mutable_cron() {
  
  if (cron_ == NULL) {
    auto* p = CreateMaybeMessage<::manifest::v1::EstafetteCronEvent>(GetArenaNoVirtual());
    cron_ = p;
  }
  // @@protoc_insertion_point(field_mutable:manifest.v1.EstafetteEvent.cron)
  return cron_;
}
inline void EstafetteEvent::set_allocated_cron(::manifest::v1::EstafetteCronEvent* cron) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cron_);
  }
  if (cron) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cron = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cron, submessage_arena);
    }
    
  } else {
    
  }
  cron_ = cron;
  // @@protoc_insertion_point(field_set_allocated:manifest.v1.EstafetteEvent.cron)
}

// .manifest.v1.EstafettePubSubEvent pub_sub = 6;
inline bool EstafetteEvent::has_pub_sub() const {
  return this != internal_default_instance() && pub_sub_ != NULL;
}
inline const ::manifest::v1::EstafettePubSubEvent& EstafetteEvent::_internal_pub_sub() const {
  return *pub_sub_;
}
inline const ::manifest::v1::EstafettePubSubEvent& EstafetteEvent::pub_sub() const {
  const ::manifest::v1::EstafettePubSubEvent* p = pub_sub_;
  // @@protoc_insertion_point(field_get:manifest.v1.EstafetteEvent.pub_sub)
  return p != NULL ? *p : *reinterpret_cast<const ::manifest::v1::EstafettePubSubEvent*>(
      &::manifest::v1::_EstafettePubSubEvent_default_instance_);
}
inline ::manifest::v1::EstafettePubSubEvent* EstafetteEvent::release_pub_sub() {
  // @@protoc_insertion_point(field_release:manifest.v1.EstafetteEvent.pub_sub)
  
  ::manifest::v1::EstafettePubSubEvent* temp = pub_sub_;
  pub_sub_ = NULL;
  return temp;
}
inline ::manifest::v1::EstafettePubSubEvent* EstafetteEvent::mutable_pub_sub() {
  
  if (pub_sub_ == NULL) {
    auto* p = CreateMaybeMessage<::manifest::v1::EstafettePubSubEvent>(GetArenaNoVirtual());
    pub_sub_ = p;
  }
  // @@protoc_insertion_point(field_mutable:manifest.v1.EstafetteEvent.pub_sub)
  return pub_sub_;
}
inline void EstafetteEvent::set_allocated_pub_sub(::manifest::v1::EstafettePubSubEvent* pub_sub) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pub_sub_);
  }
  if (pub_sub) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pub_sub = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pub_sub, submessage_arena);
    }
    
  } else {
    
  }
  pub_sub_ = pub_sub;
  // @@protoc_insertion_point(field_set_allocated:manifest.v1.EstafetteEvent.pub_sub)
}

// .manifest.v1.EstafetteManualEvent manual = 7;
inline bool EstafetteEvent::has_manual() const {
  return this != internal_default_instance() && manual_ != NULL;
}
inline const ::manifest::v1::EstafetteManualEvent& EstafetteEvent::_internal_manual() const {
  return *manual_;
}
inline const ::manifest::v1::EstafetteManualEvent& EstafetteEvent::manual() const {
  const ::manifest::v1::EstafetteManualEvent* p = manual_;
  // @@protoc_insertion_point(field_get:manifest.v1.EstafetteEvent.manual)
  return p != NULL ? *p : *reinterpret_cast<const ::manifest::v1::EstafetteManualEvent*>(
      &::manifest::v1::_EstafetteManualEvent_default_instance_);
}
inline ::manifest::v1::EstafetteManualEvent* EstafetteEvent::release_manual() {
  // @@protoc_insertion_point(field_release:manifest.v1.EstafetteEvent.manual)
  
  ::manifest::v1::EstafetteManualEvent* temp = manual_;
  manual_ = NULL;
  return temp;
}
inline ::manifest::v1::EstafetteManualEvent* EstafetteEvent::mutable_manual() {
  
  if (manual_ == NULL) {
    auto* p = CreateMaybeMessage<::manifest::v1::EstafetteManualEvent>(GetArenaNoVirtual());
    manual_ = p;
  }
  // @@protoc_insertion_point(field_mutable:manifest.v1.EstafetteEvent.manual)
  return manual_;
}
inline void EstafetteEvent::set_allocated_manual(::manifest::v1::EstafetteManualEvent* manual) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(manual_);
  }
  if (manual) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      manual = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, manual, submessage_arena);
    }
    
  } else {
    
  }
  manual_ = manual;
  // @@protoc_insertion_point(field_set_allocated:manifest.v1.EstafetteEvent.manual)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace manifest

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_manifest_2ev1_2festafette_5fevent_2eproto
