// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: manifest.v1/estafette_manifest.proto

#include "manifest.v1/estafette_manifest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_manifest_2ev1_2festafette_5fbuilder_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_manifest_2ev1_2festafette_5fbuilder_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EstafetteBuilder;
}  // namespace protobuf_manifest_2ev1_2festafette_5fbuilder_2eproto
namespace protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EstafetteManifest_LabelsEntry_DoNotUse;
}  // namespace protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto
namespace protobuf_manifest_2ev1_2festafette_5frelease_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_manifest_2ev1_2festafette_5frelease_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EstafetteRelease;
}  // namespace protobuf_manifest_2ev1_2festafette_5frelease_2eproto
namespace protobuf_manifest_2ev1_2festafette_5fstage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_manifest_2ev1_2festafette_5fstage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_EstafetteStage;
}  // namespace protobuf_manifest_2ev1_2festafette_5fstage_2eproto
namespace protobuf_manifest_2ev1_2festafette_5ftrigger_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_manifest_2ev1_2festafette_5ftrigger_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_EstafetteTrigger;
}  // namespace protobuf_manifest_2ev1_2festafette_5ftrigger_2eproto
namespace protobuf_manifest_2ev1_2festafette_5fversion_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_manifest_2ev1_2festafette_5fversion_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_EstafetteVersion;
}  // namespace protobuf_manifest_2ev1_2festafette_5fversion_2eproto
namespace manifest {
namespace v1 {
class EstafetteManifest_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EstafetteManifest_LabelsEntry_DoNotUse>
      _instance;
} _EstafetteManifest_LabelsEntry_DoNotUse_default_instance_;
class EstafetteManifest_GlobalEnvVarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EstafetteManifest_GlobalEnvVarsEntry_DoNotUse>
      _instance;
} _EstafetteManifest_GlobalEnvVarsEntry_DoNotUse_default_instance_;
class EstafetteManifestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EstafetteManifest>
      _instance;
} _EstafetteManifest_default_instance_;
}  // namespace v1
}  // namespace manifest
namespace protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto {
static void InitDefaultsEstafetteManifest_LabelsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::manifest::v1::_EstafetteManifest_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse();
  }
  ::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EstafetteManifest_LabelsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEstafetteManifest_LabelsEntry_DoNotUse}, {}};

static void InitDefaultsEstafetteManifest_GlobalEnvVarsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::manifest::v1::_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse_default_instance_;
    new (ptr) ::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse();
  }
  ::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEstafetteManifest_GlobalEnvVarsEntry_DoNotUse}, {}};

static void InitDefaultsEstafetteManifest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::manifest::v1::_EstafetteManifest_default_instance_;
    new (ptr) ::manifest::v1::EstafetteManifest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::manifest::v1::EstafetteManifest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_EstafetteManifest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsEstafetteManifest}, {
      &protobuf_manifest_2ev1_2festafette_5fbuilder_2eproto::scc_info_EstafetteBuilder.base,
      &protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto::scc_info_EstafetteManifest_LabelsEntry_DoNotUse.base,
      &protobuf_manifest_2ev1_2festafette_5fversion_2eproto::scc_info_EstafetteVersion.base,
      &protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto::scc_info_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse.base,
      &protobuf_manifest_2ev1_2festafette_5ftrigger_2eproto::scc_info_EstafetteTrigger.base,
      &protobuf_manifest_2ev1_2festafette_5fstage_2eproto::scc_info_EstafetteStage.base,
      &protobuf_manifest_2ev1_2festafette_5frelease_2eproto::scc_info_EstafetteRelease.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EstafetteManifest_LabelsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EstafetteManifest.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest, builder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest, global_env_vars_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest, triggers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest, stages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::manifest::v1::EstafetteManifest, releases_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse)},
  { 9, 16, sizeof(::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse)},
  { 18, -1, sizeof(::manifest::v1::EstafetteManifest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::manifest::v1::_EstafetteManifest_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::manifest::v1::_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::manifest::v1::_EstafetteManifest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "manifest.v1/estafette_manifest.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$manifest.v1/estafette_manifest.proto\022\013"
      "manifest.v1\032#manifest.v1/estafette_build"
      "er.proto\032#manifest.v1/estafette_version."
      "proto\032#manifest.v1/estafette_trigger.pro"
      "to\032!manifest.v1/estafette_stage.proto\032#m"
      "anifest.v1/estafette_release.proto\"\357\003\n\021E"
      "stafetteManifest\022.\n\007builder\030\001 \001(\0132\035.mani"
      "fest.v1.EstafetteBuilder\022:\n\006labels\030\002 \003(\013"
      "2*.manifest.v1.EstafetteManifest.LabelsE"
      "ntry\022.\n\007version\030\003 \001(\0132\035.manifest.v1.Esta"
      "fetteVersion\022J\n\017global_env_vars\030\004 \003(\01321."
      "manifest.v1.EstafetteManifest.GlobalEnvV"
      "arsEntry\022/\n\010triggers\030\005 \003(\0132\035.manifest.v1"
      ".EstafetteTrigger\022+\n\006stages\030\006 \003(\0132\033.mani"
      "fest.v1.EstafetteStage\022/\n\010releases\030\007 \003(\013"
      "2\035.manifest.v1.EstafetteRelease\032-\n\013Label"
      "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0324"
      "\n\022GlobalEnvVarsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
      "ue\030\002 \001(\t:\0028\001B[Z>github.com/estafette/est"
      "afette-ci-contracts-golang/manifest_v1\252\002"
      "\030Estafette.CI.Manifest.V1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 833);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "manifest.v1/estafette_manifest.proto", &protobuf_RegisterTypes);
  ::protobuf_manifest_2ev1_2festafette_5fbuilder_2eproto::AddDescriptors();
  ::protobuf_manifest_2ev1_2festafette_5fversion_2eproto::AddDescriptors();
  ::protobuf_manifest_2ev1_2festafette_5ftrigger_2eproto::AddDescriptors();
  ::protobuf_manifest_2ev1_2festafette_5fstage_2eproto::AddDescriptors();
  ::protobuf_manifest_2ev1_2festafette_5frelease_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto
namespace manifest {
namespace v1 {

// ===================================================================

EstafetteManifest_LabelsEntry_DoNotUse::EstafetteManifest_LabelsEntry_DoNotUse() {}
EstafetteManifest_LabelsEntry_DoNotUse::EstafetteManifest_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void EstafetteManifest_LabelsEntry_DoNotUse::MergeFrom(const EstafetteManifest_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata EstafetteManifest_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto::file_level_metadata[0];
}
void EstafetteManifest_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse() {}
EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::MergeFrom(const EstafetteManifest_GlobalEnvVarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto::file_level_metadata[1];
}
void EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void EstafetteManifest::InitAsDefaultInstance() {
  ::manifest::v1::_EstafetteManifest_default_instance_._instance.get_mutable()->builder_ = const_cast< ::manifest::v1::EstafetteBuilder*>(
      ::manifest::v1::EstafetteBuilder::internal_default_instance());
  ::manifest::v1::_EstafetteManifest_default_instance_._instance.get_mutable()->version_ = const_cast< ::manifest::v1::EstafetteVersion*>(
      ::manifest::v1::EstafetteVersion::internal_default_instance());
}
void EstafetteManifest::clear_builder() {
  if (GetArenaNoVirtual() == NULL && builder_ != NULL) {
    delete builder_;
  }
  builder_ = NULL;
}
void EstafetteManifest::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
void EstafetteManifest::clear_triggers() {
  triggers_.Clear();
}
void EstafetteManifest::clear_stages() {
  stages_.Clear();
}
void EstafetteManifest::clear_releases() {
  releases_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EstafetteManifest::kBuilderFieldNumber;
const int EstafetteManifest::kLabelsFieldNumber;
const int EstafetteManifest::kVersionFieldNumber;
const int EstafetteManifest::kGlobalEnvVarsFieldNumber;
const int EstafetteManifest::kTriggersFieldNumber;
const int EstafetteManifest::kStagesFieldNumber;
const int EstafetteManifest::kReleasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EstafetteManifest::EstafetteManifest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto::scc_info_EstafetteManifest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:manifest.v1.EstafetteManifest)
}
EstafetteManifest::EstafetteManifest(const EstafetteManifest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      triggers_(from.triggers_),
      stages_(from.stages_),
      releases_(from.releases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  global_env_vars_.MergeFrom(from.global_env_vars_);
  if (from.has_builder()) {
    builder_ = new ::manifest::v1::EstafetteBuilder(*from.builder_);
  } else {
    builder_ = NULL;
  }
  if (from.has_version()) {
    version_ = new ::manifest::v1::EstafetteVersion(*from.version_);
  } else {
    version_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:manifest.v1.EstafetteManifest)
}

void EstafetteManifest::SharedCtor() {
  ::memset(&builder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&builder_)) + sizeof(version_));
}

EstafetteManifest::~EstafetteManifest() {
  // @@protoc_insertion_point(destructor:manifest.v1.EstafetteManifest)
  SharedDtor();
}

void EstafetteManifest::SharedDtor() {
  if (this != internal_default_instance()) delete builder_;
  if (this != internal_default_instance()) delete version_;
}

void EstafetteManifest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EstafetteManifest::descriptor() {
  ::protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EstafetteManifest& EstafetteManifest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto::scc_info_EstafetteManifest.base);
  return *internal_default_instance();
}


void EstafetteManifest::Clear() {
// @@protoc_insertion_point(message_clear_start:manifest.v1.EstafetteManifest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  global_env_vars_.Clear();
  triggers_.Clear();
  stages_.Clear();
  releases_.Clear();
  if (GetArenaNoVirtual() == NULL && builder_ != NULL) {
    delete builder_;
  }
  builder_ = NULL;
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  _internal_metadata_.Clear();
}

bool EstafetteManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:manifest.v1.EstafetteManifest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .manifest.v1.EstafetteBuilder builder = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_builder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          EstafetteManifest_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              EstafetteManifest_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "manifest.v1.EstafetteManifest.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "manifest.v1.EstafetteManifest.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .manifest.v1.EstafetteVersion version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> global_env_vars = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              EstafetteManifest_GlobalEnvVarsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&global_env_vars_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "manifest.v1.EstafetteManifest.GlobalEnvVarsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "manifest.v1.EstafetteManifest.GlobalEnvVarsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .manifest.v1.EstafetteTrigger triggers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_triggers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .manifest.v1.EstafetteStage stages = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .manifest.v1.EstafetteRelease releases = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_releases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:manifest.v1.EstafetteManifest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:manifest.v1.EstafetteManifest)
  return false;
#undef DO_
}

void EstafetteManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:manifest.v1.EstafetteManifest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .manifest.v1.EstafetteBuilder builder = 1;
  if (this->has_builder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_builder(), output);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "manifest.v1.EstafetteManifest.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "manifest.v1.EstafetteManifest.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<EstafetteManifest_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<EstafetteManifest_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .manifest.v1.EstafetteVersion version = 3;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_version(), output);
  }

  // map<string, string> global_env_vars = 4;
  if (!this->global_env_vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "manifest.v1.EstafetteManifest.GlobalEnvVarsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "manifest.v1.EstafetteManifest.GlobalEnvVarsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->global_env_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->global_env_vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->global_env_vars().begin();
          it != this->global_env_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<EstafetteManifest_GlobalEnvVarsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(global_env_vars_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<EstafetteManifest_GlobalEnvVarsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->global_env_vars().begin();
          it != this->global_env_vars().end(); ++it) {
        entry.reset(global_env_vars_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .manifest.v1.EstafetteTrigger triggers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->triggers(static_cast<int>(i)),
      output);
  }

  // repeated .manifest.v1.EstafetteStage stages = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->stages(static_cast<int>(i)),
      output);
  }

  // repeated .manifest.v1.EstafetteRelease releases = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->releases_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->releases(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:manifest.v1.EstafetteManifest)
}

::google::protobuf::uint8* EstafetteManifest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:manifest.v1.EstafetteManifest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .manifest.v1.EstafetteBuilder builder = 1;
  if (this->has_builder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_builder(), deterministic, target);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "manifest.v1.EstafetteManifest.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "manifest.v1.EstafetteManifest.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<EstafetteManifest_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<EstafetteManifest_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .manifest.v1.EstafetteVersion version = 3;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_version(), deterministic, target);
  }

  // map<string, string> global_env_vars = 4;
  if (!this->global_env_vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "manifest.v1.EstafetteManifest.GlobalEnvVarsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "manifest.v1.EstafetteManifest.GlobalEnvVarsEntry.value");
      }
    };

    if (deterministic &&
        this->global_env_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->global_env_vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->global_env_vars().begin();
          it != this->global_env_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<EstafetteManifest_GlobalEnvVarsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(global_env_vars_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<EstafetteManifest_GlobalEnvVarsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->global_env_vars().begin();
          it != this->global_env_vars().end(); ++it) {
        entry.reset(global_env_vars_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .manifest.v1.EstafetteTrigger triggers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->triggers(static_cast<int>(i)), deterministic, target);
  }

  // repeated .manifest.v1.EstafetteStage stages = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->stages(static_cast<int>(i)), deterministic, target);
  }

  // repeated .manifest.v1.EstafetteRelease releases = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->releases_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->releases(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:manifest.v1.EstafetteManifest)
  return target;
}

size_t EstafetteManifest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:manifest.v1.EstafetteManifest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> labels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<EstafetteManifest_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> global_env_vars = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->global_env_vars_size());
  {
    ::std::unique_ptr<EstafetteManifest_GlobalEnvVarsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->global_env_vars().begin();
        it != this->global_env_vars().end(); ++it) {
      entry.reset(global_env_vars_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .manifest.v1.EstafetteTrigger triggers = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->triggers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->triggers(static_cast<int>(i)));
    }
  }

  // repeated .manifest.v1.EstafetteStage stages = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->stages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stages(static_cast<int>(i)));
    }
  }

  // repeated .manifest.v1.EstafetteRelease releases = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->releases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->releases(static_cast<int>(i)));
    }
  }

  // .manifest.v1.EstafetteBuilder builder = 1;
  if (this->has_builder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *builder_);
  }

  // .manifest.v1.EstafetteVersion version = 3;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *version_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstafetteManifest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:manifest.v1.EstafetteManifest)
  GOOGLE_DCHECK_NE(&from, this);
  const EstafetteManifest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EstafetteManifest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:manifest.v1.EstafetteManifest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:manifest.v1.EstafetteManifest)
    MergeFrom(*source);
  }
}

void EstafetteManifest::MergeFrom(const EstafetteManifest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:manifest.v1.EstafetteManifest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  global_env_vars_.MergeFrom(from.global_env_vars_);
  triggers_.MergeFrom(from.triggers_);
  stages_.MergeFrom(from.stages_);
  releases_.MergeFrom(from.releases_);
  if (from.has_builder()) {
    mutable_builder()->::manifest::v1::EstafetteBuilder::MergeFrom(from.builder());
  }
  if (from.has_version()) {
    mutable_version()->::manifest::v1::EstafetteVersion::MergeFrom(from.version());
  }
}

void EstafetteManifest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:manifest.v1.EstafetteManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstafetteManifest::CopyFrom(const EstafetteManifest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:manifest.v1.EstafetteManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstafetteManifest::IsInitialized() const {
  return true;
}

void EstafetteManifest::Swap(EstafetteManifest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EstafetteManifest::InternalSwap(EstafetteManifest* other) {
  using std::swap;
  labels_.Swap(&other->labels_);
  global_env_vars_.Swap(&other->global_env_vars_);
  CastToBase(&triggers_)->InternalSwap(CastToBase(&other->triggers_));
  CastToBase(&stages_)->InternalSwap(CastToBase(&other->stages_));
  CastToBase(&releases_)->InternalSwap(CastToBase(&other->releases_));
  swap(builder_, other->builder_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EstafetteManifest::GetMetadata() const {
  protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_manifest_2ev1_2festafette_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace manifest
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::manifest::v1::EstafetteManifest* Arena::CreateMaybeMessage< ::manifest::v1::EstafetteManifest >(Arena* arena) {
  return Arena::CreateInternal< ::manifest::v1::EstafetteManifest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
