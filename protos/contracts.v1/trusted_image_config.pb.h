// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/contracts.v1/trusted_image_config.proto

#ifndef PROTOBUF_INCLUDED_protos_2fcontracts_2ev1_2ftrusted_5fimage_5fconfig_2eproto
#define PROTOBUF_INCLUDED_protos_2fcontracts_2ev1_2ftrusted_5fimage_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fcontracts_2ev1_2ftrusted_5fimage_5fconfig_2eproto 

namespace protobuf_protos_2fcontracts_2ev1_2ftrusted_5fimage_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protos_2fcontracts_2ev1_2ftrusted_5fimage_5fconfig_2eproto
namespace contracts {
namespace v1 {
class TrustedImageConfig;
class TrustedImageConfigDefaultTypeInternal;
extern TrustedImageConfigDefaultTypeInternal _TrustedImageConfig_default_instance_;
}  // namespace v1
}  // namespace contracts
namespace google {
namespace protobuf {
template<> ::contracts::v1::TrustedImageConfig* Arena::CreateMaybeMessage<::contracts::v1::TrustedImageConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace contracts {
namespace v1 {

// ===================================================================

class TrustedImageConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:contracts.v1.TrustedImageConfig) */ {
 public:
  TrustedImageConfig();
  virtual ~TrustedImageConfig();

  TrustedImageConfig(const TrustedImageConfig& from);

  inline TrustedImageConfig& operator=(const TrustedImageConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrustedImageConfig(TrustedImageConfig&& from) noexcept
    : TrustedImageConfig() {
    *this = ::std::move(from);
  }

  inline TrustedImageConfig& operator=(TrustedImageConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrustedImageConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrustedImageConfig* internal_default_instance() {
    return reinterpret_cast<const TrustedImageConfig*>(
               &_TrustedImageConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TrustedImageConfig* other);
  friend void swap(TrustedImageConfig& a, TrustedImageConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrustedImageConfig* New() const final {
    return CreateMaybeMessage<TrustedImageConfig>(NULL);
  }

  TrustedImageConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrustedImageConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrustedImageConfig& from);
  void MergeFrom(const TrustedImageConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustedImageConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string injected_credential_types = 5;
  int injected_credential_types_size() const;
  void clear_injected_credential_types();
  static const int kInjectedCredentialTypesFieldNumber = 5;
  const ::std::string& injected_credential_types(int index) const;
  ::std::string* mutable_injected_credential_types(int index);
  void set_injected_credential_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_injected_credential_types(int index, ::std::string&& value);
  #endif
  void set_injected_credential_types(int index, const char* value);
  void set_injected_credential_types(int index, const char* value, size_t size);
  ::std::string* add_injected_credential_types();
  void add_injected_credential_types(const ::std::string& value);
  #if LANG_CXX11
  void add_injected_credential_types(::std::string&& value);
  #endif
  void add_injected_credential_types(const char* value);
  void add_injected_credential_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& injected_credential_types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_injected_credential_types();

  // string image_path = 1;
  void clear_image_path();
  static const int kImagePathFieldNumber = 1;
  const ::std::string& image_path() const;
  void set_image_path(const ::std::string& value);
  #if LANG_CXX11
  void set_image_path(::std::string&& value);
  #endif
  void set_image_path(const char* value);
  void set_image_path(const char* value, size_t size);
  ::std::string* mutable_image_path();
  ::std::string* release_image_path();
  void set_allocated_image_path(::std::string* image_path);

  // bool run_privileged = 2;
  void clear_run_privileged();
  static const int kRunPrivilegedFieldNumber = 2;
  bool run_privileged() const;
  void set_run_privileged(bool value);

  // bool run_docker = 3;
  void clear_run_docker();
  static const int kRunDockerFieldNumber = 3;
  bool run_docker() const;
  void set_run_docker(bool value);

  // bool allow_commands = 4;
  void clear_allow_commands();
  static const int kAllowCommandsFieldNumber = 4;
  bool allow_commands() const;
  void set_allow_commands(bool value);

  // @@protoc_insertion_point(class_scope:contracts.v1.TrustedImageConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> injected_credential_types_;
  ::google::protobuf::internal::ArenaStringPtr image_path_;
  bool run_privileged_;
  bool run_docker_;
  bool allow_commands_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protos_2fcontracts_2ev1_2ftrusted_5fimage_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrustedImageConfig

// string image_path = 1;
inline void TrustedImageConfig::clear_image_path() {
  image_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrustedImageConfig::image_path() const {
  // @@protoc_insertion_point(field_get:contracts.v1.TrustedImageConfig.image_path)
  return image_path_.GetNoArena();
}
inline void TrustedImageConfig::set_image_path(const ::std::string& value) {
  
  image_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contracts.v1.TrustedImageConfig.image_path)
}
#if LANG_CXX11
inline void TrustedImageConfig::set_image_path(::std::string&& value) {
  
  image_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contracts.v1.TrustedImageConfig.image_path)
}
#endif
inline void TrustedImageConfig::set_image_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contracts.v1.TrustedImageConfig.image_path)
}
inline void TrustedImageConfig::set_image_path(const char* value, size_t size) {
  
  image_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contracts.v1.TrustedImageConfig.image_path)
}
inline ::std::string* TrustedImageConfig::mutable_image_path() {
  
  // @@protoc_insertion_point(field_mutable:contracts.v1.TrustedImageConfig.image_path)
  return image_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrustedImageConfig::release_image_path() {
  // @@protoc_insertion_point(field_release:contracts.v1.TrustedImageConfig.image_path)
  
  return image_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrustedImageConfig::set_allocated_image_path(::std::string* image_path) {
  if (image_path != NULL) {
    
  } else {
    
  }
  image_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_path);
  // @@protoc_insertion_point(field_set_allocated:contracts.v1.TrustedImageConfig.image_path)
}

// bool run_privileged = 2;
inline void TrustedImageConfig::clear_run_privileged() {
  run_privileged_ = false;
}
inline bool TrustedImageConfig::run_privileged() const {
  // @@protoc_insertion_point(field_get:contracts.v1.TrustedImageConfig.run_privileged)
  return run_privileged_;
}
inline void TrustedImageConfig::set_run_privileged(bool value) {
  
  run_privileged_ = value;
  // @@protoc_insertion_point(field_set:contracts.v1.TrustedImageConfig.run_privileged)
}

// bool run_docker = 3;
inline void TrustedImageConfig::clear_run_docker() {
  run_docker_ = false;
}
inline bool TrustedImageConfig::run_docker() const {
  // @@protoc_insertion_point(field_get:contracts.v1.TrustedImageConfig.run_docker)
  return run_docker_;
}
inline void TrustedImageConfig::set_run_docker(bool value) {
  
  run_docker_ = value;
  // @@protoc_insertion_point(field_set:contracts.v1.TrustedImageConfig.run_docker)
}

// bool allow_commands = 4;
inline void TrustedImageConfig::clear_allow_commands() {
  allow_commands_ = false;
}
inline bool TrustedImageConfig::allow_commands() const {
  // @@protoc_insertion_point(field_get:contracts.v1.TrustedImageConfig.allow_commands)
  return allow_commands_;
}
inline void TrustedImageConfig::set_allow_commands(bool value) {
  
  allow_commands_ = value;
  // @@protoc_insertion_point(field_set:contracts.v1.TrustedImageConfig.allow_commands)
}

// repeated string injected_credential_types = 5;
inline int TrustedImageConfig::injected_credential_types_size() const {
  return injected_credential_types_.size();
}
inline void TrustedImageConfig::clear_injected_credential_types() {
  injected_credential_types_.Clear();
}
inline const ::std::string& TrustedImageConfig::injected_credential_types(int index) const {
  // @@protoc_insertion_point(field_get:contracts.v1.TrustedImageConfig.injected_credential_types)
  return injected_credential_types_.Get(index);
}
inline ::std::string* TrustedImageConfig::mutable_injected_credential_types(int index) {
  // @@protoc_insertion_point(field_mutable:contracts.v1.TrustedImageConfig.injected_credential_types)
  return injected_credential_types_.Mutable(index);
}
inline void TrustedImageConfig::set_injected_credential_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:contracts.v1.TrustedImageConfig.injected_credential_types)
  injected_credential_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TrustedImageConfig::set_injected_credential_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:contracts.v1.TrustedImageConfig.injected_credential_types)
  injected_credential_types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TrustedImageConfig::set_injected_credential_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  injected_credential_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:contracts.v1.TrustedImageConfig.injected_credential_types)
}
inline void TrustedImageConfig::set_injected_credential_types(int index, const char* value, size_t size) {
  injected_credential_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:contracts.v1.TrustedImageConfig.injected_credential_types)
}
inline ::std::string* TrustedImageConfig::add_injected_credential_types() {
  // @@protoc_insertion_point(field_add_mutable:contracts.v1.TrustedImageConfig.injected_credential_types)
  return injected_credential_types_.Add();
}
inline void TrustedImageConfig::add_injected_credential_types(const ::std::string& value) {
  injected_credential_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:contracts.v1.TrustedImageConfig.injected_credential_types)
}
#if LANG_CXX11
inline void TrustedImageConfig::add_injected_credential_types(::std::string&& value) {
  injected_credential_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:contracts.v1.TrustedImageConfig.injected_credential_types)
}
#endif
inline void TrustedImageConfig::add_injected_credential_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  injected_credential_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:contracts.v1.TrustedImageConfig.injected_credential_types)
}
inline void TrustedImageConfig::add_injected_credential_types(const char* value, size_t size) {
  injected_credential_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:contracts.v1.TrustedImageConfig.injected_credential_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrustedImageConfig::injected_credential_types() const {
  // @@protoc_insertion_point(field_list:contracts.v1.TrustedImageConfig.injected_credential_types)
  return injected_credential_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrustedImageConfig::mutable_injected_credential_types() {
  // @@protoc_insertion_point(field_mutable_list:contracts.v1.TrustedImageConfig.injected_credential_types)
  return &injected_credential_types_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contracts

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protos_2fcontracts_2ev1_2ftrusted_5fimage_5fconfig_2eproto
