// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/contracts.v1/release_log.proto

#ifndef PROTOBUF_INCLUDED_protos_2fcontracts_2ev1_2frelease_5flog_2eproto
#define PROTOBUF_INCLUDED_protos_2fcontracts_2ev1_2frelease_5flog_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/contracts.v1/build_log_step.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fcontracts_2ev1_2frelease_5flog_2eproto 

namespace protobuf_protos_2fcontracts_2ev1_2frelease_5flog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protos_2fcontracts_2ev1_2frelease_5flog_2eproto
namespace contracts {
namespace v1 {
class ReleaseLog;
class ReleaseLogDefaultTypeInternal;
extern ReleaseLogDefaultTypeInternal _ReleaseLog_default_instance_;
}  // namespace v1
}  // namespace contracts
namespace google {
namespace protobuf {
template<> ::contracts::v1::ReleaseLog* Arena::CreateMaybeMessage<::contracts::v1::ReleaseLog>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace contracts {
namespace v1 {

// ===================================================================

class ReleaseLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:contracts.v1.ReleaseLog) */ {
 public:
  ReleaseLog();
  virtual ~ReleaseLog();

  ReleaseLog(const ReleaseLog& from);

  inline ReleaseLog& operator=(const ReleaseLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReleaseLog(ReleaseLog&& from) noexcept
    : ReleaseLog() {
    *this = ::std::move(from);
  }

  inline ReleaseLog& operator=(ReleaseLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReleaseLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleaseLog* internal_default_instance() {
    return reinterpret_cast<const ReleaseLog*>(
               &_ReleaseLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReleaseLog* other);
  friend void swap(ReleaseLog& a, ReleaseLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReleaseLog* New() const final {
    return CreateMaybeMessage<ReleaseLog>(NULL);
  }

  ReleaseLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReleaseLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReleaseLog& from);
  void MergeFrom(const ReleaseLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .contracts.v1.BuildLogStep steps = 6;
  int steps_size() const;
  void clear_steps();
  static const int kStepsFieldNumber = 6;
  ::contracts::v1::BuildLogStep* mutable_steps(int index);
  ::google::protobuf::RepeatedPtrField< ::contracts::v1::BuildLogStep >*
      mutable_steps();
  const ::contracts::v1::BuildLogStep& steps(int index) const;
  ::contracts::v1::BuildLogStep* add_steps();
  const ::google::protobuf::RepeatedPtrField< ::contracts::v1::BuildLogStep >&
      steps() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id__();
  void set_allocated_id(::std::string* id);

  // string repo_source = 2;
  void clear_repo_source();
  static const int kRepoSourceFieldNumber = 2;
  const ::std::string& repo_source() const;
  void set_repo_source(const ::std::string& value);
  #if LANG_CXX11
  void set_repo_source(::std::string&& value);
  #endif
  void set_repo_source(const char* value);
  void set_repo_source(const char* value, size_t size);
  ::std::string* mutable_repo_source();
  ::std::string* release_repo_source();
  void set_allocated_repo_source(::std::string* repo_source);

  // string repo_owner = 3;
  void clear_repo_owner();
  static const int kRepoOwnerFieldNumber = 3;
  const ::std::string& repo_owner() const;
  void set_repo_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_repo_owner(::std::string&& value);
  #endif
  void set_repo_owner(const char* value);
  void set_repo_owner(const char* value, size_t size);
  ::std::string* mutable_repo_owner();
  ::std::string* release_repo_owner();
  void set_allocated_repo_owner(::std::string* repo_owner);

  // string repo_name = 4;
  void clear_repo_name();
  static const int kRepoNameFieldNumber = 4;
  const ::std::string& repo_name() const;
  void set_repo_name(const ::std::string& value);
  #if LANG_CXX11
  void set_repo_name(::std::string&& value);
  #endif
  void set_repo_name(const char* value);
  void set_repo_name(const char* value, size_t size);
  ::std::string* mutable_repo_name();
  ::std::string* release_repo_name();
  void set_allocated_repo_name(::std::string* repo_name);

  // string release_id = 5;
  void clear_release_id();
  static const int kReleaseIdFieldNumber = 5;
  const ::std::string& release_id() const;
  void set_release_id(const ::std::string& value);
  #if LANG_CXX11
  void set_release_id(::std::string&& value);
  #endif
  void set_release_id(const char* value);
  void set_release_id(const char* value, size_t size);
  ::std::string* mutable_release_id();
  ::std::string* release_release_id();
  void set_allocated_release_id(::std::string* release_id);

  // .google.protobuf.Timestamp inserted_at = 7;
  bool has_inserted_at() const;
  void clear_inserted_at();
  static const int kInsertedAtFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_inserted_at() const;
  public:
  const ::google::protobuf::Timestamp& inserted_at() const;
  ::google::protobuf::Timestamp* release_inserted_at();
  ::google::protobuf::Timestamp* mutable_inserted_at();
  void set_allocated_inserted_at(::google::protobuf::Timestamp* inserted_at);

  // @@protoc_insertion_point(class_scope:contracts.v1.ReleaseLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::contracts::v1::BuildLogStep > steps_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr repo_source_;
  ::google::protobuf::internal::ArenaStringPtr repo_owner_;
  ::google::protobuf::internal::ArenaStringPtr repo_name_;
  ::google::protobuf::internal::ArenaStringPtr release_id_;
  ::google::protobuf::Timestamp* inserted_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protos_2fcontracts_2ev1_2frelease_5flog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReleaseLog

// string id = 1;
inline void ReleaseLog::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReleaseLog::id() const {
  // @@protoc_insertion_point(field_get:contracts.v1.ReleaseLog.id)
  return id_.GetNoArena();
}
inline void ReleaseLog::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contracts.v1.ReleaseLog.id)
}
#if LANG_CXX11
inline void ReleaseLog::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contracts.v1.ReleaseLog.id)
}
#endif
inline void ReleaseLog::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contracts.v1.ReleaseLog.id)
}
inline void ReleaseLog::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contracts.v1.ReleaseLog.id)
}
inline ::std::string* ReleaseLog::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:contracts.v1.ReleaseLog.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReleaseLog::release_id__() {
  // @@protoc_insertion_point(field_release:contracts.v1.ReleaseLog.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseLog::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:contracts.v1.ReleaseLog.id)
}

// string repo_source = 2;
inline void ReleaseLog::clear_repo_source() {
  repo_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReleaseLog::repo_source() const {
  // @@protoc_insertion_point(field_get:contracts.v1.ReleaseLog.repo_source)
  return repo_source_.GetNoArena();
}
inline void ReleaseLog::set_repo_source(const ::std::string& value) {
  
  repo_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contracts.v1.ReleaseLog.repo_source)
}
#if LANG_CXX11
inline void ReleaseLog::set_repo_source(::std::string&& value) {
  
  repo_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contracts.v1.ReleaseLog.repo_source)
}
#endif
inline void ReleaseLog::set_repo_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  repo_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contracts.v1.ReleaseLog.repo_source)
}
inline void ReleaseLog::set_repo_source(const char* value, size_t size) {
  
  repo_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contracts.v1.ReleaseLog.repo_source)
}
inline ::std::string* ReleaseLog::mutable_repo_source() {
  
  // @@protoc_insertion_point(field_mutable:contracts.v1.ReleaseLog.repo_source)
  return repo_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReleaseLog::release_repo_source() {
  // @@protoc_insertion_point(field_release:contracts.v1.ReleaseLog.repo_source)
  
  return repo_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseLog::set_allocated_repo_source(::std::string* repo_source) {
  if (repo_source != NULL) {
    
  } else {
    
  }
  repo_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repo_source);
  // @@protoc_insertion_point(field_set_allocated:contracts.v1.ReleaseLog.repo_source)
}

// string repo_owner = 3;
inline void ReleaseLog::clear_repo_owner() {
  repo_owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReleaseLog::repo_owner() const {
  // @@protoc_insertion_point(field_get:contracts.v1.ReleaseLog.repo_owner)
  return repo_owner_.GetNoArena();
}
inline void ReleaseLog::set_repo_owner(const ::std::string& value) {
  
  repo_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contracts.v1.ReleaseLog.repo_owner)
}
#if LANG_CXX11
inline void ReleaseLog::set_repo_owner(::std::string&& value) {
  
  repo_owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contracts.v1.ReleaseLog.repo_owner)
}
#endif
inline void ReleaseLog::set_repo_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  repo_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contracts.v1.ReleaseLog.repo_owner)
}
inline void ReleaseLog::set_repo_owner(const char* value, size_t size) {
  
  repo_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contracts.v1.ReleaseLog.repo_owner)
}
inline ::std::string* ReleaseLog::mutable_repo_owner() {
  
  // @@protoc_insertion_point(field_mutable:contracts.v1.ReleaseLog.repo_owner)
  return repo_owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReleaseLog::release_repo_owner() {
  // @@protoc_insertion_point(field_release:contracts.v1.ReleaseLog.repo_owner)
  
  return repo_owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseLog::set_allocated_repo_owner(::std::string* repo_owner) {
  if (repo_owner != NULL) {
    
  } else {
    
  }
  repo_owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repo_owner);
  // @@protoc_insertion_point(field_set_allocated:contracts.v1.ReleaseLog.repo_owner)
}

// string repo_name = 4;
inline void ReleaseLog::clear_repo_name() {
  repo_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReleaseLog::repo_name() const {
  // @@protoc_insertion_point(field_get:contracts.v1.ReleaseLog.repo_name)
  return repo_name_.GetNoArena();
}
inline void ReleaseLog::set_repo_name(const ::std::string& value) {
  
  repo_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contracts.v1.ReleaseLog.repo_name)
}
#if LANG_CXX11
inline void ReleaseLog::set_repo_name(::std::string&& value) {
  
  repo_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contracts.v1.ReleaseLog.repo_name)
}
#endif
inline void ReleaseLog::set_repo_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  repo_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contracts.v1.ReleaseLog.repo_name)
}
inline void ReleaseLog::set_repo_name(const char* value, size_t size) {
  
  repo_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contracts.v1.ReleaseLog.repo_name)
}
inline ::std::string* ReleaseLog::mutable_repo_name() {
  
  // @@protoc_insertion_point(field_mutable:contracts.v1.ReleaseLog.repo_name)
  return repo_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReleaseLog::release_repo_name() {
  // @@protoc_insertion_point(field_release:contracts.v1.ReleaseLog.repo_name)
  
  return repo_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseLog::set_allocated_repo_name(::std::string* repo_name) {
  if (repo_name != NULL) {
    
  } else {
    
  }
  repo_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repo_name);
  // @@protoc_insertion_point(field_set_allocated:contracts.v1.ReleaseLog.repo_name)
}

// string release_id = 5;
inline void ReleaseLog::clear_release_id() {
  release_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReleaseLog::release_id() const {
  // @@protoc_insertion_point(field_get:contracts.v1.ReleaseLog.release_id)
  return release_id_.GetNoArena();
}
inline void ReleaseLog::set_release_id(const ::std::string& value) {
  
  release_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contracts.v1.ReleaseLog.release_id)
}
#if LANG_CXX11
inline void ReleaseLog::set_release_id(::std::string&& value) {
  
  release_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contracts.v1.ReleaseLog.release_id)
}
#endif
inline void ReleaseLog::set_release_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  release_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contracts.v1.ReleaseLog.release_id)
}
inline void ReleaseLog::set_release_id(const char* value, size_t size) {
  
  release_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contracts.v1.ReleaseLog.release_id)
}
inline ::std::string* ReleaseLog::mutable_release_id() {
  
  // @@protoc_insertion_point(field_mutable:contracts.v1.ReleaseLog.release_id)
  return release_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReleaseLog::release_release_id() {
  // @@protoc_insertion_point(field_release:contracts.v1.ReleaseLog.release_id)
  
  return release_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseLog::set_allocated_release_id(::std::string* release_id) {
  if (release_id != NULL) {
    
  } else {
    
  }
  release_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), release_id);
  // @@protoc_insertion_point(field_set_allocated:contracts.v1.ReleaseLog.release_id)
}

// repeated .contracts.v1.BuildLogStep steps = 6;
inline int ReleaseLog::steps_size() const {
  return steps_.size();
}
inline ::contracts::v1::BuildLogStep* ReleaseLog::mutable_steps(int index) {
  // @@protoc_insertion_point(field_mutable:contracts.v1.ReleaseLog.steps)
  return steps_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::contracts::v1::BuildLogStep >*
ReleaseLog::mutable_steps() {
  // @@protoc_insertion_point(field_mutable_list:contracts.v1.ReleaseLog.steps)
  return &steps_;
}
inline const ::contracts::v1::BuildLogStep& ReleaseLog::steps(int index) const {
  // @@protoc_insertion_point(field_get:contracts.v1.ReleaseLog.steps)
  return steps_.Get(index);
}
inline ::contracts::v1::BuildLogStep* ReleaseLog::add_steps() {
  // @@protoc_insertion_point(field_add:contracts.v1.ReleaseLog.steps)
  return steps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::contracts::v1::BuildLogStep >&
ReleaseLog::steps() const {
  // @@protoc_insertion_point(field_list:contracts.v1.ReleaseLog.steps)
  return steps_;
}

// .google.protobuf.Timestamp inserted_at = 7;
inline bool ReleaseLog::has_inserted_at() const {
  return this != internal_default_instance() && inserted_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& ReleaseLog::_internal_inserted_at() const {
  return *inserted_at_;
}
inline const ::google::protobuf::Timestamp& ReleaseLog::inserted_at() const {
  const ::google::protobuf::Timestamp* p = inserted_at_;
  // @@protoc_insertion_point(field_get:contracts.v1.ReleaseLog.inserted_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ReleaseLog::release_inserted_at() {
  // @@protoc_insertion_point(field_release:contracts.v1.ReleaseLog.inserted_at)
  
  ::google::protobuf::Timestamp* temp = inserted_at_;
  inserted_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ReleaseLog::mutable_inserted_at() {
  
  if (inserted_at_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    inserted_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:contracts.v1.ReleaseLog.inserted_at)
  return inserted_at_;
}
inline void ReleaseLog::set_allocated_inserted_at(::google::protobuf::Timestamp* inserted_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inserted_at_);
  }
  if (inserted_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(inserted_at)->GetArena();
    if (message_arena != submessage_arena) {
      inserted_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inserted_at, submessage_arena);
    }
    
  } else {
    
  }
  inserted_at_ = inserted_at;
  // @@protoc_insertion_point(field_set_allocated:contracts.v1.ReleaseLog.inserted_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contracts

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protos_2fcontracts_2ev1_2frelease_5flog_2eproto
