// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/manifest.v1/estafette_docker_trigger.proto

#ifndef PROTOBUF_INCLUDED_protos_2fmanifest_2ev1_2festafette_5fdocker_5ftrigger_2eproto
#define PROTOBUF_INCLUDED_protos_2fmanifest_2ev1_2festafette_5fdocker_5ftrigger_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fmanifest_2ev1_2festafette_5fdocker_5ftrigger_2eproto 

namespace protobuf_protos_2fmanifest_2ev1_2festafette_5fdocker_5ftrigger_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protos_2fmanifest_2ev1_2festafette_5fdocker_5ftrigger_2eproto
namespace manifest {
namespace v1 {
class EstafetteDockerTrigger;
class EstafetteDockerTriggerDefaultTypeInternal;
extern EstafetteDockerTriggerDefaultTypeInternal _EstafetteDockerTrigger_default_instance_;
}  // namespace v1
}  // namespace manifest
namespace google {
namespace protobuf {
template<> ::manifest::v1::EstafetteDockerTrigger* Arena::CreateMaybeMessage<::manifest::v1::EstafetteDockerTrigger>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace manifest {
namespace v1 {

// ===================================================================

class EstafetteDockerTrigger : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manifest.v1.EstafetteDockerTrigger) */ {
 public:
  EstafetteDockerTrigger();
  virtual ~EstafetteDockerTrigger();

  EstafetteDockerTrigger(const EstafetteDockerTrigger& from);

  inline EstafetteDockerTrigger& operator=(const EstafetteDockerTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EstafetteDockerTrigger(EstafetteDockerTrigger&& from) noexcept
    : EstafetteDockerTrigger() {
    *this = ::std::move(from);
  }

  inline EstafetteDockerTrigger& operator=(EstafetteDockerTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EstafetteDockerTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstafetteDockerTrigger* internal_default_instance() {
    return reinterpret_cast<const EstafetteDockerTrigger*>(
               &_EstafetteDockerTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EstafetteDockerTrigger* other);
  friend void swap(EstafetteDockerTrigger& a, EstafetteDockerTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EstafetteDockerTrigger* New() const final {
    return CreateMaybeMessage<EstafetteDockerTrigger>(NULL);
  }

  EstafetteDockerTrigger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EstafetteDockerTrigger>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EstafetteDockerTrigger& from);
  void MergeFrom(const EstafetteDockerTrigger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstafetteDockerTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string event = 1;
  void clear_event();
  static const int kEventFieldNumber = 1;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);

  // string image = 2;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // string tag = 3;
  void clear_tag();
  static const int kTagFieldNumber = 3;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // @@protoc_insertion_point(class_scope:manifest.v1.EstafetteDockerTrigger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protos_2fmanifest_2ev1_2festafette_5fdocker_5ftrigger_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EstafetteDockerTrigger

// string event = 1;
inline void EstafetteDockerTrigger::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EstafetteDockerTrigger::event() const {
  // @@protoc_insertion_point(field_get:manifest.v1.EstafetteDockerTrigger.event)
  return event_.GetNoArena();
}
inline void EstafetteDockerTrigger::set_event(const ::std::string& value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manifest.v1.EstafetteDockerTrigger.event)
}
#if LANG_CXX11
inline void EstafetteDockerTrigger::set_event(::std::string&& value) {
  
  event_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manifest.v1.EstafetteDockerTrigger.event)
}
#endif
inline void EstafetteDockerTrigger::set_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manifest.v1.EstafetteDockerTrigger.event)
}
inline void EstafetteDockerTrigger::set_event(const char* value, size_t size) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manifest.v1.EstafetteDockerTrigger.event)
}
inline ::std::string* EstafetteDockerTrigger::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:manifest.v1.EstafetteDockerTrigger.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EstafetteDockerTrigger::release_event() {
  // @@protoc_insertion_point(field_release:manifest.v1.EstafetteDockerTrigger.event)
  
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EstafetteDockerTrigger::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:manifest.v1.EstafetteDockerTrigger.event)
}

// string image = 2;
inline void EstafetteDockerTrigger::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EstafetteDockerTrigger::image() const {
  // @@protoc_insertion_point(field_get:manifest.v1.EstafetteDockerTrigger.image)
  return image_.GetNoArena();
}
inline void EstafetteDockerTrigger::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manifest.v1.EstafetteDockerTrigger.image)
}
#if LANG_CXX11
inline void EstafetteDockerTrigger::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manifest.v1.EstafetteDockerTrigger.image)
}
#endif
inline void EstafetteDockerTrigger::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manifest.v1.EstafetteDockerTrigger.image)
}
inline void EstafetteDockerTrigger::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manifest.v1.EstafetteDockerTrigger.image)
}
inline ::std::string* EstafetteDockerTrigger::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:manifest.v1.EstafetteDockerTrigger.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EstafetteDockerTrigger::release_image() {
  // @@protoc_insertion_point(field_release:manifest.v1.EstafetteDockerTrigger.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EstafetteDockerTrigger::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:manifest.v1.EstafetteDockerTrigger.image)
}

// string tag = 3;
inline void EstafetteDockerTrigger::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EstafetteDockerTrigger::tag() const {
  // @@protoc_insertion_point(field_get:manifest.v1.EstafetteDockerTrigger.tag)
  return tag_.GetNoArena();
}
inline void EstafetteDockerTrigger::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manifest.v1.EstafetteDockerTrigger.tag)
}
#if LANG_CXX11
inline void EstafetteDockerTrigger::set_tag(::std::string&& value) {
  
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manifest.v1.EstafetteDockerTrigger.tag)
}
#endif
inline void EstafetteDockerTrigger::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manifest.v1.EstafetteDockerTrigger.tag)
}
inline void EstafetteDockerTrigger::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manifest.v1.EstafetteDockerTrigger.tag)
}
inline ::std::string* EstafetteDockerTrigger::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:manifest.v1.EstafetteDockerTrigger.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EstafetteDockerTrigger::release_tag() {
  // @@protoc_insertion_point(field_release:manifest.v1.EstafetteDockerTrigger.tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EstafetteDockerTrigger::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:manifest.v1.EstafetteDockerTrigger.tag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace manifest

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protos_2fmanifest_2ev1_2festafette_5fdocker_5ftrigger_2eproto
