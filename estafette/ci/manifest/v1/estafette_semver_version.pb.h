// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/manifest/v1/estafette_semver_version.proto

#ifndef PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5fsemver_5fversion_2eproto
#define PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5fsemver_5fversion_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "estafette/ci/manifest/v1/string_or_string_array.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5fsemver_5fversion_2eproto 

namespace protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5fsemver_5fversion_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5fsemver_5fversion_2eproto
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {
class EstafetteSemverVersion;
class EstafetteSemverVersionDefaultTypeInternal;
extern EstafetteSemverVersionDefaultTypeInternal _EstafetteSemverVersion_default_instance_;
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
namespace google {
namespace protobuf {
template<> ::estafette::ci::manifest::v1::EstafetteSemverVersion* Arena::CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteSemverVersion>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {

// ===================================================================

class EstafetteSemverVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:estafette.ci.manifest.v1.EstafetteSemverVersion) */ {
 public:
  EstafetteSemverVersion();
  virtual ~EstafetteSemverVersion();

  EstafetteSemverVersion(const EstafetteSemverVersion& from);

  inline EstafetteSemverVersion& operator=(const EstafetteSemverVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EstafetteSemverVersion(EstafetteSemverVersion&& from) noexcept
    : EstafetteSemverVersion() {
    *this = ::std::move(from);
  }

  inline EstafetteSemverVersion& operator=(EstafetteSemverVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EstafetteSemverVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstafetteSemverVersion* internal_default_instance() {
    return reinterpret_cast<const EstafetteSemverVersion*>(
               &_EstafetteSemverVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EstafetteSemverVersion* other);
  friend void swap(EstafetteSemverVersion& a, EstafetteSemverVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EstafetteSemverVersion* New() const final {
    return CreateMaybeMessage<EstafetteSemverVersion>(NULL);
  }

  EstafetteSemverVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EstafetteSemverVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EstafetteSemverVersion& from);
  void MergeFrom(const EstafetteSemverVersion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstafetteSemverVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string patch = 3;
  void clear_patch();
  static const int kPatchFieldNumber = 3;
  const ::std::string& patch() const;
  void set_patch(const ::std::string& value);
  #if LANG_CXX11
  void set_patch(::std::string&& value);
  #endif
  void set_patch(const char* value);
  void set_patch(const char* value, size_t size);
  ::std::string* mutable_patch();
  ::std::string* release_patch();
  void set_allocated_patch(::std::string* patch);

  // string label_template = 4;
  void clear_label_template();
  static const int kLabelTemplateFieldNumber = 4;
  const ::std::string& label_template() const;
  void set_label_template(const ::std::string& value);
  #if LANG_CXX11
  void set_label_template(::std::string&& value);
  #endif
  void set_label_template(const char* value);
  void set_label_template(const char* value, size_t size);
  ::std::string* mutable_label_template();
  ::std::string* release_label_template();
  void set_allocated_label_template(::std::string* label_template);

  // .estafette.ci.manifest.v1.StringOrStringArray release_branch = 5;
  bool has_release_branch() const;
  void clear_release_branch();
  static const int kReleaseBranchFieldNumber = 5;
  private:
  const ::estafette::ci::manifest::v1::StringOrStringArray& _internal_release_branch() const;
  public:
  const ::estafette::ci::manifest::v1::StringOrStringArray& release_branch() const;
  ::estafette::ci::manifest::v1::StringOrStringArray* release_release_branch();
  ::estafette::ci::manifest::v1::StringOrStringArray* mutable_release_branch();
  void set_allocated_release_branch(::estafette::ci::manifest::v1::StringOrStringArray* release_branch);

  // int64 major = 1;
  void clear_major();
  static const int kMajorFieldNumber = 1;
  ::google::protobuf::int64 major() const;
  void set_major(::google::protobuf::int64 value);

  // int64 minor = 2;
  void clear_minor();
  static const int kMinorFieldNumber = 2;
  ::google::protobuf::int64 minor() const;
  void set_minor(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:estafette.ci.manifest.v1.EstafetteSemverVersion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr patch_;
  ::google::protobuf::internal::ArenaStringPtr label_template_;
  ::estafette::ci::manifest::v1::StringOrStringArray* release_branch_;
  ::google::protobuf::int64 major_;
  ::google::protobuf::int64 minor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5fsemver_5fversion_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EstafetteSemverVersion

// int64 major = 1;
inline void EstafetteSemverVersion::clear_major() {
  major_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EstafetteSemverVersion::major() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteSemverVersion.major)
  return major_;
}
inline void EstafetteSemverVersion::set_major(::google::protobuf::int64 value) {
  
  major_ = value;
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafetteSemverVersion.major)
}

// int64 minor = 2;
inline void EstafetteSemverVersion::clear_minor() {
  minor_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EstafetteSemverVersion::minor() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteSemverVersion.minor)
  return minor_;
}
inline void EstafetteSemverVersion::set_minor(::google::protobuf::int64 value) {
  
  minor_ = value;
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafetteSemverVersion.minor)
}

// string patch = 3;
inline void EstafetteSemverVersion::clear_patch() {
  patch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EstafetteSemverVersion::patch() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteSemverVersion.patch)
  return patch_.GetNoArena();
}
inline void EstafetteSemverVersion::set_patch(const ::std::string& value) {
  
  patch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafetteSemverVersion.patch)
}
#if LANG_CXX11
inline void EstafetteSemverVersion::set_patch(::std::string&& value) {
  
  patch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.manifest.v1.EstafetteSemverVersion.patch)
}
#endif
inline void EstafetteSemverVersion::set_patch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  patch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.manifest.v1.EstafetteSemverVersion.patch)
}
inline void EstafetteSemverVersion::set_patch(const char* value, size_t size) {
  
  patch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.manifest.v1.EstafetteSemverVersion.patch)
}
inline ::std::string* EstafetteSemverVersion::mutable_patch() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteSemverVersion.patch)
  return patch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EstafetteSemverVersion::release_patch() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteSemverVersion.patch)
  
  return patch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EstafetteSemverVersion::set_allocated_patch(::std::string* patch) {
  if (patch != NULL) {
    
  } else {
    
  }
  patch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), patch);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteSemverVersion.patch)
}

// string label_template = 4;
inline void EstafetteSemverVersion::clear_label_template() {
  label_template_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EstafetteSemverVersion::label_template() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteSemverVersion.label_template)
  return label_template_.GetNoArena();
}
inline void EstafetteSemverVersion::set_label_template(const ::std::string& value) {
  
  label_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafetteSemverVersion.label_template)
}
#if LANG_CXX11
inline void EstafetteSemverVersion::set_label_template(::std::string&& value) {
  
  label_template_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.manifest.v1.EstafetteSemverVersion.label_template)
}
#endif
inline void EstafetteSemverVersion::set_label_template(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.manifest.v1.EstafetteSemverVersion.label_template)
}
inline void EstafetteSemverVersion::set_label_template(const char* value, size_t size) {
  
  label_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.manifest.v1.EstafetteSemverVersion.label_template)
}
inline ::std::string* EstafetteSemverVersion::mutable_label_template() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteSemverVersion.label_template)
  return label_template_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EstafetteSemverVersion::release_label_template() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteSemverVersion.label_template)
  
  return label_template_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EstafetteSemverVersion::set_allocated_label_template(::std::string* label_template) {
  if (label_template != NULL) {
    
  } else {
    
  }
  label_template_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_template);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteSemverVersion.label_template)
}

// .estafette.ci.manifest.v1.StringOrStringArray release_branch = 5;
inline bool EstafetteSemverVersion::has_release_branch() const {
  return this != internal_default_instance() && release_branch_ != NULL;
}
inline const ::estafette::ci::manifest::v1::StringOrStringArray& EstafetteSemverVersion::_internal_release_branch() const {
  return *release_branch_;
}
inline const ::estafette::ci::manifest::v1::StringOrStringArray& EstafetteSemverVersion::release_branch() const {
  const ::estafette::ci::manifest::v1::StringOrStringArray* p = release_branch_;
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteSemverVersion.release_branch)
  return p != NULL ? *p : *reinterpret_cast<const ::estafette::ci::manifest::v1::StringOrStringArray*>(
      &::estafette::ci::manifest::v1::_StringOrStringArray_default_instance_);
}
inline ::estafette::ci::manifest::v1::StringOrStringArray* EstafetteSemverVersion::release_release_branch() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteSemverVersion.release_branch)
  
  ::estafette::ci::manifest::v1::StringOrStringArray* temp = release_branch_;
  release_branch_ = NULL;
  return temp;
}
inline ::estafette::ci::manifest::v1::StringOrStringArray* EstafetteSemverVersion::mutable_release_branch() {
  
  if (release_branch_ == NULL) {
    auto* p = CreateMaybeMessage<::estafette::ci::manifest::v1::StringOrStringArray>(GetArenaNoVirtual());
    release_branch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteSemverVersion.release_branch)
  return release_branch_;
}
inline void EstafetteSemverVersion::set_allocated_release_branch(::estafette::ci::manifest::v1::StringOrStringArray* release_branch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(release_branch_);
  }
  if (release_branch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      release_branch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, release_branch, submessage_arena);
    }
    
  } else {
    
  }
  release_branch_ = release_branch;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteSemverVersion.release_branch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5fsemver_5fversion_2eproto
