// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/manifest/v1/estafette_trigger.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "estafette/ci/manifest/v1/estafette_cron_trigger.pb.h"
#include "estafette/ci/manifest/v1/estafette_docker_trigger.pb.h"
#include "estafette/ci/manifest/v1/estafette_git_trigger.pb.h"
#include "estafette/ci/manifest/v1/estafette_pipeline_trigger.pb.h"
#include "estafette/ci/manifest/v1/estafette_pub_sub_trigger.pb.h"
#include "estafette/ci/manifest/v1/estafette_release_trigger.pb.h"
#include "estafette/ci/manifest/v1/estafette_trigger_build_action.pb.h"
#include "estafette/ci/manifest/v1/estafette_trigger_release_action.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto;
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {
class EstafetteTrigger;
class EstafetteTriggerDefaultTypeInternal;
extern EstafetteTriggerDefaultTypeInternal _EstafetteTrigger_default_instance_;
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> ::estafette::ci::manifest::v1::EstafetteTrigger* Arena::CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteTrigger>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {

// ===================================================================

class EstafetteTrigger :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:estafette.ci.manifest.v1.EstafetteTrigger) */ {
 public:
  EstafetteTrigger();
  virtual ~EstafetteTrigger();

  EstafetteTrigger(const EstafetteTrigger& from);
  EstafetteTrigger(EstafetteTrigger&& from) noexcept
    : EstafetteTrigger() {
    *this = ::std::move(from);
  }

  inline EstafetteTrigger& operator=(const EstafetteTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstafetteTrigger& operator=(EstafetteTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstafetteTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstafetteTrigger* internal_default_instance() {
    return reinterpret_cast<const EstafetteTrigger*>(
               &_EstafetteTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EstafetteTrigger* other);
  friend void swap(EstafetteTrigger& a, EstafetteTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EstafetteTrigger* New() const final {
    return CreateMaybeMessage<EstafetteTrigger>(nullptr);
  }

  EstafetteTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstafetteTrigger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstafetteTrigger& from);
  void MergeFrom(const EstafetteTrigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstafetteTrigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "estafette.ci.manifest.v1.EstafetteTrigger";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto);
    return ::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .estafette.ci.manifest.v1.EstafettePipelineTrigger pipeline = 1;
  bool has_pipeline() const;
  void clear_pipeline();
  static const int kPipelineFieldNumber = 1;
  const ::estafette::ci::manifest::v1::EstafettePipelineTrigger& pipeline() const;
  ::estafette::ci::manifest::v1::EstafettePipelineTrigger* release_pipeline();
  ::estafette::ci::manifest::v1::EstafettePipelineTrigger* mutable_pipeline();
  void set_allocated_pipeline(::estafette::ci::manifest::v1::EstafettePipelineTrigger* pipeline);

  // .estafette.ci.manifest.v1.EstafetteReleaseTrigger release = 2;
  bool has_release() const;
  void clear_release();
  static const int kReleaseFieldNumber = 2;
  const ::estafette::ci::manifest::v1::EstafetteReleaseTrigger& release() const;
  ::estafette::ci::manifest::v1::EstafetteReleaseTrigger* release_release();
  ::estafette::ci::manifest::v1::EstafetteReleaseTrigger* mutable_release();
  void set_allocated_release(::estafette::ci::manifest::v1::EstafetteReleaseTrigger* release);

  // .estafette.ci.manifest.v1.EstafetteGitTrigger git = 3;
  bool has_git() const;
  void clear_git();
  static const int kGitFieldNumber = 3;
  const ::estafette::ci::manifest::v1::EstafetteGitTrigger& git() const;
  ::estafette::ci::manifest::v1::EstafetteGitTrigger* release_git();
  ::estafette::ci::manifest::v1::EstafetteGitTrigger* mutable_git();
  void set_allocated_git(::estafette::ci::manifest::v1::EstafetteGitTrigger* git);

  // .estafette.ci.manifest.v1.EstafetteDockerTrigger docker = 4;
  bool has_docker() const;
  void clear_docker();
  static const int kDockerFieldNumber = 4;
  const ::estafette::ci::manifest::v1::EstafetteDockerTrigger& docker() const;
  ::estafette::ci::manifest::v1::EstafetteDockerTrigger* release_docker();
  ::estafette::ci::manifest::v1::EstafetteDockerTrigger* mutable_docker();
  void set_allocated_docker(::estafette::ci::manifest::v1::EstafetteDockerTrigger* docker);

  // .estafette.ci.manifest.v1.EstafetteCronTrigger cron = 5;
  bool has_cron() const;
  void clear_cron();
  static const int kCronFieldNumber = 5;
  const ::estafette::ci::manifest::v1::EstafetteCronTrigger& cron() const;
  ::estafette::ci::manifest::v1::EstafetteCronTrigger* release_cron();
  ::estafette::ci::manifest::v1::EstafetteCronTrigger* mutable_cron();
  void set_allocated_cron(::estafette::ci::manifest::v1::EstafetteCronTrigger* cron);

  // .estafette.ci.manifest.v1.EstafettePubSubTrigger pub_sub = 6;
  bool has_pub_sub() const;
  void clear_pub_sub();
  static const int kPubSubFieldNumber = 6;
  const ::estafette::ci::manifest::v1::EstafettePubSubTrigger& pub_sub() const;
  ::estafette::ci::manifest::v1::EstafettePubSubTrigger* release_pub_sub();
  ::estafette::ci::manifest::v1::EstafettePubSubTrigger* mutable_pub_sub();
  void set_allocated_pub_sub(::estafette::ci::manifest::v1::EstafettePubSubTrigger* pub_sub);

  // .estafette.ci.manifest.v1.EstafetteTriggerBuildAction build_action = 7;
  bool has_build_action() const;
  void clear_build_action();
  static const int kBuildActionFieldNumber = 7;
  const ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction& build_action() const;
  ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction* release_build_action();
  ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction* mutable_build_action();
  void set_allocated_build_action(::estafette::ci::manifest::v1::EstafetteTriggerBuildAction* build_action);

  // .estafette.ci.manifest.v1.EstafetteTriggerReleaseAction release_action = 8;
  bool has_release_action() const;
  void clear_release_action();
  static const int kReleaseActionFieldNumber = 8;
  const ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction& release_action() const;
  ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction* release_release_action();
  ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction* mutable_release_action();
  void set_allocated_release_action(::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction* release_action);

  // @@protoc_insertion_point(class_scope:estafette.ci.manifest.v1.EstafetteTrigger)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::estafette::ci::manifest::v1::EstafettePipelineTrigger* pipeline_;
  ::estafette::ci::manifest::v1::EstafetteReleaseTrigger* release_;
  ::estafette::ci::manifest::v1::EstafetteGitTrigger* git_;
  ::estafette::ci::manifest::v1::EstafetteDockerTrigger* docker_;
  ::estafette::ci::manifest::v1::EstafetteCronTrigger* cron_;
  ::estafette::ci::manifest::v1::EstafettePubSubTrigger* pub_sub_;
  ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction* build_action_;
  ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction* release_action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EstafetteTrigger

// .estafette.ci.manifest.v1.EstafettePipelineTrigger pipeline = 1;
inline bool EstafetteTrigger::has_pipeline() const {
  return this != internal_default_instance() && pipeline_ != nullptr;
}
inline const ::estafette::ci::manifest::v1::EstafettePipelineTrigger& EstafetteTrigger::pipeline() const {
  const ::estafette::ci::manifest::v1::EstafettePipelineTrigger* p = pipeline_;
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteTrigger.pipeline)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::manifest::v1::EstafettePipelineTrigger*>(
      &::estafette::ci::manifest::v1::_EstafettePipelineTrigger_default_instance_);
}
inline ::estafette::ci::manifest::v1::EstafettePipelineTrigger* EstafetteTrigger::release_pipeline() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteTrigger.pipeline)
  
  ::estafette::ci::manifest::v1::EstafettePipelineTrigger* temp = pipeline_;
  pipeline_ = nullptr;
  return temp;
}
inline ::estafette::ci::manifest::v1::EstafettePipelineTrigger* EstafetteTrigger::mutable_pipeline() {
  
  if (pipeline_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::manifest::v1::EstafettePipelineTrigger>(GetArenaNoVirtual());
    pipeline_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteTrigger.pipeline)
  return pipeline_;
}
inline void EstafetteTrigger::set_allocated_pipeline(::estafette::ci::manifest::v1::EstafettePipelineTrigger* pipeline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pipeline_);
  }
  if (pipeline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pipeline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pipeline, submessage_arena);
    }
    
  } else {
    
  }
  pipeline_ = pipeline;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteTrigger.pipeline)
}

// .estafette.ci.manifest.v1.EstafetteReleaseTrigger release = 2;
inline bool EstafetteTrigger::has_release() const {
  return this != internal_default_instance() && release_ != nullptr;
}
inline const ::estafette::ci::manifest::v1::EstafetteReleaseTrigger& EstafetteTrigger::release() const {
  const ::estafette::ci::manifest::v1::EstafetteReleaseTrigger* p = release_;
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteTrigger.release)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::manifest::v1::EstafetteReleaseTrigger*>(
      &::estafette::ci::manifest::v1::_EstafetteReleaseTrigger_default_instance_);
}
inline ::estafette::ci::manifest::v1::EstafetteReleaseTrigger* EstafetteTrigger::release_release() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteTrigger.release)
  
  ::estafette::ci::manifest::v1::EstafetteReleaseTrigger* temp = release_;
  release_ = nullptr;
  return temp;
}
inline ::estafette::ci::manifest::v1::EstafetteReleaseTrigger* EstafetteTrigger::mutable_release() {
  
  if (release_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteReleaseTrigger>(GetArenaNoVirtual());
    release_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteTrigger.release)
  return release_;
}
inline void EstafetteTrigger::set_allocated_release(::estafette::ci::manifest::v1::EstafetteReleaseTrigger* release) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_);
  }
  if (release) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      release = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release, submessage_arena);
    }
    
  } else {
    
  }
  release_ = release;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteTrigger.release)
}

// .estafette.ci.manifest.v1.EstafetteGitTrigger git = 3;
inline bool EstafetteTrigger::has_git() const {
  return this != internal_default_instance() && git_ != nullptr;
}
inline const ::estafette::ci::manifest::v1::EstafetteGitTrigger& EstafetteTrigger::git() const {
  const ::estafette::ci::manifest::v1::EstafetteGitTrigger* p = git_;
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteTrigger.git)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::manifest::v1::EstafetteGitTrigger*>(
      &::estafette::ci::manifest::v1::_EstafetteGitTrigger_default_instance_);
}
inline ::estafette::ci::manifest::v1::EstafetteGitTrigger* EstafetteTrigger::release_git() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteTrigger.git)
  
  ::estafette::ci::manifest::v1::EstafetteGitTrigger* temp = git_;
  git_ = nullptr;
  return temp;
}
inline ::estafette::ci::manifest::v1::EstafetteGitTrigger* EstafetteTrigger::mutable_git() {
  
  if (git_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteGitTrigger>(GetArenaNoVirtual());
    git_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteTrigger.git)
  return git_;
}
inline void EstafetteTrigger::set_allocated_git(::estafette::ci::manifest::v1::EstafetteGitTrigger* git) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(git_);
  }
  if (git) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      git = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, git, submessage_arena);
    }
    
  } else {
    
  }
  git_ = git;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteTrigger.git)
}

// .estafette.ci.manifest.v1.EstafetteDockerTrigger docker = 4;
inline bool EstafetteTrigger::has_docker() const {
  return this != internal_default_instance() && docker_ != nullptr;
}
inline const ::estafette::ci::manifest::v1::EstafetteDockerTrigger& EstafetteTrigger::docker() const {
  const ::estafette::ci::manifest::v1::EstafetteDockerTrigger* p = docker_;
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteTrigger.docker)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::manifest::v1::EstafetteDockerTrigger*>(
      &::estafette::ci::manifest::v1::_EstafetteDockerTrigger_default_instance_);
}
inline ::estafette::ci::manifest::v1::EstafetteDockerTrigger* EstafetteTrigger::release_docker() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteTrigger.docker)
  
  ::estafette::ci::manifest::v1::EstafetteDockerTrigger* temp = docker_;
  docker_ = nullptr;
  return temp;
}
inline ::estafette::ci::manifest::v1::EstafetteDockerTrigger* EstafetteTrigger::mutable_docker() {
  
  if (docker_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteDockerTrigger>(GetArenaNoVirtual());
    docker_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteTrigger.docker)
  return docker_;
}
inline void EstafetteTrigger::set_allocated_docker(::estafette::ci::manifest::v1::EstafetteDockerTrigger* docker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(docker_);
  }
  if (docker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      docker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, docker, submessage_arena);
    }
    
  } else {
    
  }
  docker_ = docker;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteTrigger.docker)
}

// .estafette.ci.manifest.v1.EstafetteCronTrigger cron = 5;
inline bool EstafetteTrigger::has_cron() const {
  return this != internal_default_instance() && cron_ != nullptr;
}
inline const ::estafette::ci::manifest::v1::EstafetteCronTrigger& EstafetteTrigger::cron() const {
  const ::estafette::ci::manifest::v1::EstafetteCronTrigger* p = cron_;
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteTrigger.cron)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::manifest::v1::EstafetteCronTrigger*>(
      &::estafette::ci::manifest::v1::_EstafetteCronTrigger_default_instance_);
}
inline ::estafette::ci::manifest::v1::EstafetteCronTrigger* EstafetteTrigger::release_cron() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteTrigger.cron)
  
  ::estafette::ci::manifest::v1::EstafetteCronTrigger* temp = cron_;
  cron_ = nullptr;
  return temp;
}
inline ::estafette::ci::manifest::v1::EstafetteCronTrigger* EstafetteTrigger::mutable_cron() {
  
  if (cron_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteCronTrigger>(GetArenaNoVirtual());
    cron_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteTrigger.cron)
  return cron_;
}
inline void EstafetteTrigger::set_allocated_cron(::estafette::ci::manifest::v1::EstafetteCronTrigger* cron) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cron_);
  }
  if (cron) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cron = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cron, submessage_arena);
    }
    
  } else {
    
  }
  cron_ = cron;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteTrigger.cron)
}

// .estafette.ci.manifest.v1.EstafettePubSubTrigger pub_sub = 6;
inline bool EstafetteTrigger::has_pub_sub() const {
  return this != internal_default_instance() && pub_sub_ != nullptr;
}
inline const ::estafette::ci::manifest::v1::EstafettePubSubTrigger& EstafetteTrigger::pub_sub() const {
  const ::estafette::ci::manifest::v1::EstafettePubSubTrigger* p = pub_sub_;
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteTrigger.pub_sub)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::manifest::v1::EstafettePubSubTrigger*>(
      &::estafette::ci::manifest::v1::_EstafettePubSubTrigger_default_instance_);
}
inline ::estafette::ci::manifest::v1::EstafettePubSubTrigger* EstafetteTrigger::release_pub_sub() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteTrigger.pub_sub)
  
  ::estafette::ci::manifest::v1::EstafettePubSubTrigger* temp = pub_sub_;
  pub_sub_ = nullptr;
  return temp;
}
inline ::estafette::ci::manifest::v1::EstafettePubSubTrigger* EstafetteTrigger::mutable_pub_sub() {
  
  if (pub_sub_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::manifest::v1::EstafettePubSubTrigger>(GetArenaNoVirtual());
    pub_sub_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteTrigger.pub_sub)
  return pub_sub_;
}
inline void EstafetteTrigger::set_allocated_pub_sub(::estafette::ci::manifest::v1::EstafettePubSubTrigger* pub_sub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_sub_);
  }
  if (pub_sub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pub_sub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub_sub, submessage_arena);
    }
    
  } else {
    
  }
  pub_sub_ = pub_sub;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteTrigger.pub_sub)
}

// .estafette.ci.manifest.v1.EstafetteTriggerBuildAction build_action = 7;
inline bool EstafetteTrigger::has_build_action() const {
  return this != internal_default_instance() && build_action_ != nullptr;
}
inline const ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction& EstafetteTrigger::build_action() const {
  const ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction* p = build_action_;
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteTrigger.build_action)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction*>(
      &::estafette::ci::manifest::v1::_EstafetteTriggerBuildAction_default_instance_);
}
inline ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction* EstafetteTrigger::release_build_action() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteTrigger.build_action)
  
  ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction* temp = build_action_;
  build_action_ = nullptr;
  return temp;
}
inline ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction* EstafetteTrigger::mutable_build_action() {
  
  if (build_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteTriggerBuildAction>(GetArenaNoVirtual());
    build_action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteTrigger.build_action)
  return build_action_;
}
inline void EstafetteTrigger::set_allocated_build_action(::estafette::ci::manifest::v1::EstafetteTriggerBuildAction* build_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_action_);
  }
  if (build_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      build_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build_action, submessage_arena);
    }
    
  } else {
    
  }
  build_action_ = build_action;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteTrigger.build_action)
}

// .estafette.ci.manifest.v1.EstafetteTriggerReleaseAction release_action = 8;
inline bool EstafetteTrigger::has_release_action() const {
  return this != internal_default_instance() && release_action_ != nullptr;
}
inline const ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction& EstafetteTrigger::release_action() const {
  const ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction* p = release_action_;
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteTrigger.release_action)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction*>(
      &::estafette::ci::manifest::v1::_EstafetteTriggerReleaseAction_default_instance_);
}
inline ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction* EstafetteTrigger::release_release_action() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteTrigger.release_action)
  
  ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction* temp = release_action_;
  release_action_ = nullptr;
  return temp;
}
inline ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction* EstafetteTrigger::mutable_release_action() {
  
  if (release_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction>(GetArenaNoVirtual());
    release_action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteTrigger.release_action)
  return release_action_;
}
inline void EstafetteTrigger::set_allocated_release_action(::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction* release_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_action_);
  }
  if (release_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      release_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release_action, submessage_arena);
    }
    
  } else {
    
  }
  release_action_ = release_action;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteTrigger.release_action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto
