// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/manifest/v1/estafette_version.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "estafette/ci/manifest/v1/estafette_custom_version.pb.h"
#include "estafette/ci/manifest/v1/estafette_semver_version.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto;
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {
class EstafetteVersion;
class EstafetteVersionDefaultTypeInternal;
extern EstafetteVersionDefaultTypeInternal _EstafetteVersion_default_instance_;
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> ::estafette::ci::manifest::v1::EstafetteVersion* Arena::CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteVersion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {

// ===================================================================

class EstafetteVersion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:estafette.ci.manifest.v1.EstafetteVersion) */ {
 public:
  EstafetteVersion();
  virtual ~EstafetteVersion();

  EstafetteVersion(const EstafetteVersion& from);
  EstafetteVersion(EstafetteVersion&& from) noexcept
    : EstafetteVersion() {
    *this = ::std::move(from);
  }

  inline EstafetteVersion& operator=(const EstafetteVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstafetteVersion& operator=(EstafetteVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstafetteVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstafetteVersion* internal_default_instance() {
    return reinterpret_cast<const EstafetteVersion*>(
               &_EstafetteVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EstafetteVersion* other);
  friend void swap(EstafetteVersion& a, EstafetteVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EstafetteVersion* New() const final {
    return CreateMaybeMessage<EstafetteVersion>(nullptr);
  }

  EstafetteVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstafetteVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstafetteVersion& from);
  void MergeFrom(const EstafetteVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstafetteVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "estafette.ci.manifest.v1.EstafetteVersion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto);
    return ::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .estafette.ci.manifest.v1.EstafetteSemverVersion semver = 1;
  bool has_semver() const;
  void clear_semver();
  static const int kSemverFieldNumber = 1;
  const ::estafette::ci::manifest::v1::EstafetteSemverVersion& semver() const;
  ::estafette::ci::manifest::v1::EstafetteSemverVersion* release_semver();
  ::estafette::ci::manifest::v1::EstafetteSemverVersion* mutable_semver();
  void set_allocated_semver(::estafette::ci::manifest::v1::EstafetteSemverVersion* semver);

  // .estafette.ci.manifest.v1.EstafetteCustomVersion custom = 2;
  bool has_custom() const;
  void clear_custom();
  static const int kCustomFieldNumber = 2;
  const ::estafette::ci::manifest::v1::EstafetteCustomVersion& custom() const;
  ::estafette::ci::manifest::v1::EstafetteCustomVersion* release_custom();
  ::estafette::ci::manifest::v1::EstafetteCustomVersion* mutable_custom();
  void set_allocated_custom(::estafette::ci::manifest::v1::EstafetteCustomVersion* custom);

  // @@protoc_insertion_point(class_scope:estafette.ci.manifest.v1.EstafetteVersion)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::estafette::ci::manifest::v1::EstafetteSemverVersion* semver_;
  ::estafette::ci::manifest::v1::EstafetteCustomVersion* custom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EstafetteVersion

// .estafette.ci.manifest.v1.EstafetteSemverVersion semver = 1;
inline bool EstafetteVersion::has_semver() const {
  return this != internal_default_instance() && semver_ != nullptr;
}
inline const ::estafette::ci::manifest::v1::EstafetteSemverVersion& EstafetteVersion::semver() const {
  const ::estafette::ci::manifest::v1::EstafetteSemverVersion* p = semver_;
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteVersion.semver)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::manifest::v1::EstafetteSemverVersion*>(
      &::estafette::ci::manifest::v1::_EstafetteSemverVersion_default_instance_);
}
inline ::estafette::ci::manifest::v1::EstafetteSemverVersion* EstafetteVersion::release_semver() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteVersion.semver)
  
  ::estafette::ci::manifest::v1::EstafetteSemverVersion* temp = semver_;
  semver_ = nullptr;
  return temp;
}
inline ::estafette::ci::manifest::v1::EstafetteSemverVersion* EstafetteVersion::mutable_semver() {
  
  if (semver_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteSemverVersion>(GetArenaNoVirtual());
    semver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteVersion.semver)
  return semver_;
}
inline void EstafetteVersion::set_allocated_semver(::estafette::ci::manifest::v1::EstafetteSemverVersion* semver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(semver_);
  }
  if (semver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      semver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, semver, submessage_arena);
    }
    
  } else {
    
  }
  semver_ = semver;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteVersion.semver)
}

// .estafette.ci.manifest.v1.EstafetteCustomVersion custom = 2;
inline bool EstafetteVersion::has_custom() const {
  return this != internal_default_instance() && custom_ != nullptr;
}
inline const ::estafette::ci::manifest::v1::EstafetteCustomVersion& EstafetteVersion::custom() const {
  const ::estafette::ci::manifest::v1::EstafetteCustomVersion* p = custom_;
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteVersion.custom)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::manifest::v1::EstafetteCustomVersion*>(
      &::estafette::ci::manifest::v1::_EstafetteCustomVersion_default_instance_);
}
inline ::estafette::ci::manifest::v1::EstafetteCustomVersion* EstafetteVersion::release_custom() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteVersion.custom)
  
  ::estafette::ci::manifest::v1::EstafetteCustomVersion* temp = custom_;
  custom_ = nullptr;
  return temp;
}
inline ::estafette::ci::manifest::v1::EstafetteCustomVersion* EstafetteVersion::mutable_custom() {
  
  if (custom_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteCustomVersion>(GetArenaNoVirtual());
    custom_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteVersion.custom)
  return custom_;
}
inline void EstafetteVersion::set_allocated_custom(::estafette::ci::manifest::v1::EstafetteCustomVersion* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_);
  }
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    
  } else {
    
  }
  custom_ = custom;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteVersion.custom)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto
