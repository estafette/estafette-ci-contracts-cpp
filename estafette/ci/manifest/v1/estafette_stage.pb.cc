// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/manifest/v1/estafette_stage.proto

#include "estafette/ci/manifest/v1/estafette_stage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EstafetteStage_CustomPropertiesEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteStage_EnvVarsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {
class EstafetteStage_EnvVarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstafetteStage_EnvVarsEntry_DoNotUse> _instance;
} _EstafetteStage_EnvVarsEntry_DoNotUse_default_instance_;
class EstafetteStage_CustomPropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstafetteStage_CustomPropertiesEntry_DoNotUse> _instance;
} _EstafetteStage_CustomPropertiesEntry_DoNotUse_default_instance_;
class EstafetteStageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstafetteStage> _instance;
} _EstafetteStage_default_instance_;
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
static void InitDefaultsscc_info_EstafetteStage_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::estafette::ci::manifest::v1::_EstafetteStage_default_instance_;
    new (ptr) ::estafette::ci::manifest::v1::EstafetteStage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::estafette::ci::manifest::v1::EstafetteStage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EstafetteStage_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_EstafetteStage_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto}, {
      &scc_info_EstafetteStage_EnvVarsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto.base,
      &scc_info_EstafetteStage_CustomPropertiesEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto.base,}};

static void InitDefaultsscc_info_EstafetteStage_CustomPropertiesEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::estafette::ci::manifest::v1::_EstafetteStage_CustomPropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::estafette::ci::manifest::v1::EstafetteStage_CustomPropertiesEntry_DoNotUse();
  }
  ::estafette::ci::manifest::v1::EstafetteStage_CustomPropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EstafetteStage_CustomPropertiesEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EstafetteStage_CustomPropertiesEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_EstafetteStage_EnvVarsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::estafette::ci::manifest::v1::_EstafetteStage_EnvVarsEntry_DoNotUse_default_instance_;
    new (ptr) ::estafette::ci::manifest::v1::EstafetteStage_EnvVarsEntry_DoNotUse();
  }
  ::estafette::ci::manifest::v1::EstafetteStage_EnvVarsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteStage_EnvVarsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EstafetteStage_EnvVarsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage_EnvVarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage_EnvVarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage_EnvVarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage_EnvVarsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage_CustomPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage_CustomPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage_CustomPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage_CustomPropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage, name_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage, container_image_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage, shell_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage, working_directory_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage, commands_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage, when_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage, env_vars_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage, auto_injected_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage, retries_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteStage, custom_properties_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::estafette::ci::manifest::v1::EstafetteStage_EnvVarsEntry_DoNotUse)},
  { 9, 16, sizeof(::estafette::ci::manifest::v1::EstafetteStage_CustomPropertiesEntry_DoNotUse)},
  { 18, -1, sizeof(::estafette::ci::manifest::v1::EstafetteStage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::estafette::ci::manifest::v1::_EstafetteStage_EnvVarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::estafette::ci::manifest::v1::_EstafetteStage_CustomPropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::estafette::ci::manifest::v1::_EstafetteStage_default_instance_),
};

const char descriptor_table_protodef_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto[] =
  "\n.estafette/ci/manifest/v1/estafette_sta"
  "ge.proto\022\030estafette.ci.manifest.v1\032\031goog"
  "le/protobuf/any.proto\"\314\003\n\016EstafetteStage"
  "\022\014\n\004name\030\001 \001(\t\022\027\n\017container_image\030\002 \001(\t\022"
  "\r\n\005shell\030\003 \001(\t\022\031\n\021working_directory\030\004 \001("
  "\t\022\020\n\010commands\030\005 \003(\t\022\014\n\004when\030\006 \001(\t\022G\n\010env"
  "_vars\030\007 \003(\01325.estafette.ci.manifest.v1.E"
  "stafetteStage.EnvVarsEntry\022\025\n\rauto_injec"
  "ted\030\010 \001(\010\022\017\n\007retries\030\t \001(\003\022Y\n\021custom_pro"
  "perties\030\n \003(\0132>.estafette.ci.manifest.v1"
  ".EstafetteStage.CustomPropertiesEntry\032.\n"
  "\014EnvVarsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t:\0028\001\032M\n\025CustomPropertiesEntry\022\013\n\003key\030\001 "
  "\001(\t\022#\n\005value\030\002 \001(\0132\024.google.protobuf.Any"
  ":\0028\001Bx\n\034com.estafette.ci.manifest.v1P\001Z;"
  "github.com/estafette/estafette-ci-protos"
  "-golang/manifest_v1\252\002\030Estafette.Ci.Manif"
  "est.V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto_sccs[3] = {
  &scc_info_EstafetteStage_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto.base,
  &scc_info_EstafetteStage_CustomPropertiesEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto.base,
  &scc_info_EstafetteStage_EnvVarsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto_once;
static bool descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto = {
  &descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto_initialized, descriptor_table_protodef_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto, "estafette/ci/manifest/v1/estafette_stage.proto", 694,
  &descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto_once, descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto_sccs, descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto::offsets,
  file_level_metadata_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto, 3, file_level_enum_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto, file_level_service_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto), true);
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {

// ===================================================================

EstafetteStage_EnvVarsEntry_DoNotUse::EstafetteStage_EnvVarsEntry_DoNotUse() {}
EstafetteStage_EnvVarsEntry_DoNotUse::EstafetteStage_EnvVarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EstafetteStage_EnvVarsEntry_DoNotUse::MergeFrom(const EstafetteStage_EnvVarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EstafetteStage_EnvVarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void EstafetteStage_EnvVarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

EstafetteStage_CustomPropertiesEntry_DoNotUse::EstafetteStage_CustomPropertiesEntry_DoNotUse() {}
EstafetteStage_CustomPropertiesEntry_DoNotUse::EstafetteStage_CustomPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EstafetteStage_CustomPropertiesEntry_DoNotUse::MergeFrom(const EstafetteStage_CustomPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EstafetteStage_CustomPropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void EstafetteStage_CustomPropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void EstafetteStage::InitAsDefaultInstance() {
}
class EstafetteStage::HasBitSetters {
 public:
};

void EstafetteStage::clear_custom_properties() {
  custom_properties_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EstafetteStage::kNameFieldNumber;
const int EstafetteStage::kContainerImageFieldNumber;
const int EstafetteStage::kShellFieldNumber;
const int EstafetteStage::kWorkingDirectoryFieldNumber;
const int EstafetteStage::kCommandsFieldNumber;
const int EstafetteStage::kWhenFieldNumber;
const int EstafetteStage::kEnvVarsFieldNumber;
const int EstafetteStage::kAutoInjectedFieldNumber;
const int EstafetteStage::kRetriesFieldNumber;
const int EstafetteStage::kCustomPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EstafetteStage::EstafetteStage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:estafette.ci.manifest.v1.EstafetteStage)
}
EstafetteStage::EstafetteStage(const EstafetteStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  env_vars_.MergeFrom(from.env_vars_);
  custom_properties_.MergeFrom(from.custom_properties_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  container_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.container_image().size() > 0) {
    container_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.container_image_);
  }
  shell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.shell().size() > 0) {
    shell_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shell_);
  }
  working_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.working_directory().size() > 0) {
    working_directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.working_directory_);
  }
  when_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.when().size() > 0) {
    when_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.when_);
  }
  ::memcpy(&retries_, &from.retries_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_injected_) -
    reinterpret_cast<char*>(&retries_)) + sizeof(auto_injected_));
  // @@protoc_insertion_point(copy_constructor:estafette.ci.manifest.v1.EstafetteStage)
}

void EstafetteStage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstafetteStage_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  container_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  working_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  when_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&retries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_injected_) -
      reinterpret_cast<char*>(&retries_)) + sizeof(auto_injected_));
}

EstafetteStage::~EstafetteStage() {
  // @@protoc_insertion_point(destructor:estafette.ci.manifest.v1.EstafetteStage)
  SharedDtor();
}

void EstafetteStage::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  container_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  working_directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  when_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EstafetteStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstafetteStage& EstafetteStage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstafetteStage_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto.base);
  return *internal_default_instance();
}


void EstafetteStage::Clear() {
// @@protoc_insertion_point(message_clear_start:estafette.ci.manifest.v1.EstafetteStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  env_vars_.Clear();
  custom_properties_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  container_image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shell_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  working_directory_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  when_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&retries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_injected_) -
      reinterpret_cast<char*>(&retries_)) + sizeof(auto_injected_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EstafetteStage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "estafette.ci.manifest.v1.EstafetteStage.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string container_image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_container_image(), ptr, ctx, "estafette.ci.manifest.v1.EstafetteStage.container_image");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_shell(), ptr, ctx, "estafette.ci.manifest.v1.EstafetteStage.shell");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string working_directory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_working_directory(), ptr, ctx, "estafette.ci.manifest.v1.EstafetteStage.working_directory");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string commands = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_commands(), ptr, ctx, "estafette.ci.manifest.v1.EstafetteStage.commands");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // string when = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_when(), ptr, ctx, "estafette.ci.manifest.v1.EstafetteStage.when");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> env_vars = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&env_vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // bool auto_injected = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          auto_injected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 retries = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> custom_properties = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&custom_properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EstafetteStage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:estafette.ci.manifest.v1.EstafetteStage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteStage.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string container_image = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_container_image()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->container_image().data(), static_cast<int>(this->container_image().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteStage.container_image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string shell = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_shell()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->shell().data(), static_cast<int>(this->shell().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteStage.shell"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string working_directory = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_working_directory()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->working_directory().data(), static_cast<int>(this->working_directory().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteStage.working_directory"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string commands = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_commands()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->commands(this->commands_size() - 1).data(),
            static_cast<int>(this->commands(this->commands_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteStage.commands"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string when = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_when()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->when().data(), static_cast<int>(this->when().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteStage.when"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> env_vars = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          EstafetteStage_EnvVarsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              EstafetteStage_EnvVarsEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&env_vars_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteStage.EnvVarsEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteStage.EnvVarsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool auto_injected = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_injected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 retries = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.protobuf.Any> custom_properties = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          EstafetteStage_CustomPropertiesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              EstafetteStage_CustomPropertiesEntry_DoNotUse,
              std::string, PROTOBUF_NAMESPACE_ID::Any,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any > > parser(&custom_properties_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteStage.CustomPropertiesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:estafette.ci.manifest.v1.EstafetteStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:estafette.ci.manifest.v1.EstafetteStage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EstafetteStage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:estafette.ci.manifest.v1.EstafetteStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteStage.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string container_image = 2;
  if (this->container_image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->container_image().data(), static_cast<int>(this->container_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteStage.container_image");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->container_image(), output);
  }

  // string shell = 3;
  if (this->shell().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->shell().data(), static_cast<int>(this->shell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteStage.shell");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shell(), output);
  }

  // string working_directory = 4;
  if (this->working_directory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->working_directory().data(), static_cast<int>(this->working_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteStage.working_directory");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->working_directory(), output);
  }

  // repeated string commands = 5;
  for (int i = 0, n = this->commands_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->commands(i).data(), static_cast<int>(this->commands(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteStage.commands");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->commands(i), output);
  }

  // string when = 6;
  if (this->when().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->when().data(), static_cast<int>(this->when().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteStage.when");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->when(), output);
  }

  // map<string, string> env_vars = 7;
  if (!this->env_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteStage.EnvVarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteStage.EnvVarsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->env_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->env_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->env_vars().begin();
          it != this->env_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        EstafetteStage_EnvVarsEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(7, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->env_vars().begin();
          it != this->env_vars().end(); ++it) {
        EstafetteStage_EnvVarsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(7, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool auto_injected = 8;
  if (this->auto_injected() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->auto_injected(), output);
  }

  // int64 retries = 9;
  if (this->retries() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->retries(), output);
  }

  // map<string, .google.protobuf.Any> custom_properties = 10;
  if (!this->custom_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteStage.CustomPropertiesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->custom_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->custom_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->custom_properties().begin();
          it != this->custom_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        EstafetteStage_CustomPropertiesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(10, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->custom_properties().begin();
          it != this->custom_properties().end(); ++it) {
        EstafetteStage_CustomPropertiesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(10, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:estafette.ci.manifest.v1.EstafetteStage)
}

::PROTOBUF_NAMESPACE_ID::uint8* EstafetteStage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:estafette.ci.manifest.v1.EstafetteStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteStage.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string container_image = 2;
  if (this->container_image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->container_image().data(), static_cast<int>(this->container_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteStage.container_image");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->container_image(), target);
  }

  // string shell = 3;
  if (this->shell().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->shell().data(), static_cast<int>(this->shell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteStage.shell");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->shell(), target);
  }

  // string working_directory = 4;
  if (this->working_directory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->working_directory().data(), static_cast<int>(this->working_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteStage.working_directory");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->working_directory(), target);
  }

  // repeated string commands = 5;
  for (int i = 0, n = this->commands_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->commands(i).data(), static_cast<int>(this->commands(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteStage.commands");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->commands(i), target);
  }

  // string when = 6;
  if (this->when().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->when().data(), static_cast<int>(this->when().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteStage.when");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->when(), target);
  }

  // map<string, string> env_vars = 7;
  if (!this->env_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteStage.EnvVarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteStage.EnvVarsEntry.value");
      }
    };

    if (false &&
        this->env_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->env_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->env_vars().begin();
          it != this->env_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        EstafetteStage_EnvVarsEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(7, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->env_vars().begin();
          it != this->env_vars().end(); ++it) {
        EstafetteStage_EnvVarsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(7, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool auto_injected = 8;
  if (this->auto_injected() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->auto_injected(), target);
  }

  // int64 retries = 9;
  if (this->retries() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->retries(), target);
  }

  // map<string, .google.protobuf.Any> custom_properties = 10;
  if (!this->custom_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteStage.CustomPropertiesEntry.key");
      }
    };

    if (false &&
        this->custom_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->custom_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->custom_properties().begin();
          it != this->custom_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        EstafetteStage_CustomPropertiesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(10, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->custom_properties().begin();
          it != this->custom_properties().end(); ++it) {
        EstafetteStage_CustomPropertiesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(10, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:estafette.ci.manifest.v1.EstafetteStage)
  return target;
}

size_t EstafetteStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:estafette.ci.manifest.v1.EstafetteStage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string commands = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->commands_size());
  for (int i = 0, n = this->commands_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->commands(i));
  }

  // map<string, string> env_vars = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->env_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->env_vars().begin();
      it != this->env_vars().end(); ++it) {
    EstafetteStage_EnvVarsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // map<string, .google.protobuf.Any> custom_properties = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->custom_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->custom_properties().begin();
      it != this->custom_properties().end(); ++it) {
    EstafetteStage_CustomPropertiesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string container_image = 2;
  if (this->container_image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->container_image());
  }

  // string shell = 3;
  if (this->shell().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->shell());
  }

  // string working_directory = 4;
  if (this->working_directory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->working_directory());
  }

  // string when = 6;
  if (this->when().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->when());
  }

  // int64 retries = 9;
  if (this->retries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->retries());
  }

  // bool auto_injected = 8;
  if (this->auto_injected() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstafetteStage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:estafette.ci.manifest.v1.EstafetteStage)
  GOOGLE_DCHECK_NE(&from, this);
  const EstafetteStage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstafetteStage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:estafette.ci.manifest.v1.EstafetteStage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:estafette.ci.manifest.v1.EstafetteStage)
    MergeFrom(*source);
  }
}

void EstafetteStage::MergeFrom(const EstafetteStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:estafette.ci.manifest.v1.EstafetteStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  env_vars_.MergeFrom(from.env_vars_);
  custom_properties_.MergeFrom(from.custom_properties_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.container_image().size() > 0) {

    container_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.container_image_);
  }
  if (from.shell().size() > 0) {

    shell_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shell_);
  }
  if (from.working_directory().size() > 0) {

    working_directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.working_directory_);
  }
  if (from.when().size() > 0) {

    when_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.when_);
  }
  if (from.retries() != 0) {
    set_retries(from.retries());
  }
  if (from.auto_injected() != 0) {
    set_auto_injected(from.auto_injected());
  }
}

void EstafetteStage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:estafette.ci.manifest.v1.EstafetteStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstafetteStage::CopyFrom(const EstafetteStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:estafette.ci.manifest.v1.EstafetteStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstafetteStage::IsInitialized() const {
  return true;
}

void EstafetteStage::Swap(EstafetteStage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EstafetteStage::InternalSwap(EstafetteStage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  commands_.InternalSwap(CastToBase(&other->commands_));
  env_vars_.Swap(&other->env_vars_);
  custom_properties_.Swap(&other->custom_properties_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  container_image_.Swap(&other->container_image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shell_.Swap(&other->shell_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  working_directory_.Swap(&other->working_directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  when_.Swap(&other->when_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(retries_, other->retries_);
  swap(auto_injected_, other->auto_injected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstafetteStage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::estafette::ci::manifest::v1::EstafetteStage_EnvVarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::estafette::ci::manifest::v1::EstafetteStage_EnvVarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::estafette::ci::manifest::v1::EstafetteStage_EnvVarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::estafette::ci::manifest::v1::EstafetteStage_CustomPropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::estafette::ci::manifest::v1::EstafetteStage_CustomPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::estafette::ci::manifest::v1::EstafetteStage_CustomPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::estafette::ci::manifest::v1::EstafetteStage* Arena::CreateMaybeMessage< ::estafette::ci::manifest::v1::EstafetteStage >(Arena* arena) {
  return Arena::CreateInternal< ::estafette::ci::manifest::v1::EstafetteStage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
