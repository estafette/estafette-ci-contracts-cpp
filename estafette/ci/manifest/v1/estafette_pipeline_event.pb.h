// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/manifest/v1/estafette_pipeline_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto;
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {
class EstafettePipelineEvent;
class EstafettePipelineEventDefaultTypeInternal;
extern EstafettePipelineEventDefaultTypeInternal _EstafettePipelineEvent_default_instance_;
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> ::estafette::ci::manifest::v1::EstafettePipelineEvent* Arena::CreateMaybeMessage<::estafette::ci::manifest::v1::EstafettePipelineEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {

// ===================================================================

class EstafettePipelineEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:estafette.ci.manifest.v1.EstafettePipelineEvent) */ {
 public:
  EstafettePipelineEvent();
  virtual ~EstafettePipelineEvent();

  EstafettePipelineEvent(const EstafettePipelineEvent& from);
  EstafettePipelineEvent(EstafettePipelineEvent&& from) noexcept
    : EstafettePipelineEvent() {
    *this = ::std::move(from);
  }

  inline EstafettePipelineEvent& operator=(const EstafettePipelineEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstafettePipelineEvent& operator=(EstafettePipelineEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstafettePipelineEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstafettePipelineEvent* internal_default_instance() {
    return reinterpret_cast<const EstafettePipelineEvent*>(
               &_EstafettePipelineEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EstafettePipelineEvent* other);
  friend void swap(EstafettePipelineEvent& a, EstafettePipelineEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EstafettePipelineEvent* New() const final {
    return CreateMaybeMessage<EstafettePipelineEvent>(nullptr);
  }

  EstafettePipelineEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstafettePipelineEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstafettePipelineEvent& from);
  void MergeFrom(const EstafettePipelineEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstafettePipelineEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "estafette.ci.manifest.v1.EstafettePipelineEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto);
    return ::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string build_version = 1;
  void clear_build_version();
  static const int kBuildVersionFieldNumber = 1;
  const std::string& build_version() const;
  void set_build_version(const std::string& value);
  void set_build_version(std::string&& value);
  void set_build_version(const char* value);
  void set_build_version(const char* value, size_t size);
  std::string* mutable_build_version();
  std::string* release_build_version();
  void set_allocated_build_version(std::string* build_version);

  // string repo_source = 2;
  void clear_repo_source();
  static const int kRepoSourceFieldNumber = 2;
  const std::string& repo_source() const;
  void set_repo_source(const std::string& value);
  void set_repo_source(std::string&& value);
  void set_repo_source(const char* value);
  void set_repo_source(const char* value, size_t size);
  std::string* mutable_repo_source();
  std::string* release_repo_source();
  void set_allocated_repo_source(std::string* repo_source);

  // string repo_owner = 3;
  void clear_repo_owner();
  static const int kRepoOwnerFieldNumber = 3;
  const std::string& repo_owner() const;
  void set_repo_owner(const std::string& value);
  void set_repo_owner(std::string&& value);
  void set_repo_owner(const char* value);
  void set_repo_owner(const char* value, size_t size);
  std::string* mutable_repo_owner();
  std::string* release_repo_owner();
  void set_allocated_repo_owner(std::string* repo_owner);

  // string repo_name = 4;
  void clear_repo_name();
  static const int kRepoNameFieldNumber = 4;
  const std::string& repo_name() const;
  void set_repo_name(const std::string& value);
  void set_repo_name(std::string&& value);
  void set_repo_name(const char* value);
  void set_repo_name(const char* value, size_t size);
  std::string* mutable_repo_name();
  std::string* release_repo_name();
  void set_allocated_repo_name(std::string* repo_name);

  // string repo_branch = 5;
  void clear_repo_branch();
  static const int kRepoBranchFieldNumber = 5;
  const std::string& repo_branch() const;
  void set_repo_branch(const std::string& value);
  void set_repo_branch(std::string&& value);
  void set_repo_branch(const char* value);
  void set_repo_branch(const char* value, size_t size);
  std::string* mutable_repo_branch();
  std::string* release_repo_branch();
  void set_allocated_repo_branch(std::string* repo_branch);

  // string status = 6;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);

  // string event = 7;
  void clear_event();
  static const int kEventFieldNumber = 7;
  const std::string& event() const;
  void set_event(const std::string& value);
  void set_event(std::string&& value);
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  std::string* mutable_event();
  std::string* release_event();
  void set_allocated_event(std::string* event);

  // @@protoc_insertion_point(class_scope:estafette.ci.manifest.v1.EstafettePipelineEvent)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_branch_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EstafettePipelineEvent

// string build_version = 1;
inline void EstafettePipelineEvent::clear_build_version() {
  build_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EstafettePipelineEvent::build_version() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafettePipelineEvent.build_version)
  return build_version_.GetNoArena();
}
inline void EstafettePipelineEvent::set_build_version(const std::string& value) {
  
  build_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafettePipelineEvent.build_version)
}
inline void EstafettePipelineEvent::set_build_version(std::string&& value) {
  
  build_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.manifest.v1.EstafettePipelineEvent.build_version)
}
inline void EstafettePipelineEvent::set_build_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.manifest.v1.EstafettePipelineEvent.build_version)
}
inline void EstafettePipelineEvent::set_build_version(const char* value, size_t size) {
  
  build_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.manifest.v1.EstafettePipelineEvent.build_version)
}
inline std::string* EstafettePipelineEvent::mutable_build_version() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafettePipelineEvent.build_version)
  return build_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EstafettePipelineEvent::release_build_version() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafettePipelineEvent.build_version)
  
  return build_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EstafettePipelineEvent::set_allocated_build_version(std::string* build_version) {
  if (build_version != nullptr) {
    
  } else {
    
  }
  build_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_version);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafettePipelineEvent.build_version)
}

// string repo_source = 2;
inline void EstafettePipelineEvent::clear_repo_source() {
  repo_source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EstafettePipelineEvent::repo_source() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_source)
  return repo_source_.GetNoArena();
}
inline void EstafettePipelineEvent::set_repo_source(const std::string& value) {
  
  repo_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_source)
}
inline void EstafettePipelineEvent::set_repo_source(std::string&& value) {
  
  repo_source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_source)
}
inline void EstafettePipelineEvent::set_repo_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_source)
}
inline void EstafettePipelineEvent::set_repo_source(const char* value, size_t size) {
  
  repo_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_source)
}
inline std::string* EstafettePipelineEvent::mutable_repo_source() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_source)
  return repo_source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EstafettePipelineEvent::release_repo_source() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_source)
  
  return repo_source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EstafettePipelineEvent::set_allocated_repo_source(std::string* repo_source) {
  if (repo_source != nullptr) {
    
  } else {
    
  }
  repo_source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repo_source);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_source)
}

// string repo_owner = 3;
inline void EstafettePipelineEvent::clear_repo_owner() {
  repo_owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EstafettePipelineEvent::repo_owner() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_owner)
  return repo_owner_.GetNoArena();
}
inline void EstafettePipelineEvent::set_repo_owner(const std::string& value) {
  
  repo_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_owner)
}
inline void EstafettePipelineEvent::set_repo_owner(std::string&& value) {
  
  repo_owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_owner)
}
inline void EstafettePipelineEvent::set_repo_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_owner)
}
inline void EstafettePipelineEvent::set_repo_owner(const char* value, size_t size) {
  
  repo_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_owner)
}
inline std::string* EstafettePipelineEvent::mutable_repo_owner() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_owner)
  return repo_owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EstafettePipelineEvent::release_repo_owner() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_owner)
  
  return repo_owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EstafettePipelineEvent::set_allocated_repo_owner(std::string* repo_owner) {
  if (repo_owner != nullptr) {
    
  } else {
    
  }
  repo_owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repo_owner);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_owner)
}

// string repo_name = 4;
inline void EstafettePipelineEvent::clear_repo_name() {
  repo_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EstafettePipelineEvent::repo_name() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_name)
  return repo_name_.GetNoArena();
}
inline void EstafettePipelineEvent::set_repo_name(const std::string& value) {
  
  repo_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_name)
}
inline void EstafettePipelineEvent::set_repo_name(std::string&& value) {
  
  repo_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_name)
}
inline void EstafettePipelineEvent::set_repo_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_name)
}
inline void EstafettePipelineEvent::set_repo_name(const char* value, size_t size) {
  
  repo_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_name)
}
inline std::string* EstafettePipelineEvent::mutable_repo_name() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_name)
  return repo_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EstafettePipelineEvent::release_repo_name() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_name)
  
  return repo_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EstafettePipelineEvent::set_allocated_repo_name(std::string* repo_name) {
  if (repo_name != nullptr) {
    
  } else {
    
  }
  repo_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repo_name);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_name)
}

// string repo_branch = 5;
inline void EstafettePipelineEvent::clear_repo_branch() {
  repo_branch_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EstafettePipelineEvent::repo_branch() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_branch)
  return repo_branch_.GetNoArena();
}
inline void EstafettePipelineEvent::set_repo_branch(const std::string& value) {
  
  repo_branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_branch)
}
inline void EstafettePipelineEvent::set_repo_branch(std::string&& value) {
  
  repo_branch_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_branch)
}
inline void EstafettePipelineEvent::set_repo_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_branch)
}
inline void EstafettePipelineEvent::set_repo_branch(const char* value, size_t size) {
  
  repo_branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_branch)
}
inline std::string* EstafettePipelineEvent::mutable_repo_branch() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_branch)
  return repo_branch_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EstafettePipelineEvent::release_repo_branch() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_branch)
  
  return repo_branch_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EstafettePipelineEvent::set_allocated_repo_branch(std::string* repo_branch) {
  if (repo_branch != nullptr) {
    
  } else {
    
  }
  repo_branch_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repo_branch);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafettePipelineEvent.repo_branch)
}

// string status = 6;
inline void EstafettePipelineEvent::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EstafettePipelineEvent::status() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafettePipelineEvent.status)
  return status_.GetNoArena();
}
inline void EstafettePipelineEvent::set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafettePipelineEvent.status)
}
inline void EstafettePipelineEvent::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.manifest.v1.EstafettePipelineEvent.status)
}
inline void EstafettePipelineEvent::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.manifest.v1.EstafettePipelineEvent.status)
}
inline void EstafettePipelineEvent::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.manifest.v1.EstafettePipelineEvent.status)
}
inline std::string* EstafettePipelineEvent::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafettePipelineEvent.status)
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EstafettePipelineEvent::release_status() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafettePipelineEvent.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EstafettePipelineEvent::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafettePipelineEvent.status)
}

// string event = 7;
inline void EstafettePipelineEvent::clear_event() {
  event_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EstafettePipelineEvent::event() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafettePipelineEvent.event)
  return event_.GetNoArena();
}
inline void EstafettePipelineEvent::set_event(const std::string& value) {
  
  event_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafettePipelineEvent.event)
}
inline void EstafettePipelineEvent::set_event(std::string&& value) {
  
  event_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.manifest.v1.EstafettePipelineEvent.event)
}
inline void EstafettePipelineEvent::set_event(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.manifest.v1.EstafettePipelineEvent.event)
}
inline void EstafettePipelineEvent::set_event(const char* value, size_t size) {
  
  event_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.manifest.v1.EstafettePipelineEvent.event)
}
inline std::string* EstafettePipelineEvent::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafettePipelineEvent.event)
  return event_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EstafettePipelineEvent::release_event() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafettePipelineEvent.event)
  
  return event_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EstafettePipelineEvent::set_allocated_event(std::string* event) {
  if (event != nullptr) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafettePipelineEvent.event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto
