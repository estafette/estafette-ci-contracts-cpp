// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/manifest/v1/estafette_release.proto

#ifndef PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_2eproto
#define PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "estafette/ci/manifest/v1/estafette_release_action.pb.h"
#include "estafette/ci/manifest/v1/estafette_stage.pb.h"
#include "estafette/ci/manifest/v1/estafette_trigger.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_2eproto 

namespace protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_2eproto
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {
class EstafetteRelease;
class EstafetteReleaseDefaultTypeInternal;
extern EstafetteReleaseDefaultTypeInternal _EstafetteRelease_default_instance_;
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
namespace google {
namespace protobuf {
template<> ::estafette::ci::manifest::v1::EstafetteRelease* Arena::CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteRelease>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {

// ===================================================================

class EstafetteRelease : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:estafette.ci.manifest.v1.EstafetteRelease) */ {
 public:
  EstafetteRelease();
  virtual ~EstafetteRelease();

  EstafetteRelease(const EstafetteRelease& from);

  inline EstafetteRelease& operator=(const EstafetteRelease& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EstafetteRelease(EstafetteRelease&& from) noexcept
    : EstafetteRelease() {
    *this = ::std::move(from);
  }

  inline EstafetteRelease& operator=(EstafetteRelease&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EstafetteRelease& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstafetteRelease* internal_default_instance() {
    return reinterpret_cast<const EstafetteRelease*>(
               &_EstafetteRelease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EstafetteRelease* other);
  friend void swap(EstafetteRelease& a, EstafetteRelease& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EstafetteRelease* New() const final {
    return CreateMaybeMessage<EstafetteRelease>(NULL);
  }

  EstafetteRelease* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EstafetteRelease>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EstafetteRelease& from);
  void MergeFrom(const EstafetteRelease& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstafetteRelease* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .estafette.ci.manifest.v1.EstafetteReleaseAction actions = 3;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 3;
  ::estafette::ci::manifest::v1::EstafetteReleaseAction* mutable_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteReleaseAction >*
      mutable_actions();
  const ::estafette::ci::manifest::v1::EstafetteReleaseAction& actions(int index) const;
  ::estafette::ci::manifest::v1::EstafetteReleaseAction* add_actions();
  const ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteReleaseAction >&
      actions() const;

  // repeated .estafette.ci.manifest.v1.EstafetteTrigger triggers = 4;
  int triggers_size() const;
  void clear_triggers();
  static const int kTriggersFieldNumber = 4;
  ::estafette::ci::manifest::v1::EstafetteTrigger* mutable_triggers(int index);
  ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteTrigger >*
      mutable_triggers();
  const ::estafette::ci::manifest::v1::EstafetteTrigger& triggers(int index) const;
  ::estafette::ci::manifest::v1::EstafetteTrigger* add_triggers();
  const ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteTrigger >&
      triggers() const;

  // repeated .estafette.ci.manifest.v1.EstafetteStage stages = 5;
  int stages_size() const;
  void clear_stages();
  static const int kStagesFieldNumber = 5;
  ::estafette::ci::manifest::v1::EstafetteStage* mutable_stages(int index);
  ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteStage >*
      mutable_stages();
  const ::estafette::ci::manifest::v1::EstafetteStage& stages(int index) const;
  ::estafette::ci::manifest::v1::EstafetteStage* add_stages();
  const ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteStage >&
      stages() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool clone_repository = 2;
  void clear_clone_repository();
  static const int kCloneRepositoryFieldNumber = 2;
  bool clone_repository() const;
  void set_clone_repository(bool value);

  // @@protoc_insertion_point(class_scope:estafette.ci.manifest.v1.EstafetteRelease)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteReleaseAction > actions_;
  ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteTrigger > triggers_;
  ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteStage > stages_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool clone_repository_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EstafetteRelease

// string name = 1;
inline void EstafetteRelease::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EstafetteRelease::name() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteRelease.name)
  return name_.GetNoArena();
}
inline void EstafetteRelease::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafetteRelease.name)
}
#if LANG_CXX11
inline void EstafetteRelease::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.manifest.v1.EstafetteRelease.name)
}
#endif
inline void EstafetteRelease::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.manifest.v1.EstafetteRelease.name)
}
inline void EstafetteRelease::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.manifest.v1.EstafetteRelease.name)
}
inline ::std::string* EstafetteRelease::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteRelease.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EstafetteRelease::release_name() {
  // @@protoc_insertion_point(field_release:estafette.ci.manifest.v1.EstafetteRelease.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EstafetteRelease::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.manifest.v1.EstafetteRelease.name)
}

// bool clone_repository = 2;
inline void EstafetteRelease::clear_clone_repository() {
  clone_repository_ = false;
}
inline bool EstafetteRelease::clone_repository() const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteRelease.clone_repository)
  return clone_repository_;
}
inline void EstafetteRelease::set_clone_repository(bool value) {
  
  clone_repository_ = value;
  // @@protoc_insertion_point(field_set:estafette.ci.manifest.v1.EstafetteRelease.clone_repository)
}

// repeated .estafette.ci.manifest.v1.EstafetteReleaseAction actions = 3;
inline int EstafetteRelease::actions_size() const {
  return actions_.size();
}
inline ::estafette::ci::manifest::v1::EstafetteReleaseAction* EstafetteRelease::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteRelease.actions)
  return actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteReleaseAction >*
EstafetteRelease::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:estafette.ci.manifest.v1.EstafetteRelease.actions)
  return &actions_;
}
inline const ::estafette::ci::manifest::v1::EstafetteReleaseAction& EstafetteRelease::actions(int index) const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteRelease.actions)
  return actions_.Get(index);
}
inline ::estafette::ci::manifest::v1::EstafetteReleaseAction* EstafetteRelease::add_actions() {
  // @@protoc_insertion_point(field_add:estafette.ci.manifest.v1.EstafetteRelease.actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteReleaseAction >&
EstafetteRelease::actions() const {
  // @@protoc_insertion_point(field_list:estafette.ci.manifest.v1.EstafetteRelease.actions)
  return actions_;
}

// repeated .estafette.ci.manifest.v1.EstafetteTrigger triggers = 4;
inline int EstafetteRelease::triggers_size() const {
  return triggers_.size();
}
inline ::estafette::ci::manifest::v1::EstafetteTrigger* EstafetteRelease::mutable_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteRelease.triggers)
  return triggers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteTrigger >*
EstafetteRelease::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:estafette.ci.manifest.v1.EstafetteRelease.triggers)
  return &triggers_;
}
inline const ::estafette::ci::manifest::v1::EstafetteTrigger& EstafetteRelease::triggers(int index) const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteRelease.triggers)
  return triggers_.Get(index);
}
inline ::estafette::ci::manifest::v1::EstafetteTrigger* EstafetteRelease::add_triggers() {
  // @@protoc_insertion_point(field_add:estafette.ci.manifest.v1.EstafetteRelease.triggers)
  return triggers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteTrigger >&
EstafetteRelease::triggers() const {
  // @@protoc_insertion_point(field_list:estafette.ci.manifest.v1.EstafetteRelease.triggers)
  return triggers_;
}

// repeated .estafette.ci.manifest.v1.EstafetteStage stages = 5;
inline int EstafetteRelease::stages_size() const {
  return stages_.size();
}
inline ::estafette::ci::manifest::v1::EstafetteStage* EstafetteRelease::mutable_stages(int index) {
  // @@protoc_insertion_point(field_mutable:estafette.ci.manifest.v1.EstafetteRelease.stages)
  return stages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteStage >*
EstafetteRelease::mutable_stages() {
  // @@protoc_insertion_point(field_mutable_list:estafette.ci.manifest.v1.EstafetteRelease.stages)
  return &stages_;
}
inline const ::estafette::ci::manifest::v1::EstafetteStage& EstafetteRelease::stages(int index) const {
  // @@protoc_insertion_point(field_get:estafette.ci.manifest.v1.EstafetteRelease.stages)
  return stages_.Get(index);
}
inline ::estafette::ci::manifest::v1::EstafetteStage* EstafetteRelease::add_stages() {
  // @@protoc_insertion_point(field_add:estafette.ci.manifest.v1.EstafetteRelease.stages)
  return stages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteStage >&
EstafetteRelease::stages() const {
  // @@protoc_insertion_point(field_list:estafette.ci.manifest.v1.EstafetteRelease.stages)
  return stages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_2eproto
