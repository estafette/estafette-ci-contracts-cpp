// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/manifest/v1/estafette_trigger.proto

#include "estafette/ci/manifest/v1/estafette_trigger.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5ftrigger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteCronTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5ftrigger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fdocker_5ftrigger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteDockerTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5fdocker_5ftrigger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fgit_5ftrigger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteGitTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5fgit_5ftrigger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5ftrigger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafettePipelineTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5ftrigger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fpub_5fsub_5ftrigger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafettePubSubTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5fpub_5fsub_5ftrigger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_5ftrigger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteReleaseTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_5ftrigger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_5fbuild_5faction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteTriggerBuildAction_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_5fbuild_5faction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_5frelease_5faction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteTriggerReleaseAction_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_5frelease_5faction_2eproto;
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {
class EstafetteTriggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstafetteTrigger> _instance;
} _EstafetteTrigger_default_instance_;
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
static void InitDefaultsscc_info_EstafetteTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::estafette::ci::manifest::v1::_EstafetteTrigger_default_instance_;
    new (ptr) ::estafette::ci::manifest::v1::EstafetteTrigger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::estafette::ci::manifest::v1::EstafetteTrigger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_EstafetteTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsscc_info_EstafetteTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto}, {
      &scc_info_EstafettePipelineTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5ftrigger_2eproto.base,
      &scc_info_EstafetteReleaseTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_5ftrigger_2eproto.base,
      &scc_info_EstafetteGitTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5fgit_5ftrigger_2eproto.base,
      &scc_info_EstafetteDockerTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5fdocker_5ftrigger_2eproto.base,
      &scc_info_EstafetteCronTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5ftrigger_2eproto.base,
      &scc_info_EstafettePubSubTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5fpub_5fsub_5ftrigger_2eproto.base,
      &scc_info_EstafetteTriggerBuildAction_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_5fbuild_5faction_2eproto.base,
      &scc_info_EstafetteTriggerReleaseAction_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_5frelease_5faction_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteTrigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteTrigger, pipeline_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteTrigger, release_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteTrigger, git_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteTrigger, docker_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteTrigger, cron_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteTrigger, pub_sub_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteTrigger, build_action_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteTrigger, release_action_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::estafette::ci::manifest::v1::EstafetteTrigger)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::estafette::ci::manifest::v1::_EstafetteTrigger_default_instance_),
};

const char descriptor_table_protodef_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto[] =
  "\n0estafette/ci/manifest/v1/estafette_tri"
  "gger.proto\022\030estafette.ci.manifest.v1\0325es"
  "tafette/ci/manifest/v1/estafette_cron_tr"
  "igger.proto\0327estafette/ci/manifest/v1/es"
  "tafette_docker_trigger.proto\0324estafette/"
  "ci/manifest/v1/estafette_git_trigger.pro"
  "to\0329estafette/ci/manifest/v1/estafette_p"
  "ipeline_trigger.proto\0328estafette/ci/mani"
  "fest/v1/estafette_pub_sub_trigger.proto\032"
  "8estafette/ci/manifest/v1/estafette_rele"
  "ase_trigger.proto\032=estafette/ci/manifest"
  "/v1/estafette_trigger_build_action.proto"
  "\032\?estafette/ci/manifest/v1/estafette_tri"
  "gger_release_action.proto\"\271\004\n\020EstafetteT"
  "rigger\022D\n\010pipeline\030\001 \001(\01322.estafette.ci."
  "manifest.v1.EstafettePipelineTrigger\022B\n\007"
  "release\030\002 \001(\01321.estafette.ci.manifest.v1"
  ".EstafetteReleaseTrigger\022:\n\003git\030\003 \001(\0132-."
  "estafette.ci.manifest.v1.EstafetteGitTri"
  "gger\022@\n\006docker\030\004 \001(\01320.estafette.ci.mani"
  "fest.v1.EstafetteDockerTrigger\022<\n\004cron\030\005"
  " \001(\0132..estafette.ci.manifest.v1.Estafett"
  "eCronTrigger\022A\n\007pub_sub\030\006 \001(\01320.estafett"
  "e.ci.manifest.v1.EstafettePubSubTrigger\022"
  "K\n\014build_action\030\007 \001(\01325.estafette.ci.man"
  "ifest.v1.EstafetteTriggerBuildAction\022O\n\016"
  "release_action\030\010 \001(\01327.estafette.ci.mani"
  "fest.v1.EstafetteTriggerReleaseActionBx\n"
  "\034com.estafette.ci.manifest.v1P\001Z;github."
  "com/estafette/estafette-ci-protos-golang"
  "/manifest_v1\252\002\030Estafette.Ci.Manifest.V1b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto_deps[8] = {
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5ftrigger_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fdocker_5ftrigger_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fgit_5ftrigger_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5ftrigger_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fpub_5fsub_5ftrigger_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_5ftrigger_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_5fbuild_5faction_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_5frelease_5faction_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto_sccs[1] = {
  &scc_info_EstafetteTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto_once;
static bool descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto = {
  &descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto_initialized, descriptor_table_protodef_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto, "estafette/ci/manifest/v1/estafette_trigger.proto", 1247,
  &descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto_once, descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto_sccs, descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto::offsets,
  file_level_metadata_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto, 1, file_level_enum_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto, file_level_service_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto), true);
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {

// ===================================================================

void EstafetteTrigger::InitAsDefaultInstance() {
  ::estafette::ci::manifest::v1::_EstafetteTrigger_default_instance_._instance.get_mutable()->pipeline_ = const_cast< ::estafette::ci::manifest::v1::EstafettePipelineTrigger*>(
      ::estafette::ci::manifest::v1::EstafettePipelineTrigger::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteTrigger_default_instance_._instance.get_mutable()->release_ = const_cast< ::estafette::ci::manifest::v1::EstafetteReleaseTrigger*>(
      ::estafette::ci::manifest::v1::EstafetteReleaseTrigger::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteTrigger_default_instance_._instance.get_mutable()->git_ = const_cast< ::estafette::ci::manifest::v1::EstafetteGitTrigger*>(
      ::estafette::ci::manifest::v1::EstafetteGitTrigger::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteTrigger_default_instance_._instance.get_mutable()->docker_ = const_cast< ::estafette::ci::manifest::v1::EstafetteDockerTrigger*>(
      ::estafette::ci::manifest::v1::EstafetteDockerTrigger::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteTrigger_default_instance_._instance.get_mutable()->cron_ = const_cast< ::estafette::ci::manifest::v1::EstafetteCronTrigger*>(
      ::estafette::ci::manifest::v1::EstafetteCronTrigger::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteTrigger_default_instance_._instance.get_mutable()->pub_sub_ = const_cast< ::estafette::ci::manifest::v1::EstafettePubSubTrigger*>(
      ::estafette::ci::manifest::v1::EstafettePubSubTrigger::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteTrigger_default_instance_._instance.get_mutable()->build_action_ = const_cast< ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction*>(
      ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteTrigger_default_instance_._instance.get_mutable()->release_action_ = const_cast< ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction*>(
      ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction::internal_default_instance());
}
class EstafetteTrigger::HasBitSetters {
 public:
  static const ::estafette::ci::manifest::v1::EstafettePipelineTrigger& pipeline(const EstafetteTrigger* msg);
  static const ::estafette::ci::manifest::v1::EstafetteReleaseTrigger& release(const EstafetteTrigger* msg);
  static const ::estafette::ci::manifest::v1::EstafetteGitTrigger& git(const EstafetteTrigger* msg);
  static const ::estafette::ci::manifest::v1::EstafetteDockerTrigger& docker(const EstafetteTrigger* msg);
  static const ::estafette::ci::manifest::v1::EstafetteCronTrigger& cron(const EstafetteTrigger* msg);
  static const ::estafette::ci::manifest::v1::EstafettePubSubTrigger& pub_sub(const EstafetteTrigger* msg);
  static const ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction& build_action(const EstafetteTrigger* msg);
  static const ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction& release_action(const EstafetteTrigger* msg);
};

const ::estafette::ci::manifest::v1::EstafettePipelineTrigger&
EstafetteTrigger::HasBitSetters::pipeline(const EstafetteTrigger* msg) {
  return *msg->pipeline_;
}
const ::estafette::ci::manifest::v1::EstafetteReleaseTrigger&
EstafetteTrigger::HasBitSetters::release(const EstafetteTrigger* msg) {
  return *msg->release_;
}
const ::estafette::ci::manifest::v1::EstafetteGitTrigger&
EstafetteTrigger::HasBitSetters::git(const EstafetteTrigger* msg) {
  return *msg->git_;
}
const ::estafette::ci::manifest::v1::EstafetteDockerTrigger&
EstafetteTrigger::HasBitSetters::docker(const EstafetteTrigger* msg) {
  return *msg->docker_;
}
const ::estafette::ci::manifest::v1::EstafetteCronTrigger&
EstafetteTrigger::HasBitSetters::cron(const EstafetteTrigger* msg) {
  return *msg->cron_;
}
const ::estafette::ci::manifest::v1::EstafettePubSubTrigger&
EstafetteTrigger::HasBitSetters::pub_sub(const EstafetteTrigger* msg) {
  return *msg->pub_sub_;
}
const ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction&
EstafetteTrigger::HasBitSetters::build_action(const EstafetteTrigger* msg) {
  return *msg->build_action_;
}
const ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction&
EstafetteTrigger::HasBitSetters::release_action(const EstafetteTrigger* msg) {
  return *msg->release_action_;
}
void EstafetteTrigger::clear_pipeline() {
  if (GetArenaNoVirtual() == nullptr && pipeline_ != nullptr) {
    delete pipeline_;
  }
  pipeline_ = nullptr;
}
void EstafetteTrigger::clear_release() {
  if (GetArenaNoVirtual() == nullptr && release_ != nullptr) {
    delete release_;
  }
  release_ = nullptr;
}
void EstafetteTrigger::clear_git() {
  if (GetArenaNoVirtual() == nullptr && git_ != nullptr) {
    delete git_;
  }
  git_ = nullptr;
}
void EstafetteTrigger::clear_docker() {
  if (GetArenaNoVirtual() == nullptr && docker_ != nullptr) {
    delete docker_;
  }
  docker_ = nullptr;
}
void EstafetteTrigger::clear_cron() {
  if (GetArenaNoVirtual() == nullptr && cron_ != nullptr) {
    delete cron_;
  }
  cron_ = nullptr;
}
void EstafetteTrigger::clear_pub_sub() {
  if (GetArenaNoVirtual() == nullptr && pub_sub_ != nullptr) {
    delete pub_sub_;
  }
  pub_sub_ = nullptr;
}
void EstafetteTrigger::clear_build_action() {
  if (GetArenaNoVirtual() == nullptr && build_action_ != nullptr) {
    delete build_action_;
  }
  build_action_ = nullptr;
}
void EstafetteTrigger::clear_release_action() {
  if (GetArenaNoVirtual() == nullptr && release_action_ != nullptr) {
    delete release_action_;
  }
  release_action_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EstafetteTrigger::kPipelineFieldNumber;
const int EstafetteTrigger::kReleaseFieldNumber;
const int EstafetteTrigger::kGitFieldNumber;
const int EstafetteTrigger::kDockerFieldNumber;
const int EstafetteTrigger::kCronFieldNumber;
const int EstafetteTrigger::kPubSubFieldNumber;
const int EstafetteTrigger::kBuildActionFieldNumber;
const int EstafetteTrigger::kReleaseActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EstafetteTrigger::EstafetteTrigger()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:estafette.ci.manifest.v1.EstafetteTrigger)
}
EstafetteTrigger::EstafetteTrigger(const EstafetteTrigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pipeline()) {
    pipeline_ = new ::estafette::ci::manifest::v1::EstafettePipelineTrigger(*from.pipeline_);
  } else {
    pipeline_ = nullptr;
  }
  if (from.has_release()) {
    release_ = new ::estafette::ci::manifest::v1::EstafetteReleaseTrigger(*from.release_);
  } else {
    release_ = nullptr;
  }
  if (from.has_git()) {
    git_ = new ::estafette::ci::manifest::v1::EstafetteGitTrigger(*from.git_);
  } else {
    git_ = nullptr;
  }
  if (from.has_docker()) {
    docker_ = new ::estafette::ci::manifest::v1::EstafetteDockerTrigger(*from.docker_);
  } else {
    docker_ = nullptr;
  }
  if (from.has_cron()) {
    cron_ = new ::estafette::ci::manifest::v1::EstafetteCronTrigger(*from.cron_);
  } else {
    cron_ = nullptr;
  }
  if (from.has_pub_sub()) {
    pub_sub_ = new ::estafette::ci::manifest::v1::EstafettePubSubTrigger(*from.pub_sub_);
  } else {
    pub_sub_ = nullptr;
  }
  if (from.has_build_action()) {
    build_action_ = new ::estafette::ci::manifest::v1::EstafetteTriggerBuildAction(*from.build_action_);
  } else {
    build_action_ = nullptr;
  }
  if (from.has_release_action()) {
    release_action_ = new ::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction(*from.release_action_);
  } else {
    release_action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:estafette.ci.manifest.v1.EstafetteTrigger)
}

void EstafetteTrigger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstafetteTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto.base);
  ::memset(&pipeline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&release_action_) -
      reinterpret_cast<char*>(&pipeline_)) + sizeof(release_action_));
}

EstafetteTrigger::~EstafetteTrigger() {
  // @@protoc_insertion_point(destructor:estafette.ci.manifest.v1.EstafetteTrigger)
  SharedDtor();
}

void EstafetteTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete pipeline_;
  if (this != internal_default_instance()) delete release_;
  if (this != internal_default_instance()) delete git_;
  if (this != internal_default_instance()) delete docker_;
  if (this != internal_default_instance()) delete cron_;
  if (this != internal_default_instance()) delete pub_sub_;
  if (this != internal_default_instance()) delete build_action_;
  if (this != internal_default_instance()) delete release_action_;
}

void EstafetteTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstafetteTrigger& EstafetteTrigger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstafetteTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto.base);
  return *internal_default_instance();
}


void EstafetteTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:estafette.ci.manifest.v1.EstafetteTrigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pipeline_ != nullptr) {
    delete pipeline_;
  }
  pipeline_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && release_ != nullptr) {
    delete release_;
  }
  release_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && git_ != nullptr) {
    delete git_;
  }
  git_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && docker_ != nullptr) {
    delete docker_;
  }
  docker_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cron_ != nullptr) {
    delete cron_;
  }
  cron_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pub_sub_ != nullptr) {
    delete pub_sub_;
  }
  pub_sub_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && build_action_ != nullptr) {
    delete build_action_;
  }
  build_action_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && release_action_ != nullptr) {
    delete release_action_;
  }
  release_action_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EstafetteTrigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .estafette.ci.manifest.v1.EstafettePipelineTrigger pipeline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pipeline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteReleaseTrigger release = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_release(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteGitTrigger git = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_git(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteDockerTrigger docker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_docker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteCronTrigger cron = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_cron(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafettePubSubTrigger pub_sub = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_pub_sub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteTriggerBuildAction build_action = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_build_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteTriggerReleaseAction release_action = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_release_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EstafetteTrigger::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:estafette.ci.manifest.v1.EstafetteTrigger)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .estafette.ci.manifest.v1.EstafettePipelineTrigger pipeline = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pipeline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteReleaseTrigger release = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_release()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteGitTrigger git = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_git()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteDockerTrigger docker = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_docker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteCronTrigger cron = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cron()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafettePubSubTrigger pub_sub = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pub_sub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteTriggerBuildAction build_action = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_build_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteTriggerReleaseAction release_action = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_release_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:estafette.ci.manifest.v1.EstafetteTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:estafette.ci.manifest.v1.EstafetteTrigger)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EstafetteTrigger::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:estafette.ci.manifest.v1.EstafetteTrigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .estafette.ci.manifest.v1.EstafettePipelineTrigger pipeline = 1;
  if (this->has_pipeline()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pipeline(this), output);
  }

  // .estafette.ci.manifest.v1.EstafetteReleaseTrigger release = 2;
  if (this->has_release()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::release(this), output);
  }

  // .estafette.ci.manifest.v1.EstafetteGitTrigger git = 3;
  if (this->has_git()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::git(this), output);
  }

  // .estafette.ci.manifest.v1.EstafetteDockerTrigger docker = 4;
  if (this->has_docker()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::docker(this), output);
  }

  // .estafette.ci.manifest.v1.EstafetteCronTrigger cron = 5;
  if (this->has_cron()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::cron(this), output);
  }

  // .estafette.ci.manifest.v1.EstafettePubSubTrigger pub_sub = 6;
  if (this->has_pub_sub()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::pub_sub(this), output);
  }

  // .estafette.ci.manifest.v1.EstafetteTriggerBuildAction build_action = 7;
  if (this->has_build_action()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::build_action(this), output);
  }

  // .estafette.ci.manifest.v1.EstafetteTriggerReleaseAction release_action = 8;
  if (this->has_release_action()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::release_action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:estafette.ci.manifest.v1.EstafetteTrigger)
}

::PROTOBUF_NAMESPACE_ID::uint8* EstafetteTrigger::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:estafette.ci.manifest.v1.EstafetteTrigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .estafette.ci.manifest.v1.EstafettePipelineTrigger pipeline = 1;
  if (this->has_pipeline()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pipeline(this), target);
  }

  // .estafette.ci.manifest.v1.EstafetteReleaseTrigger release = 2;
  if (this->has_release()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::release(this), target);
  }

  // .estafette.ci.manifest.v1.EstafetteGitTrigger git = 3;
  if (this->has_git()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::git(this), target);
  }

  // .estafette.ci.manifest.v1.EstafetteDockerTrigger docker = 4;
  if (this->has_docker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::docker(this), target);
  }

  // .estafette.ci.manifest.v1.EstafetteCronTrigger cron = 5;
  if (this->has_cron()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::cron(this), target);
  }

  // .estafette.ci.manifest.v1.EstafettePubSubTrigger pub_sub = 6;
  if (this->has_pub_sub()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::pub_sub(this), target);
  }

  // .estafette.ci.manifest.v1.EstafetteTriggerBuildAction build_action = 7;
  if (this->has_build_action()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::build_action(this), target);
  }

  // .estafette.ci.manifest.v1.EstafetteTriggerReleaseAction release_action = 8;
  if (this->has_release_action()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::release_action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:estafette.ci.manifest.v1.EstafetteTrigger)
  return target;
}

size_t EstafetteTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:estafette.ci.manifest.v1.EstafetteTrigger)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .estafette.ci.manifest.v1.EstafettePipelineTrigger pipeline = 1;
  if (this->has_pipeline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pipeline_);
  }

  // .estafette.ci.manifest.v1.EstafetteReleaseTrigger release = 2;
  if (this->has_release()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *release_);
  }

  // .estafette.ci.manifest.v1.EstafetteGitTrigger git = 3;
  if (this->has_git()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *git_);
  }

  // .estafette.ci.manifest.v1.EstafetteDockerTrigger docker = 4;
  if (this->has_docker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *docker_);
  }

  // .estafette.ci.manifest.v1.EstafetteCronTrigger cron = 5;
  if (this->has_cron()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cron_);
  }

  // .estafette.ci.manifest.v1.EstafettePubSubTrigger pub_sub = 6;
  if (this->has_pub_sub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_sub_);
  }

  // .estafette.ci.manifest.v1.EstafetteTriggerBuildAction build_action = 7;
  if (this->has_build_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *build_action_);
  }

  // .estafette.ci.manifest.v1.EstafetteTriggerReleaseAction release_action = 8;
  if (this->has_release_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *release_action_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstafetteTrigger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:estafette.ci.manifest.v1.EstafetteTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  const EstafetteTrigger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstafetteTrigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:estafette.ci.manifest.v1.EstafetteTrigger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:estafette.ci.manifest.v1.EstafetteTrigger)
    MergeFrom(*source);
  }
}

void EstafetteTrigger::MergeFrom(const EstafetteTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:estafette.ci.manifest.v1.EstafetteTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pipeline()) {
    mutable_pipeline()->::estafette::ci::manifest::v1::EstafettePipelineTrigger::MergeFrom(from.pipeline());
  }
  if (from.has_release()) {
    mutable_release()->::estafette::ci::manifest::v1::EstafetteReleaseTrigger::MergeFrom(from.release());
  }
  if (from.has_git()) {
    mutable_git()->::estafette::ci::manifest::v1::EstafetteGitTrigger::MergeFrom(from.git());
  }
  if (from.has_docker()) {
    mutable_docker()->::estafette::ci::manifest::v1::EstafetteDockerTrigger::MergeFrom(from.docker());
  }
  if (from.has_cron()) {
    mutable_cron()->::estafette::ci::manifest::v1::EstafetteCronTrigger::MergeFrom(from.cron());
  }
  if (from.has_pub_sub()) {
    mutable_pub_sub()->::estafette::ci::manifest::v1::EstafettePubSubTrigger::MergeFrom(from.pub_sub());
  }
  if (from.has_build_action()) {
    mutable_build_action()->::estafette::ci::manifest::v1::EstafetteTriggerBuildAction::MergeFrom(from.build_action());
  }
  if (from.has_release_action()) {
    mutable_release_action()->::estafette::ci::manifest::v1::EstafetteTriggerReleaseAction::MergeFrom(from.release_action());
  }
}

void EstafetteTrigger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:estafette.ci.manifest.v1.EstafetteTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstafetteTrigger::CopyFrom(const EstafetteTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:estafette.ci.manifest.v1.EstafetteTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstafetteTrigger::IsInitialized() const {
  return true;
}

void EstafetteTrigger::Swap(EstafetteTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EstafetteTrigger::InternalSwap(EstafetteTrigger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pipeline_, other->pipeline_);
  swap(release_, other->release_);
  swap(git_, other->git_);
  swap(docker_, other->docker_);
  swap(cron_, other->cron_);
  swap(pub_sub_, other->pub_sub_);
  swap(build_action_, other->build_action_);
  swap(release_action_, other->release_action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstafetteTrigger::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::estafette::ci::manifest::v1::EstafetteTrigger* Arena::CreateMaybeMessage< ::estafette::ci::manifest::v1::EstafetteTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::estafette::ci::manifest::v1::EstafetteTrigger >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
