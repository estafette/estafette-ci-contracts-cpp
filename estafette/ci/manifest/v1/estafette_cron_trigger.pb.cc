// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/manifest/v1/estafette_cron_trigger.proto

#include "estafette/ci/manifest/v1/estafette_cron_trigger.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {
class EstafetteCronTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EstafetteCronTrigger>
      _instance;
} _EstafetteCronTrigger_default_instance_;
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
namespace protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5ftrigger_2eproto {
static void InitDefaultsEstafetteCronTrigger() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::estafette::ci::manifest::v1::_EstafetteCronTrigger_default_instance_;
    new (ptr) ::estafette::ci::manifest::v1::EstafetteCronTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::estafette::ci::manifest::v1::EstafetteCronTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EstafetteCronTrigger =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEstafetteCronTrigger}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EstafetteCronTrigger.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteCronTrigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteCronTrigger, schedule_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::estafette::ci::manifest::v1::EstafetteCronTrigger)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::estafette::ci::manifest::v1::_EstafetteCronTrigger_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "estafette/ci/manifest/v1/estafette_cron_trigger.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n5estafette/ci/manifest/v1/estafette_cro"
      "n_trigger.proto\022\030estafette.ci.manifest.v"
      "1\"(\n\024EstafetteCronTrigger\022\020\n\010schedule\030\001 "
      "\001(\tBx\n\034com.estafette.ci.manifest.v1P\001Z;g"
      "ithub.com/estafette/estafette-ci-protos-"
      "golang/manifest_v1\252\002\030Estafette.Ci.Manife"
      "st.V1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 253);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "estafette/ci/manifest/v1/estafette_cron_trigger.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5ftrigger_2eproto
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {

// ===================================================================

void EstafetteCronTrigger::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EstafetteCronTrigger::kScheduleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EstafetteCronTrigger::EstafetteCronTrigger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5ftrigger_2eproto::scc_info_EstafetteCronTrigger.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:estafette.ci.manifest.v1.EstafetteCronTrigger)
}
EstafetteCronTrigger::EstafetteCronTrigger(const EstafetteCronTrigger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schedule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.schedule().size() > 0) {
    schedule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schedule_);
  }
  // @@protoc_insertion_point(copy_constructor:estafette.ci.manifest.v1.EstafetteCronTrigger)
}

void EstafetteCronTrigger::SharedCtor() {
  schedule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EstafetteCronTrigger::~EstafetteCronTrigger() {
  // @@protoc_insertion_point(destructor:estafette.ci.manifest.v1.EstafetteCronTrigger)
  SharedDtor();
}

void EstafetteCronTrigger::SharedDtor() {
  schedule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EstafetteCronTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EstafetteCronTrigger::descriptor() {
  ::protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5ftrigger_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5ftrigger_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EstafetteCronTrigger& EstafetteCronTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5ftrigger_2eproto::scc_info_EstafetteCronTrigger.base);
  return *internal_default_instance();
}


void EstafetteCronTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:estafette.ci.manifest.v1.EstafetteCronTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schedule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool EstafetteCronTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:estafette.ci.manifest.v1.EstafetteCronTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string schedule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schedule()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->schedule().data(), static_cast<int>(this->schedule().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteCronTrigger.schedule"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:estafette.ci.manifest.v1.EstafetteCronTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:estafette.ci.manifest.v1.EstafetteCronTrigger)
  return false;
#undef DO_
}

void EstafetteCronTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:estafette.ci.manifest.v1.EstafetteCronTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string schedule = 1;
  if (this->schedule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schedule().data(), static_cast<int>(this->schedule().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteCronTrigger.schedule");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->schedule(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:estafette.ci.manifest.v1.EstafetteCronTrigger)
}

::google::protobuf::uint8* EstafetteCronTrigger::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:estafette.ci.manifest.v1.EstafetteCronTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string schedule = 1;
  if (this->schedule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schedule().data(), static_cast<int>(this->schedule().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.manifest.v1.EstafetteCronTrigger.schedule");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->schedule(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:estafette.ci.manifest.v1.EstafetteCronTrigger)
  return target;
}

size_t EstafetteCronTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:estafette.ci.manifest.v1.EstafetteCronTrigger)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string schedule = 1;
  if (this->schedule().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->schedule());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstafetteCronTrigger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:estafette.ci.manifest.v1.EstafetteCronTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  const EstafetteCronTrigger* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EstafetteCronTrigger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:estafette.ci.manifest.v1.EstafetteCronTrigger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:estafette.ci.manifest.v1.EstafetteCronTrigger)
    MergeFrom(*source);
  }
}

void EstafetteCronTrigger::MergeFrom(const EstafetteCronTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:estafette.ci.manifest.v1.EstafetteCronTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.schedule().size() > 0) {

    schedule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schedule_);
  }
}

void EstafetteCronTrigger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:estafette.ci.manifest.v1.EstafetteCronTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstafetteCronTrigger::CopyFrom(const EstafetteCronTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:estafette.ci.manifest.v1.EstafetteCronTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstafetteCronTrigger::IsInitialized() const {
  return true;
}

void EstafetteCronTrigger::Swap(EstafetteCronTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EstafetteCronTrigger::InternalSwap(EstafetteCronTrigger* other) {
  using std::swap;
  schedule_.Swap(&other->schedule_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EstafetteCronTrigger::GetMetadata() const {
  protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5ftrigger_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5ftrigger_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::estafette::ci::manifest::v1::EstafetteCronTrigger* Arena::CreateMaybeMessage< ::estafette::ci::manifest::v1::EstafetteCronTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::estafette::ci::manifest::v1::EstafetteCronTrigger >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
