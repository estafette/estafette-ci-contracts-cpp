// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/manifest/v1/estafette_event.proto

#include "estafette/ci/manifest/v1/estafette_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EstafetteCronEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fdocker_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteDockerEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fdocker_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fgit_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteGitEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fgit_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanual_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteManualEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanual_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafettePipelineEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fpub_5fsub_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafettePubSubEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fpub_5fsub_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteReleaseEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_5fevent_2eproto;
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {
class EstafetteEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstafetteEvent> _instance;
} _EstafetteEvent_default_instance_;
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
static void InitDefaultsscc_info_EstafetteEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::estafette::ci::manifest::v1::_EstafetteEvent_default_instance_;
    new (ptr) ::estafette::ci::manifest::v1::EstafetteEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::estafette::ci::manifest::v1::EstafetteEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_EstafetteEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_EstafetteEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto}, {
      &scc_info_EstafettePipelineEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto.base,
      &scc_info_EstafetteReleaseEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_5fevent_2eproto.base,
      &scc_info_EstafetteGitEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fgit_5fevent_2eproto.base,
      &scc_info_EstafetteDockerEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fdocker_5fevent_2eproto.base,
      &scc_info_EstafetteCronEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5fevent_2eproto.base,
      &scc_info_EstafettePubSubEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fpub_5fsub_5fevent_2eproto.base,
      &scc_info_EstafetteManualEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanual_5fevent_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteEvent, pipeline_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteEvent, release_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteEvent, git_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteEvent, docker_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteEvent, cron_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteEvent, pub_sub_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteEvent, manual_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::estafette::ci::manifest::v1::EstafetteEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::estafette::ci::manifest::v1::_EstafetteEvent_default_instance_),
};

const char descriptor_table_protodef_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto[] =
  "\n.estafette/ci/manifest/v1/estafette_eve"
  "nt.proto\022\030estafette.ci.manifest.v1\0323esta"
  "fette/ci/manifest/v1/estafette_cron_even"
  "t.proto\0325estafette/ci/manifest/v1/estafe"
  "tte_docker_event.proto\0322estafette/ci/man"
  "ifest/v1/estafette_git_event.proto\0325esta"
  "fette/ci/manifest/v1/estafette_manual_ev"
  "ent.proto\0327estafette/ci/manifest/v1/esta"
  "fette_pipeline_event.proto\0326estafette/ci"
  "/manifest/v1/estafette_pub_sub_event.pro"
  "to\0326estafette/ci/manifest/v1/estafette_r"
  "elease_event.proto\"\315\003\n\016EstafetteEvent\022B\n"
  "\010pipeline\030\001 \001(\01320.estafette.ci.manifest."
  "v1.EstafettePipelineEvent\022@\n\007release\030\002 \001"
  "(\0132/.estafette.ci.manifest.v1.EstafetteR"
  "eleaseEvent\0228\n\003git\030\003 \001(\0132+.estafette.ci."
  "manifest.v1.EstafetteGitEvent\022>\n\006docker\030"
  "\004 \001(\0132..estafette.ci.manifest.v1.Estafet"
  "teDockerEvent\022:\n\004cron\030\005 \001(\0132,.estafette."
  "ci.manifest.v1.EstafetteCronEvent\022\?\n\007pub"
  "_sub\030\006 \001(\0132..estafette.ci.manifest.v1.Es"
  "tafettePubSubEvent\022>\n\006manual\030\007 \001(\0132..est"
  "afette.ci.manifest.v1.EstafetteManualEve"
  "ntBx\n\034com.estafette.ci.manifest.v1P\001Z;gi"
  "thub.com/estafette/estafette-ci-protos-g"
  "olang/manifest_v1\252\002\030Estafette.Ci.Manifes"
  "t.V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto_deps[7] = {
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fcron_5fevent_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fdocker_5fevent_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fgit_5fevent_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanual_5fevent_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fpipeline_5fevent_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fpub_5fsub_5fevent_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_5fevent_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto_sccs[1] = {
  &scc_info_EstafetteEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto_once;
static bool descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto = {
  &descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto_initialized, descriptor_table_protodef_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto, "estafette/ci/manifest/v1/estafette_event.proto", 1052,
  &descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto_once, descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto_sccs, descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto::offsets,
  file_level_metadata_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto, 1, file_level_enum_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto, file_level_service_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto), true);
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {

// ===================================================================

void EstafetteEvent::InitAsDefaultInstance() {
  ::estafette::ci::manifest::v1::_EstafetteEvent_default_instance_._instance.get_mutable()->pipeline_ = const_cast< ::estafette::ci::manifest::v1::EstafettePipelineEvent*>(
      ::estafette::ci::manifest::v1::EstafettePipelineEvent::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteEvent_default_instance_._instance.get_mutable()->release_ = const_cast< ::estafette::ci::manifest::v1::EstafetteReleaseEvent*>(
      ::estafette::ci::manifest::v1::EstafetteReleaseEvent::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteEvent_default_instance_._instance.get_mutable()->git_ = const_cast< ::estafette::ci::manifest::v1::EstafetteGitEvent*>(
      ::estafette::ci::manifest::v1::EstafetteGitEvent::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteEvent_default_instance_._instance.get_mutable()->docker_ = const_cast< ::estafette::ci::manifest::v1::EstafetteDockerEvent*>(
      ::estafette::ci::manifest::v1::EstafetteDockerEvent::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteEvent_default_instance_._instance.get_mutable()->cron_ = const_cast< ::estafette::ci::manifest::v1::EstafetteCronEvent*>(
      ::estafette::ci::manifest::v1::EstafetteCronEvent::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteEvent_default_instance_._instance.get_mutable()->pub_sub_ = const_cast< ::estafette::ci::manifest::v1::EstafettePubSubEvent*>(
      ::estafette::ci::manifest::v1::EstafettePubSubEvent::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteEvent_default_instance_._instance.get_mutable()->manual_ = const_cast< ::estafette::ci::manifest::v1::EstafetteManualEvent*>(
      ::estafette::ci::manifest::v1::EstafetteManualEvent::internal_default_instance());
}
class EstafetteEvent::HasBitSetters {
 public:
  static const ::estafette::ci::manifest::v1::EstafettePipelineEvent& pipeline(const EstafetteEvent* msg);
  static const ::estafette::ci::manifest::v1::EstafetteReleaseEvent& release(const EstafetteEvent* msg);
  static const ::estafette::ci::manifest::v1::EstafetteGitEvent& git(const EstafetteEvent* msg);
  static const ::estafette::ci::manifest::v1::EstafetteDockerEvent& docker(const EstafetteEvent* msg);
  static const ::estafette::ci::manifest::v1::EstafetteCronEvent& cron(const EstafetteEvent* msg);
  static const ::estafette::ci::manifest::v1::EstafettePubSubEvent& pub_sub(const EstafetteEvent* msg);
  static const ::estafette::ci::manifest::v1::EstafetteManualEvent& manual(const EstafetteEvent* msg);
};

const ::estafette::ci::manifest::v1::EstafettePipelineEvent&
EstafetteEvent::HasBitSetters::pipeline(const EstafetteEvent* msg) {
  return *msg->pipeline_;
}
const ::estafette::ci::manifest::v1::EstafetteReleaseEvent&
EstafetteEvent::HasBitSetters::release(const EstafetteEvent* msg) {
  return *msg->release_;
}
const ::estafette::ci::manifest::v1::EstafetteGitEvent&
EstafetteEvent::HasBitSetters::git(const EstafetteEvent* msg) {
  return *msg->git_;
}
const ::estafette::ci::manifest::v1::EstafetteDockerEvent&
EstafetteEvent::HasBitSetters::docker(const EstafetteEvent* msg) {
  return *msg->docker_;
}
const ::estafette::ci::manifest::v1::EstafetteCronEvent&
EstafetteEvent::HasBitSetters::cron(const EstafetteEvent* msg) {
  return *msg->cron_;
}
const ::estafette::ci::manifest::v1::EstafettePubSubEvent&
EstafetteEvent::HasBitSetters::pub_sub(const EstafetteEvent* msg) {
  return *msg->pub_sub_;
}
const ::estafette::ci::manifest::v1::EstafetteManualEvent&
EstafetteEvent::HasBitSetters::manual(const EstafetteEvent* msg) {
  return *msg->manual_;
}
void EstafetteEvent::clear_pipeline() {
  if (GetArenaNoVirtual() == nullptr && pipeline_ != nullptr) {
    delete pipeline_;
  }
  pipeline_ = nullptr;
}
void EstafetteEvent::clear_release() {
  if (GetArenaNoVirtual() == nullptr && release_ != nullptr) {
    delete release_;
  }
  release_ = nullptr;
}
void EstafetteEvent::clear_git() {
  if (GetArenaNoVirtual() == nullptr && git_ != nullptr) {
    delete git_;
  }
  git_ = nullptr;
}
void EstafetteEvent::clear_docker() {
  if (GetArenaNoVirtual() == nullptr && docker_ != nullptr) {
    delete docker_;
  }
  docker_ = nullptr;
}
void EstafetteEvent::clear_cron() {
  if (GetArenaNoVirtual() == nullptr && cron_ != nullptr) {
    delete cron_;
  }
  cron_ = nullptr;
}
void EstafetteEvent::clear_pub_sub() {
  if (GetArenaNoVirtual() == nullptr && pub_sub_ != nullptr) {
    delete pub_sub_;
  }
  pub_sub_ = nullptr;
}
void EstafetteEvent::clear_manual() {
  if (GetArenaNoVirtual() == nullptr && manual_ != nullptr) {
    delete manual_;
  }
  manual_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EstafetteEvent::kPipelineFieldNumber;
const int EstafetteEvent::kReleaseFieldNumber;
const int EstafetteEvent::kGitFieldNumber;
const int EstafetteEvent::kDockerFieldNumber;
const int EstafetteEvent::kCronFieldNumber;
const int EstafetteEvent::kPubSubFieldNumber;
const int EstafetteEvent::kManualFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EstafetteEvent::EstafetteEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:estafette.ci.manifest.v1.EstafetteEvent)
}
EstafetteEvent::EstafetteEvent(const EstafetteEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pipeline()) {
    pipeline_ = new ::estafette::ci::manifest::v1::EstafettePipelineEvent(*from.pipeline_);
  } else {
    pipeline_ = nullptr;
  }
  if (from.has_release()) {
    release_ = new ::estafette::ci::manifest::v1::EstafetteReleaseEvent(*from.release_);
  } else {
    release_ = nullptr;
  }
  if (from.has_git()) {
    git_ = new ::estafette::ci::manifest::v1::EstafetteGitEvent(*from.git_);
  } else {
    git_ = nullptr;
  }
  if (from.has_docker()) {
    docker_ = new ::estafette::ci::manifest::v1::EstafetteDockerEvent(*from.docker_);
  } else {
    docker_ = nullptr;
  }
  if (from.has_cron()) {
    cron_ = new ::estafette::ci::manifest::v1::EstafetteCronEvent(*from.cron_);
  } else {
    cron_ = nullptr;
  }
  if (from.has_pub_sub()) {
    pub_sub_ = new ::estafette::ci::manifest::v1::EstafettePubSubEvent(*from.pub_sub_);
  } else {
    pub_sub_ = nullptr;
  }
  if (from.has_manual()) {
    manual_ = new ::estafette::ci::manifest::v1::EstafetteManualEvent(*from.manual_);
  } else {
    manual_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:estafette.ci.manifest.v1.EstafetteEvent)
}

void EstafetteEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstafetteEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto.base);
  ::memset(&pipeline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manual_) -
      reinterpret_cast<char*>(&pipeline_)) + sizeof(manual_));
}

EstafetteEvent::~EstafetteEvent() {
  // @@protoc_insertion_point(destructor:estafette.ci.manifest.v1.EstafetteEvent)
  SharedDtor();
}

void EstafetteEvent::SharedDtor() {
  if (this != internal_default_instance()) delete pipeline_;
  if (this != internal_default_instance()) delete release_;
  if (this != internal_default_instance()) delete git_;
  if (this != internal_default_instance()) delete docker_;
  if (this != internal_default_instance()) delete cron_;
  if (this != internal_default_instance()) delete pub_sub_;
  if (this != internal_default_instance()) delete manual_;
}

void EstafetteEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstafetteEvent& EstafetteEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstafetteEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto.base);
  return *internal_default_instance();
}


void EstafetteEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:estafette.ci.manifest.v1.EstafetteEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pipeline_ != nullptr) {
    delete pipeline_;
  }
  pipeline_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && release_ != nullptr) {
    delete release_;
  }
  release_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && git_ != nullptr) {
    delete git_;
  }
  git_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && docker_ != nullptr) {
    delete docker_;
  }
  docker_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cron_ != nullptr) {
    delete cron_;
  }
  cron_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pub_sub_ != nullptr) {
    delete pub_sub_;
  }
  pub_sub_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && manual_ != nullptr) {
    delete manual_;
  }
  manual_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EstafetteEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .estafette.ci.manifest.v1.EstafettePipelineEvent pipeline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pipeline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteReleaseEvent release = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_release(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteGitEvent git = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_git(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteDockerEvent docker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_docker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteCronEvent cron = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_cron(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafettePubSubEvent pub_sub = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_pub_sub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteManualEvent manual = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_manual(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EstafetteEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:estafette.ci.manifest.v1.EstafetteEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .estafette.ci.manifest.v1.EstafettePipelineEvent pipeline = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pipeline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteReleaseEvent release = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_release()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteGitEvent git = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_git()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteDockerEvent docker = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_docker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteCronEvent cron = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cron()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafettePubSubEvent pub_sub = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pub_sub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteManualEvent manual = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_manual()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:estafette.ci.manifest.v1.EstafetteEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:estafette.ci.manifest.v1.EstafetteEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EstafetteEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:estafette.ci.manifest.v1.EstafetteEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .estafette.ci.manifest.v1.EstafettePipelineEvent pipeline = 1;
  if (this->has_pipeline()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pipeline(this), output);
  }

  // .estafette.ci.manifest.v1.EstafetteReleaseEvent release = 2;
  if (this->has_release()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::release(this), output);
  }

  // .estafette.ci.manifest.v1.EstafetteGitEvent git = 3;
  if (this->has_git()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::git(this), output);
  }

  // .estafette.ci.manifest.v1.EstafetteDockerEvent docker = 4;
  if (this->has_docker()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::docker(this), output);
  }

  // .estafette.ci.manifest.v1.EstafetteCronEvent cron = 5;
  if (this->has_cron()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::cron(this), output);
  }

  // .estafette.ci.manifest.v1.EstafettePubSubEvent pub_sub = 6;
  if (this->has_pub_sub()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::pub_sub(this), output);
  }

  // .estafette.ci.manifest.v1.EstafetteManualEvent manual = 7;
  if (this->has_manual()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::manual(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:estafette.ci.manifest.v1.EstafetteEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* EstafetteEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:estafette.ci.manifest.v1.EstafetteEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .estafette.ci.manifest.v1.EstafettePipelineEvent pipeline = 1;
  if (this->has_pipeline()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pipeline(this), target);
  }

  // .estafette.ci.manifest.v1.EstafetteReleaseEvent release = 2;
  if (this->has_release()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::release(this), target);
  }

  // .estafette.ci.manifest.v1.EstafetteGitEvent git = 3;
  if (this->has_git()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::git(this), target);
  }

  // .estafette.ci.manifest.v1.EstafetteDockerEvent docker = 4;
  if (this->has_docker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::docker(this), target);
  }

  // .estafette.ci.manifest.v1.EstafetteCronEvent cron = 5;
  if (this->has_cron()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::cron(this), target);
  }

  // .estafette.ci.manifest.v1.EstafettePubSubEvent pub_sub = 6;
  if (this->has_pub_sub()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::pub_sub(this), target);
  }

  // .estafette.ci.manifest.v1.EstafetteManualEvent manual = 7;
  if (this->has_manual()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::manual(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:estafette.ci.manifest.v1.EstafetteEvent)
  return target;
}

size_t EstafetteEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:estafette.ci.manifest.v1.EstafetteEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .estafette.ci.manifest.v1.EstafettePipelineEvent pipeline = 1;
  if (this->has_pipeline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pipeline_);
  }

  // .estafette.ci.manifest.v1.EstafetteReleaseEvent release = 2;
  if (this->has_release()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *release_);
  }

  // .estafette.ci.manifest.v1.EstafetteGitEvent git = 3;
  if (this->has_git()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *git_);
  }

  // .estafette.ci.manifest.v1.EstafetteDockerEvent docker = 4;
  if (this->has_docker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *docker_);
  }

  // .estafette.ci.manifest.v1.EstafetteCronEvent cron = 5;
  if (this->has_cron()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cron_);
  }

  // .estafette.ci.manifest.v1.EstafettePubSubEvent pub_sub = 6;
  if (this->has_pub_sub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_sub_);
  }

  // .estafette.ci.manifest.v1.EstafetteManualEvent manual = 7;
  if (this->has_manual()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *manual_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstafetteEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:estafette.ci.manifest.v1.EstafetteEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const EstafetteEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstafetteEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:estafette.ci.manifest.v1.EstafetteEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:estafette.ci.manifest.v1.EstafetteEvent)
    MergeFrom(*source);
  }
}

void EstafetteEvent::MergeFrom(const EstafetteEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:estafette.ci.manifest.v1.EstafetteEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pipeline()) {
    mutable_pipeline()->::estafette::ci::manifest::v1::EstafettePipelineEvent::MergeFrom(from.pipeline());
  }
  if (from.has_release()) {
    mutable_release()->::estafette::ci::manifest::v1::EstafetteReleaseEvent::MergeFrom(from.release());
  }
  if (from.has_git()) {
    mutable_git()->::estafette::ci::manifest::v1::EstafetteGitEvent::MergeFrom(from.git());
  }
  if (from.has_docker()) {
    mutable_docker()->::estafette::ci::manifest::v1::EstafetteDockerEvent::MergeFrom(from.docker());
  }
  if (from.has_cron()) {
    mutable_cron()->::estafette::ci::manifest::v1::EstafetteCronEvent::MergeFrom(from.cron());
  }
  if (from.has_pub_sub()) {
    mutable_pub_sub()->::estafette::ci::manifest::v1::EstafettePubSubEvent::MergeFrom(from.pub_sub());
  }
  if (from.has_manual()) {
    mutable_manual()->::estafette::ci::manifest::v1::EstafetteManualEvent::MergeFrom(from.manual());
  }
}

void EstafetteEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:estafette.ci.manifest.v1.EstafetteEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstafetteEvent::CopyFrom(const EstafetteEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:estafette.ci.manifest.v1.EstafetteEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstafetteEvent::IsInitialized() const {
  return true;
}

void EstafetteEvent::Swap(EstafetteEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EstafetteEvent::InternalSwap(EstafetteEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pipeline_, other->pipeline_);
  swap(release_, other->release_);
  swap(git_, other->git_);
  swap(docker_, other->docker_);
  swap(cron_, other->cron_);
  swap(pub_sub_, other->pub_sub_);
  swap(manual_, other->manual_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstafetteEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::estafette::ci::manifest::v1::EstafetteEvent* Arena::CreateMaybeMessage< ::estafette::ci::manifest::v1::EstafetteEvent >(Arena* arena) {
  return Arena::CreateInternal< ::estafette::ci::manifest::v1::EstafetteEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
