// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/manifest/v1/estafette_manifest.proto

#include "estafette/ci/manifest/v1/estafette_manifest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fbuilder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteBuilder_estafette_2fci_2fmanifest_2fv1_2festafette_5fbuilder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteManifest_LabelsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EstafetteRelease_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EstafetteStage_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_EstafetteTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EstafetteVersion_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto;
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {
class EstafetteManifest_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstafetteManifest_LabelsEntry_DoNotUse> _instance;
} _EstafetteManifest_LabelsEntry_DoNotUse_default_instance_;
class EstafetteManifest_GlobalEnvVarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstafetteManifest_GlobalEnvVarsEntry_DoNotUse> _instance;
} _EstafetteManifest_GlobalEnvVarsEntry_DoNotUse_default_instance_;
class EstafetteManifestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstafetteManifest> _instance;
} _EstafetteManifest_default_instance_;
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
static void InitDefaultsscc_info_EstafetteManifest_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::estafette::ci::manifest::v1::_EstafetteManifest_default_instance_;
    new (ptr) ::estafette::ci::manifest::v1::EstafetteManifest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::estafette::ci::manifest::v1::EstafetteManifest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_EstafetteManifest_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_EstafetteManifest_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto}, {
      &scc_info_EstafetteBuilder_estafette_2fci_2fmanifest_2fv1_2festafette_5fbuilder_2eproto.base,
      &scc_info_EstafetteManifest_LabelsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto.base,
      &scc_info_EstafetteVersion_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto.base,
      &scc_info_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto.base,
      &scc_info_EstafetteTrigger_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto.base,
      &scc_info_EstafetteStage_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto.base,
      &scc_info_EstafetteRelease_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_2eproto.base,}};

static void InitDefaultsscc_info_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::estafette::ci::manifest::v1::_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse_default_instance_;
    new (ptr) ::estafette::ci::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse();
  }
  ::estafette::ci::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto}, {}};

static void InitDefaultsscc_info_EstafetteManifest_LabelsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::estafette::ci::manifest::v1::_EstafetteManifest_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::estafette::ci::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse();
  }
  ::estafette::ci::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstafetteManifest_LabelsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EstafetteManifest_LabelsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest, builder_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest, labels_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest, version_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest, global_env_vars_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest, triggers_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest, stages_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::manifest::v1::EstafetteManifest, releases_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::estafette::ci::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse)},
  { 9, 16, sizeof(::estafette::ci::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse)},
  { 18, -1, sizeof(::estafette::ci::manifest::v1::EstafetteManifest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::estafette::ci::manifest::v1::_EstafetteManifest_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::estafette::ci::manifest::v1::_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::estafette::ci::manifest::v1::_EstafetteManifest_default_instance_),
};

const char descriptor_table_protodef_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto[] =
  "\n1estafette/ci/manifest/v1/estafette_man"
  "ifest.proto\022\030estafette.ci.manifest.v1\0320e"
  "stafette/ci/manifest/v1/estafette_builde"
  "r.proto\0320estafette/ci/manifest/v1/estafe"
  "tte_release.proto\032.estafette/ci/manifest"
  "/v1/estafette_stage.proto\0320estafette/ci/"
  "manifest/v1/estafette_trigger.proto\0320est"
  "afette/ci/manifest/v1/estafette_version."
  "proto\"\312\004\n\021EstafetteManifest\022;\n\007builder\030\001"
  " \001(\0132*.estafette.ci.manifest.v1.Estafett"
  "eBuilder\022G\n\006labels\030\002 \003(\01327.estafette.ci."
  "manifest.v1.EstafetteManifest.LabelsEntr"
  "y\022;\n\007version\030\003 \001(\0132*.estafette.ci.manife"
  "st.v1.EstafetteVersion\022W\n\017global_env_var"
  "s\030\004 \003(\0132>.estafette.ci.manifest.v1.Estaf"
  "etteManifest.GlobalEnvVarsEntry\022<\n\010trigg"
  "ers\030\005 \003(\0132*.estafette.ci.manifest.v1.Est"
  "afetteTrigger\0228\n\006stages\030\006 \003(\0132(.estafett"
  "e.ci.manifest.v1.EstafetteStage\022<\n\010relea"
  "ses\030\007 \003(\0132*.estafette.ci.manifest.v1.Est"
  "afetteRelease\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t:\0028\001\0324\n\022GlobalEnvVarsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001Bx\n\034co"
  "m.estafette.ci.manifest.v1P\001Z;github.com"
  "/estafette/estafette-ci-protos-golang/ma"
  "nifest_v1\252\002\030Estafette.Ci.Manifest.V1b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto_deps[5] = {
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fbuilder_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5frelease_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fstage_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5ftrigger_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto_sccs[3] = {
  &scc_info_EstafetteManifest_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto.base,
  &scc_info_EstafetteManifest_GlobalEnvVarsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto.base,
  &scc_info_EstafetteManifest_LabelsEntry_DoNotUse_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto_once;
static bool descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto = {
  &descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto_initialized, descriptor_table_protodef_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto, "estafette/ci/manifest/v1/estafette_manifest.proto", 1044,
  &descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto_once, descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto_sccs, descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto::offsets,
  file_level_metadata_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto, 3, file_level_enum_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto, file_level_service_descriptors_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto), true);
namespace estafette {
namespace ci {
namespace manifest {
namespace v1 {

// ===================================================================

EstafetteManifest_LabelsEntry_DoNotUse::EstafetteManifest_LabelsEntry_DoNotUse() {}
EstafetteManifest_LabelsEntry_DoNotUse::EstafetteManifest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EstafetteManifest_LabelsEntry_DoNotUse::MergeFrom(const EstafetteManifest_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EstafetteManifest_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void EstafetteManifest_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse() {}
EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::MergeFrom(const EstafetteManifest_GlobalEnvVarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void EstafetteManifest::InitAsDefaultInstance() {
  ::estafette::ci::manifest::v1::_EstafetteManifest_default_instance_._instance.get_mutable()->builder_ = const_cast< ::estafette::ci::manifest::v1::EstafetteBuilder*>(
      ::estafette::ci::manifest::v1::EstafetteBuilder::internal_default_instance());
  ::estafette::ci::manifest::v1::_EstafetteManifest_default_instance_._instance.get_mutable()->version_ = const_cast< ::estafette::ci::manifest::v1::EstafetteVersion*>(
      ::estafette::ci::manifest::v1::EstafetteVersion::internal_default_instance());
}
class EstafetteManifest::HasBitSetters {
 public:
  static const ::estafette::ci::manifest::v1::EstafetteBuilder& builder(const EstafetteManifest* msg);
  static const ::estafette::ci::manifest::v1::EstafetteVersion& version(const EstafetteManifest* msg);
};

const ::estafette::ci::manifest::v1::EstafetteBuilder&
EstafetteManifest::HasBitSetters::builder(const EstafetteManifest* msg) {
  return *msg->builder_;
}
const ::estafette::ci::manifest::v1::EstafetteVersion&
EstafetteManifest::HasBitSetters::version(const EstafetteManifest* msg) {
  return *msg->version_;
}
void EstafetteManifest::clear_builder() {
  if (GetArenaNoVirtual() == nullptr && builder_ != nullptr) {
    delete builder_;
  }
  builder_ = nullptr;
}
void EstafetteManifest::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void EstafetteManifest::clear_triggers() {
  triggers_.Clear();
}
void EstafetteManifest::clear_stages() {
  stages_.Clear();
}
void EstafetteManifest::clear_releases() {
  releases_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EstafetteManifest::kBuilderFieldNumber;
const int EstafetteManifest::kLabelsFieldNumber;
const int EstafetteManifest::kVersionFieldNumber;
const int EstafetteManifest::kGlobalEnvVarsFieldNumber;
const int EstafetteManifest::kTriggersFieldNumber;
const int EstafetteManifest::kStagesFieldNumber;
const int EstafetteManifest::kReleasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EstafetteManifest::EstafetteManifest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:estafette.ci.manifest.v1.EstafetteManifest)
}
EstafetteManifest::EstafetteManifest(const EstafetteManifest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      triggers_(from.triggers_),
      stages_(from.stages_),
      releases_(from.releases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  global_env_vars_.MergeFrom(from.global_env_vars_);
  if (from.has_builder()) {
    builder_ = new ::estafette::ci::manifest::v1::EstafetteBuilder(*from.builder_);
  } else {
    builder_ = nullptr;
  }
  if (from.has_version()) {
    version_ = new ::estafette::ci::manifest::v1::EstafetteVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:estafette.ci.manifest.v1.EstafetteManifest)
}

void EstafetteManifest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstafetteManifest_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto.base);
  ::memset(&builder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&builder_)) + sizeof(version_));
}

EstafetteManifest::~EstafetteManifest() {
  // @@protoc_insertion_point(destructor:estafette.ci.manifest.v1.EstafetteManifest)
  SharedDtor();
}

void EstafetteManifest::SharedDtor() {
  if (this != internal_default_instance()) delete builder_;
  if (this != internal_default_instance()) delete version_;
}

void EstafetteManifest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstafetteManifest& EstafetteManifest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstafetteManifest_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto.base);
  return *internal_default_instance();
}


void EstafetteManifest::Clear() {
// @@protoc_insertion_point(message_clear_start:estafette.ci.manifest.v1.EstafetteManifest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  global_env_vars_.Clear();
  triggers_.Clear();
  stages_.Clear();
  releases_.Clear();
  if (GetArenaNoVirtual() == nullptr && builder_ != nullptr) {
    delete builder_;
  }
  builder_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EstafetteManifest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .estafette.ci.manifest.v1.EstafetteBuilder builder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_builder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteVersion version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> global_env_vars = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&global_env_vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .estafette.ci.manifest.v1.EstafetteTrigger triggers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_triggers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .estafette.ci.manifest.v1.EstafetteStage stages = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .estafette.ci.manifest.v1.EstafetteRelease releases = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_releases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EstafetteManifest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:estafette.ci.manifest.v1.EstafetteManifest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .estafette.ci.manifest.v1.EstafetteBuilder builder = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_builder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          EstafetteManifest_LabelsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              EstafetteManifest_LabelsEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&labels_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteManifest.LabelsEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteManifest.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteVersion version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> global_env_vars = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              EstafetteManifest_GlobalEnvVarsEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&global_env_vars_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteManifest.GlobalEnvVarsEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.manifest.v1.EstafetteManifest.GlobalEnvVarsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .estafette.ci.manifest.v1.EstafetteTrigger triggers = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_triggers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .estafette.ci.manifest.v1.EstafetteStage stages = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .estafette.ci.manifest.v1.EstafetteRelease releases = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_releases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:estafette.ci.manifest.v1.EstafetteManifest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:estafette.ci.manifest.v1.EstafetteManifest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EstafetteManifest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:estafette.ci.manifest.v1.EstafetteManifest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .estafette.ci.manifest.v1.EstafetteBuilder builder = 1;
  if (this->has_builder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::builder(this), output);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteManifest.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteManifest.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        EstafetteManifest_LabelsEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(2, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        EstafetteManifest_LabelsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(2, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .estafette.ci.manifest.v1.EstafetteVersion version = 3;
  if (this->has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::version(this), output);
  }

  // map<string, string> global_env_vars = 4;
  if (!this->global_env_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteManifest.GlobalEnvVarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteManifest.GlobalEnvVarsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->global_env_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->global_env_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->global_env_vars().begin();
          it != this->global_env_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(4, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->global_env_vars().begin();
          it != this->global_env_vars().end(); ++it) {
        EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(4, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .estafette.ci.manifest.v1.EstafetteTrigger triggers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->triggers(static_cast<int>(i)),
      output);
  }

  // repeated .estafette.ci.manifest.v1.EstafetteStage stages = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->stages(static_cast<int>(i)),
      output);
  }

  // repeated .estafette.ci.manifest.v1.EstafetteRelease releases = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->releases_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->releases(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:estafette.ci.manifest.v1.EstafetteManifest)
}

::PROTOBUF_NAMESPACE_ID::uint8* EstafetteManifest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:estafette.ci.manifest.v1.EstafetteManifest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .estafette.ci.manifest.v1.EstafetteBuilder builder = 1;
  if (this->has_builder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::builder(this), target);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteManifest.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteManifest.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        EstafetteManifest_LabelsEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        EstafetteManifest_LabelsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .estafette.ci.manifest.v1.EstafetteVersion version = 3;
  if (this->has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::version(this), target);
  }

  // map<string, string> global_env_vars = 4;
  if (!this->global_env_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteManifest.GlobalEnvVarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "estafette.ci.manifest.v1.EstafetteManifest.GlobalEnvVarsEntry.value");
      }
    };

    if (false &&
        this->global_env_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->global_env_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->global_env_vars().begin();
          it != this->global_env_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->global_env_vars().begin();
          it != this->global_env_vars().end(); ++it) {
        EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .estafette.ci.manifest.v1.EstafetteTrigger triggers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->triggers(static_cast<int>(i)), target);
  }

  // repeated .estafette.ci.manifest.v1.EstafetteStage stages = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stages_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->stages(static_cast<int>(i)), target);
  }

  // repeated .estafette.ci.manifest.v1.EstafetteRelease releases = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->releases_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->releases(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:estafette.ci.manifest.v1.EstafetteManifest)
  return target;
}

size_t EstafetteManifest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:estafette.ci.manifest.v1.EstafetteManifest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->labels().begin();
      it != this->labels().end(); ++it) {
    EstafetteManifest_LabelsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // map<string, string> global_env_vars = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->global_env_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->global_env_vars().begin();
      it != this->global_env_vars().end(); ++it) {
    EstafetteManifest_GlobalEnvVarsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // repeated .estafette.ci.manifest.v1.EstafetteTrigger triggers = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->triggers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->triggers(static_cast<int>(i)));
    }
  }

  // repeated .estafette.ci.manifest.v1.EstafetteStage stages = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->stages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stages(static_cast<int>(i)));
    }
  }

  // repeated .estafette.ci.manifest.v1.EstafetteRelease releases = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->releases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->releases(static_cast<int>(i)));
    }
  }

  // .estafette.ci.manifest.v1.EstafetteBuilder builder = 1;
  if (this->has_builder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *builder_);
  }

  // .estafette.ci.manifest.v1.EstafetteVersion version = 3;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstafetteManifest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:estafette.ci.manifest.v1.EstafetteManifest)
  GOOGLE_DCHECK_NE(&from, this);
  const EstafetteManifest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstafetteManifest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:estafette.ci.manifest.v1.EstafetteManifest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:estafette.ci.manifest.v1.EstafetteManifest)
    MergeFrom(*source);
  }
}

void EstafetteManifest::MergeFrom(const EstafetteManifest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:estafette.ci.manifest.v1.EstafetteManifest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  global_env_vars_.MergeFrom(from.global_env_vars_);
  triggers_.MergeFrom(from.triggers_);
  stages_.MergeFrom(from.stages_);
  releases_.MergeFrom(from.releases_);
  if (from.has_builder()) {
    mutable_builder()->::estafette::ci::manifest::v1::EstafetteBuilder::MergeFrom(from.builder());
  }
  if (from.has_version()) {
    mutable_version()->::estafette::ci::manifest::v1::EstafetteVersion::MergeFrom(from.version());
  }
}

void EstafetteManifest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:estafette.ci.manifest.v1.EstafetteManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstafetteManifest::CopyFrom(const EstafetteManifest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:estafette.ci.manifest.v1.EstafetteManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstafetteManifest::IsInitialized() const {
  return true;
}

void EstafetteManifest::Swap(EstafetteManifest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EstafetteManifest::InternalSwap(EstafetteManifest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  global_env_vars_.Swap(&other->global_env_vars_);
  CastToBase(&triggers_)->InternalSwap(CastToBase(&other->triggers_));
  CastToBase(&stages_)->InternalSwap(CastToBase(&other->stages_));
  CastToBase(&releases_)->InternalSwap(CastToBase(&other->releases_));
  swap(builder_, other->builder_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstafetteManifest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace manifest
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::estafette::ci::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::estafette::ci::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::estafette::ci::manifest::v1::EstafetteManifest_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::estafette::ci::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::estafette::ci::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::estafette::ci::manifest::v1::EstafetteManifest_GlobalEnvVarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::estafette::ci::manifest::v1::EstafetteManifest* Arena::CreateMaybeMessage< ::estafette::ci::manifest::v1::EstafetteManifest >(Arena* arena) {
  return Arena::CreateInternal< ::estafette::ci::manifest::v1::EstafetteManifest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
