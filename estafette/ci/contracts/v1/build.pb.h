// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/contracts/v1/build.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2fbuild_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2fbuild_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "estafette/ci/contracts/v1/git_commit.pb.h"
#include "estafette/ci/contracts/v1/label.pb.h"
#include "estafette/ci/contracts/v1/release_target.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "estafette/ci/manifest/v1/estafette_event.pb.h"
#include "estafette/ci/manifest/v1/estafette_trigger.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fcontracts_2fv1_2fbuild_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_estafette_2fci_2fcontracts_2fv1_2fbuild_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuild_2eproto;
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {
class Build;
class BuildDefaultTypeInternal;
extern BuildDefaultTypeInternal _Build_default_instance_;
}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> ::estafette::ci::contracts::v1::Build* Arena::CreateMaybeMessage<::estafette::ci::contracts::v1::Build>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {

// ===================================================================

class Build :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:estafette.ci.contracts.v1.Build) */ {
 public:
  Build();
  virtual ~Build();

  Build(const Build& from);
  Build(Build&& from) noexcept
    : Build() {
    *this = ::std::move(from);
  }

  inline Build& operator=(const Build& from) {
    CopyFrom(from);
    return *this;
  }
  inline Build& operator=(Build&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Build& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Build* internal_default_instance() {
    return reinterpret_cast<const Build*>(
               &_Build_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Build* other);
  friend void swap(Build& a, Build& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Build* New() const final {
    return CreateMaybeMessage<Build>(nullptr);
  }

  Build* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Build>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Build& from);
  void MergeFrom(const Build& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Build* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "estafette.ci.contracts.v1.Build";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuild_2eproto);
    return ::descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuild_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .estafette.ci.contracts.v1.Label labels = 9;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 9;
  ::estafette::ci::contracts::v1::Label* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::Label >*
      mutable_labels();
  const ::estafette::ci::contracts::v1::Label& labels(int index) const;
  ::estafette::ci::contracts::v1::Label* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::Label >&
      labels() const;

  // repeated .estafette.ci.contracts.v1.ReleaseTarget release_targets = 10;
  int release_targets_size() const;
  void clear_release_targets();
  static const int kReleaseTargetsFieldNumber = 10;
  ::estafette::ci::contracts::v1::ReleaseTarget* mutable_release_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::ReleaseTarget >*
      mutable_release_targets();
  const ::estafette::ci::contracts::v1::ReleaseTarget& release_targets(int index) const;
  ::estafette::ci::contracts::v1::ReleaseTarget* add_release_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::ReleaseTarget >&
      release_targets() const;

  // repeated .estafette.ci.contracts.v1.GitCommit commits = 13;
  int commits_size() const;
  void clear_commits();
  static const int kCommitsFieldNumber = 13;
  ::estafette::ci::contracts::v1::GitCommit* mutable_commits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::GitCommit >*
      mutable_commits();
  const ::estafette::ci::contracts::v1::GitCommit& commits(int index) const;
  ::estafette::ci::contracts::v1::GitCommit* add_commits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::GitCommit >&
      commits() const;

  // repeated .estafette.ci.manifest.v1.EstafetteTrigger triggers = 14;
  int triggers_size() const;
  void clear_triggers();
  static const int kTriggersFieldNumber = 14;
  ::estafette::ci::manifest::v1::EstafetteTrigger* mutable_triggers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteTrigger >*
      mutable_triggers();
  const ::estafette::ci::manifest::v1::EstafetteTrigger& triggers(int index) const;
  ::estafette::ci::manifest::v1::EstafetteTrigger* add_triggers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteTrigger >&
      triggers() const;

  // repeated .estafette.ci.manifest.v1.EstafetteEvent events = 15;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 15;
  ::estafette::ci::manifest::v1::EstafetteEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteEvent >*
      mutable_events();
  const ::estafette::ci::manifest::v1::EstafetteEvent& events(int index) const;
  ::estafette::ci::manifest::v1::EstafetteEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteEvent >&
      events() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string repo_source = 2;
  void clear_repo_source();
  static const int kRepoSourceFieldNumber = 2;
  const std::string& repo_source() const;
  void set_repo_source(const std::string& value);
  void set_repo_source(std::string&& value);
  void set_repo_source(const char* value);
  void set_repo_source(const char* value, size_t size);
  std::string* mutable_repo_source();
  std::string* release_repo_source();
  void set_allocated_repo_source(std::string* repo_source);

  // string repo_owner = 3;
  void clear_repo_owner();
  static const int kRepoOwnerFieldNumber = 3;
  const std::string& repo_owner() const;
  void set_repo_owner(const std::string& value);
  void set_repo_owner(std::string&& value);
  void set_repo_owner(const char* value);
  void set_repo_owner(const char* value, size_t size);
  std::string* mutable_repo_owner();
  std::string* release_repo_owner();
  void set_allocated_repo_owner(std::string* repo_owner);

  // string repo_name = 4;
  void clear_repo_name();
  static const int kRepoNameFieldNumber = 4;
  const std::string& repo_name() const;
  void set_repo_name(const std::string& value);
  void set_repo_name(std::string&& value);
  void set_repo_name(const char* value);
  void set_repo_name(const char* value, size_t size);
  std::string* mutable_repo_name();
  std::string* release_repo_name();
  void set_allocated_repo_name(std::string* repo_name);

  // string repo_branch = 5;
  void clear_repo_branch();
  static const int kRepoBranchFieldNumber = 5;
  const std::string& repo_branch() const;
  void set_repo_branch(const std::string& value);
  void set_repo_branch(std::string&& value);
  void set_repo_branch(const char* value);
  void set_repo_branch(const char* value, size_t size);
  std::string* mutable_repo_branch();
  std::string* release_repo_branch();
  void set_allocated_repo_branch(std::string* repo_branch);

  // string repo_revision = 6;
  void clear_repo_revision();
  static const int kRepoRevisionFieldNumber = 6;
  const std::string& repo_revision() const;
  void set_repo_revision(const std::string& value);
  void set_repo_revision(std::string&& value);
  void set_repo_revision(const char* value);
  void set_repo_revision(const char* value, size_t size);
  std::string* mutable_repo_revision();
  std::string* release_repo_revision();
  void set_allocated_repo_revision(std::string* repo_revision);

  // string build_version = 7;
  void clear_build_version();
  static const int kBuildVersionFieldNumber = 7;
  const std::string& build_version() const;
  void set_build_version(const std::string& value);
  void set_build_version(std::string&& value);
  void set_build_version(const char* value);
  void set_build_version(const char* value, size_t size);
  std::string* mutable_build_version();
  std::string* release_build_version();
  void set_allocated_build_version(std::string* build_version);

  // string build_status = 8;
  void clear_build_status();
  static const int kBuildStatusFieldNumber = 8;
  const std::string& build_status() const;
  void set_build_status(const std::string& value);
  void set_build_status(std::string&& value);
  void set_build_status(const char* value);
  void set_build_status(const char* value, size_t size);
  std::string* mutable_build_status();
  std::string* release_build_status();
  void set_allocated_build_status(std::string* build_status);

  // string manifest = 11;
  void clear_manifest();
  static const int kManifestFieldNumber = 11;
  const std::string& manifest() const;
  void set_manifest(const std::string& value);
  void set_manifest(std::string&& value);
  void set_manifest(const char* value);
  void set_manifest(const char* value, size_t size);
  std::string* mutable_manifest();
  std::string* release_manifest();
  void set_allocated_manifest(std::string* manifest);

  // string manifest_with_defaults = 12;
  void clear_manifest_with_defaults();
  static const int kManifestWithDefaultsFieldNumber = 12;
  const std::string& manifest_with_defaults() const;
  void set_manifest_with_defaults(const std::string& value);
  void set_manifest_with_defaults(std::string&& value);
  void set_manifest_with_defaults(const char* value);
  void set_manifest_with_defaults(const char* value, size_t size);
  std::string* mutable_manifest_with_defaults();
  std::string* release_manifest_with_defaults();
  void set_allocated_manifest_with_defaults(std::string* manifest_with_defaults);

  // .google.protobuf.Timestamp inserted_at_time = 16;
  bool has_inserted_at_time() const;
  void clear_inserted_at_time();
  static const int kInsertedAtTimeFieldNumber = 16;
  const PROTOBUF_NAMESPACE_ID::Timestamp& inserted_at_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_inserted_at_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_inserted_at_time();
  void set_allocated_inserted_at_time(PROTOBUF_NAMESPACE_ID::Timestamp* inserted_at_time);

  // .google.protobuf.Timestamp updated_at_time = 17;
  bool has_updated_at_time() const;
  void clear_updated_at_time();
  static const int kUpdatedAtTimeFieldNumber = 17;
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at_time();
  void set_allocated_updated_at_time(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_time);

  // .google.protobuf.Duration duration = 18;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 18;
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);

  // @@protoc_insertion_point(class_scope:estafette.ci.contracts.v1.Build)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::Label > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::ReleaseTarget > release_targets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::GitCommit > commits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteTrigger > triggers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteEvent > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_branch_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_revision_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manifest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manifest_with_defaults_;
  PROTOBUF_NAMESPACE_ID::Timestamp* inserted_at_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_time_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estafette_2fci_2fcontracts_2fv1_2fbuild_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Build

// string id = 1;
inline void Build::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Build::id() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.id)
  return id_.GetNoArena();
}
inline void Build::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.Build.id)
}
inline void Build::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.Build.id)
}
inline void Build::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.Build.id)
}
inline void Build::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.Build.id)
}
inline std::string* Build::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Build::release_id() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.id)
}

// string repo_source = 2;
inline void Build::clear_repo_source() {
  repo_source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Build::repo_source() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.repo_source)
  return repo_source_.GetNoArena();
}
inline void Build::set_repo_source(const std::string& value) {
  
  repo_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.Build.repo_source)
}
inline void Build::set_repo_source(std::string&& value) {
  
  repo_source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.Build.repo_source)
}
inline void Build::set_repo_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.Build.repo_source)
}
inline void Build::set_repo_source(const char* value, size_t size) {
  
  repo_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.Build.repo_source)
}
inline std::string* Build::mutable_repo_source() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.repo_source)
  return repo_source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Build::release_repo_source() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.repo_source)
  
  return repo_source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_repo_source(std::string* repo_source) {
  if (repo_source != nullptr) {
    
  } else {
    
  }
  repo_source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repo_source);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.repo_source)
}

// string repo_owner = 3;
inline void Build::clear_repo_owner() {
  repo_owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Build::repo_owner() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.repo_owner)
  return repo_owner_.GetNoArena();
}
inline void Build::set_repo_owner(const std::string& value) {
  
  repo_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.Build.repo_owner)
}
inline void Build::set_repo_owner(std::string&& value) {
  
  repo_owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.Build.repo_owner)
}
inline void Build::set_repo_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.Build.repo_owner)
}
inline void Build::set_repo_owner(const char* value, size_t size) {
  
  repo_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.Build.repo_owner)
}
inline std::string* Build::mutable_repo_owner() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.repo_owner)
  return repo_owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Build::release_repo_owner() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.repo_owner)
  
  return repo_owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_repo_owner(std::string* repo_owner) {
  if (repo_owner != nullptr) {
    
  } else {
    
  }
  repo_owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repo_owner);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.repo_owner)
}

// string repo_name = 4;
inline void Build::clear_repo_name() {
  repo_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Build::repo_name() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.repo_name)
  return repo_name_.GetNoArena();
}
inline void Build::set_repo_name(const std::string& value) {
  
  repo_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.Build.repo_name)
}
inline void Build::set_repo_name(std::string&& value) {
  
  repo_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.Build.repo_name)
}
inline void Build::set_repo_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.Build.repo_name)
}
inline void Build::set_repo_name(const char* value, size_t size) {
  
  repo_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.Build.repo_name)
}
inline std::string* Build::mutable_repo_name() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.repo_name)
  return repo_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Build::release_repo_name() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.repo_name)
  
  return repo_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_repo_name(std::string* repo_name) {
  if (repo_name != nullptr) {
    
  } else {
    
  }
  repo_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repo_name);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.repo_name)
}

// string repo_branch = 5;
inline void Build::clear_repo_branch() {
  repo_branch_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Build::repo_branch() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.repo_branch)
  return repo_branch_.GetNoArena();
}
inline void Build::set_repo_branch(const std::string& value) {
  
  repo_branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.Build.repo_branch)
}
inline void Build::set_repo_branch(std::string&& value) {
  
  repo_branch_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.Build.repo_branch)
}
inline void Build::set_repo_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.Build.repo_branch)
}
inline void Build::set_repo_branch(const char* value, size_t size) {
  
  repo_branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.Build.repo_branch)
}
inline std::string* Build::mutable_repo_branch() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.repo_branch)
  return repo_branch_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Build::release_repo_branch() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.repo_branch)
  
  return repo_branch_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_repo_branch(std::string* repo_branch) {
  if (repo_branch != nullptr) {
    
  } else {
    
  }
  repo_branch_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repo_branch);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.repo_branch)
}

// string repo_revision = 6;
inline void Build::clear_repo_revision() {
  repo_revision_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Build::repo_revision() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.repo_revision)
  return repo_revision_.GetNoArena();
}
inline void Build::set_repo_revision(const std::string& value) {
  
  repo_revision_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.Build.repo_revision)
}
inline void Build::set_repo_revision(std::string&& value) {
  
  repo_revision_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.Build.repo_revision)
}
inline void Build::set_repo_revision(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_revision_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.Build.repo_revision)
}
inline void Build::set_repo_revision(const char* value, size_t size) {
  
  repo_revision_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.Build.repo_revision)
}
inline std::string* Build::mutable_repo_revision() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.repo_revision)
  return repo_revision_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Build::release_repo_revision() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.repo_revision)
  
  return repo_revision_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_repo_revision(std::string* repo_revision) {
  if (repo_revision != nullptr) {
    
  } else {
    
  }
  repo_revision_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repo_revision);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.repo_revision)
}

// string build_version = 7;
inline void Build::clear_build_version() {
  build_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Build::build_version() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.build_version)
  return build_version_.GetNoArena();
}
inline void Build::set_build_version(const std::string& value) {
  
  build_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.Build.build_version)
}
inline void Build::set_build_version(std::string&& value) {
  
  build_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.Build.build_version)
}
inline void Build::set_build_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.Build.build_version)
}
inline void Build::set_build_version(const char* value, size_t size) {
  
  build_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.Build.build_version)
}
inline std::string* Build::mutable_build_version() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.build_version)
  return build_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Build::release_build_version() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.build_version)
  
  return build_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_build_version(std::string* build_version) {
  if (build_version != nullptr) {
    
  } else {
    
  }
  build_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_version);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.build_version)
}

// string build_status = 8;
inline void Build::clear_build_status() {
  build_status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Build::build_status() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.build_status)
  return build_status_.GetNoArena();
}
inline void Build::set_build_status(const std::string& value) {
  
  build_status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.Build.build_status)
}
inline void Build::set_build_status(std::string&& value) {
  
  build_status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.Build.build_status)
}
inline void Build::set_build_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.Build.build_status)
}
inline void Build::set_build_status(const char* value, size_t size) {
  
  build_status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.Build.build_status)
}
inline std::string* Build::mutable_build_status() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.build_status)
  return build_status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Build::release_build_status() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.build_status)
  
  return build_status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_build_status(std::string* build_status) {
  if (build_status != nullptr) {
    
  } else {
    
  }
  build_status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_status);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.build_status)
}

// repeated .estafette.ci.contracts.v1.Label labels = 9;
inline int Build::labels_size() const {
  return labels_.size();
}
inline ::estafette::ci::contracts::v1::Label* Build::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::Label >*
Build::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:estafette.ci.contracts.v1.Build.labels)
  return &labels_;
}
inline const ::estafette::ci::contracts::v1::Label& Build::labels(int index) const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.labels)
  return labels_.Get(index);
}
inline ::estafette::ci::contracts::v1::Label* Build::add_labels() {
  // @@protoc_insertion_point(field_add:estafette.ci.contracts.v1.Build.labels)
  return labels_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::Label >&
Build::labels() const {
  // @@protoc_insertion_point(field_list:estafette.ci.contracts.v1.Build.labels)
  return labels_;
}

// repeated .estafette.ci.contracts.v1.ReleaseTarget release_targets = 10;
inline int Build::release_targets_size() const {
  return release_targets_.size();
}
inline ::estafette::ci::contracts::v1::ReleaseTarget* Build::mutable_release_targets(int index) {
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.release_targets)
  return release_targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::ReleaseTarget >*
Build::mutable_release_targets() {
  // @@protoc_insertion_point(field_mutable_list:estafette.ci.contracts.v1.Build.release_targets)
  return &release_targets_;
}
inline const ::estafette::ci::contracts::v1::ReleaseTarget& Build::release_targets(int index) const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.release_targets)
  return release_targets_.Get(index);
}
inline ::estafette::ci::contracts::v1::ReleaseTarget* Build::add_release_targets() {
  // @@protoc_insertion_point(field_add:estafette.ci.contracts.v1.Build.release_targets)
  return release_targets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::ReleaseTarget >&
Build::release_targets() const {
  // @@protoc_insertion_point(field_list:estafette.ci.contracts.v1.Build.release_targets)
  return release_targets_;
}

// string manifest = 11;
inline void Build::clear_manifest() {
  manifest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Build::manifest() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.manifest)
  return manifest_.GetNoArena();
}
inline void Build::set_manifest(const std::string& value) {
  
  manifest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.Build.manifest)
}
inline void Build::set_manifest(std::string&& value) {
  
  manifest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.Build.manifest)
}
inline void Build::set_manifest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manifest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.Build.manifest)
}
inline void Build::set_manifest(const char* value, size_t size) {
  
  manifest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.Build.manifest)
}
inline std::string* Build::mutable_manifest() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.manifest)
  return manifest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Build::release_manifest() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.manifest)
  
  return manifest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_manifest(std::string* manifest) {
  if (manifest != nullptr) {
    
  } else {
    
  }
  manifest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manifest);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.manifest)
}

// string manifest_with_defaults = 12;
inline void Build::clear_manifest_with_defaults() {
  manifest_with_defaults_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Build::manifest_with_defaults() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.manifest_with_defaults)
  return manifest_with_defaults_.GetNoArena();
}
inline void Build::set_manifest_with_defaults(const std::string& value) {
  
  manifest_with_defaults_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.Build.manifest_with_defaults)
}
inline void Build::set_manifest_with_defaults(std::string&& value) {
  
  manifest_with_defaults_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.Build.manifest_with_defaults)
}
inline void Build::set_manifest_with_defaults(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manifest_with_defaults_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.Build.manifest_with_defaults)
}
inline void Build::set_manifest_with_defaults(const char* value, size_t size) {
  
  manifest_with_defaults_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.Build.manifest_with_defaults)
}
inline std::string* Build::mutable_manifest_with_defaults() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.manifest_with_defaults)
  return manifest_with_defaults_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Build::release_manifest_with_defaults() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.manifest_with_defaults)
  
  return manifest_with_defaults_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_manifest_with_defaults(std::string* manifest_with_defaults) {
  if (manifest_with_defaults != nullptr) {
    
  } else {
    
  }
  manifest_with_defaults_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manifest_with_defaults);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.manifest_with_defaults)
}

// repeated .estafette.ci.contracts.v1.GitCommit commits = 13;
inline int Build::commits_size() const {
  return commits_.size();
}
inline ::estafette::ci::contracts::v1::GitCommit* Build::mutable_commits(int index) {
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.commits)
  return commits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::GitCommit >*
Build::mutable_commits() {
  // @@protoc_insertion_point(field_mutable_list:estafette.ci.contracts.v1.Build.commits)
  return &commits_;
}
inline const ::estafette::ci::contracts::v1::GitCommit& Build::commits(int index) const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.commits)
  return commits_.Get(index);
}
inline ::estafette::ci::contracts::v1::GitCommit* Build::add_commits() {
  // @@protoc_insertion_point(field_add:estafette.ci.contracts.v1.Build.commits)
  return commits_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::GitCommit >&
Build::commits() const {
  // @@protoc_insertion_point(field_list:estafette.ci.contracts.v1.Build.commits)
  return commits_;
}

// repeated .estafette.ci.manifest.v1.EstafetteTrigger triggers = 14;
inline int Build::triggers_size() const {
  return triggers_.size();
}
inline ::estafette::ci::manifest::v1::EstafetteTrigger* Build::mutable_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.triggers)
  return triggers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteTrigger >*
Build::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:estafette.ci.contracts.v1.Build.triggers)
  return &triggers_;
}
inline const ::estafette::ci::manifest::v1::EstafetteTrigger& Build::triggers(int index) const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.triggers)
  return triggers_.Get(index);
}
inline ::estafette::ci::manifest::v1::EstafetteTrigger* Build::add_triggers() {
  // @@protoc_insertion_point(field_add:estafette.ci.contracts.v1.Build.triggers)
  return triggers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteTrigger >&
Build::triggers() const {
  // @@protoc_insertion_point(field_list:estafette.ci.contracts.v1.Build.triggers)
  return triggers_;
}

// repeated .estafette.ci.manifest.v1.EstafetteEvent events = 15;
inline int Build::events_size() const {
  return events_.size();
}
inline ::estafette::ci::manifest::v1::EstafetteEvent* Build::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteEvent >*
Build::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:estafette.ci.contracts.v1.Build.events)
  return &events_;
}
inline const ::estafette::ci::manifest::v1::EstafetteEvent& Build::events(int index) const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.events)
  return events_.Get(index);
}
inline ::estafette::ci::manifest::v1::EstafetteEvent* Build::add_events() {
  // @@protoc_insertion_point(field_add:estafette.ci.contracts.v1.Build.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteEvent >&
Build::events() const {
  // @@protoc_insertion_point(field_list:estafette.ci.contracts.v1.Build.events)
  return events_;
}

// .google.protobuf.Timestamp inserted_at_time = 16;
inline bool Build::has_inserted_at_time() const {
  return this != internal_default_instance() && inserted_at_time_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Build::inserted_at_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = inserted_at_time_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.inserted_at_time)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Build::release_inserted_at_time() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.inserted_at_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = inserted_at_time_;
  inserted_at_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Build::mutable_inserted_at_time() {
  
  if (inserted_at_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    inserted_at_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.inserted_at_time)
  return inserted_at_time_;
}
inline void Build::set_allocated_inserted_at_time(PROTOBUF_NAMESPACE_ID::Timestamp* inserted_at_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inserted_at_time_);
  }
  if (inserted_at_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inserted_at_time)->GetArena();
    if (message_arena != submessage_arena) {
      inserted_at_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inserted_at_time, submessage_arena);
    }
    
  } else {
    
  }
  inserted_at_time_ = inserted_at_time;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.inserted_at_time)
}

// .google.protobuf.Timestamp updated_at_time = 17;
inline bool Build::has_updated_at_time() const {
  return this != internal_default_instance() && updated_at_time_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Build::updated_at_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_time_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.updated_at_time)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Build::release_updated_at_time() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.updated_at_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_time_;
  updated_at_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Build::mutable_updated_at_time() {
  
  if (updated_at_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    updated_at_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.updated_at_time)
  return updated_at_time_;
}
inline void Build::set_allocated_updated_at_time(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_time_);
  }
  if (updated_at_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_time)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at_time, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_time_ = updated_at_time;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.updated_at_time)
}

// .google.protobuf.Duration duration = 18;
inline bool Build::has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Build::duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.Build.duration)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Duration* Build::release_duration() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.Build.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Build::mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.Build.duration)
  return duration_;
}
inline void Build::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.Build.duration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2fbuild_2eproto
