// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/contracts/v1/tail_log_line.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2ftail_5flog_5fline_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2ftail_5flog_5fline_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "estafette/ci/contracts/v1/build_log_line.pb.h"
#include "estafette/ci/contracts/v1/build_log_step_docker_image.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fcontracts_2fv1_2ftail_5flog_5fline_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_estafette_2fci_2fcontracts_2fv1_2ftail_5flog_5fline_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fcontracts_2fv1_2ftail_5flog_5fline_2eproto;
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {
class TailLogLine;
class TailLogLineDefaultTypeInternal;
extern TailLogLineDefaultTypeInternal _TailLogLine_default_instance_;
}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> ::estafette::ci::contracts::v1::TailLogLine* Arena::CreateMaybeMessage<::estafette::ci::contracts::v1::TailLogLine>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {

// ===================================================================

class TailLogLine :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:estafette.ci.contracts.v1.TailLogLine) */ {
 public:
  TailLogLine();
  virtual ~TailLogLine();

  TailLogLine(const TailLogLine& from);
  TailLogLine(TailLogLine&& from) noexcept
    : TailLogLine() {
    *this = ::std::move(from);
  }

  inline TailLogLine& operator=(const TailLogLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline TailLogLine& operator=(TailLogLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TailLogLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TailLogLine* internal_default_instance() {
    return reinterpret_cast<const TailLogLine*>(
               &_TailLogLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TailLogLine* other);
  friend void swap(TailLogLine& a, TailLogLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TailLogLine* New() const final {
    return CreateMaybeMessage<TailLogLine>(nullptr);
  }

  TailLogLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TailLogLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TailLogLine& from);
  void MergeFrom(const TailLogLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TailLogLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "estafette.ci.contracts.v1.TailLogLine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estafette_2fci_2fcontracts_2fv1_2ftail_5flog_5fline_2eproto);
    return ::descriptor_table_estafette_2fci_2fcontracts_2fv1_2ftail_5flog_5fline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string step = 1;
  void clear_step();
  static const int kStepFieldNumber = 1;
  const std::string& step() const;
  void set_step(const std::string& value);
  void set_step(std::string&& value);
  void set_step(const char* value);
  void set_step(const char* value, size_t size);
  std::string* mutable_step();
  std::string* release_step();
  void set_allocated_step(std::string* step);

  // string status = 6;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);

  // .estafette.ci.contracts.v1.BuildLogLine log_line = 2;
  bool has_log_line() const;
  void clear_log_line();
  static const int kLogLineFieldNumber = 2;
  const ::estafette::ci::contracts::v1::BuildLogLine& log_line() const;
  ::estafette::ci::contracts::v1::BuildLogLine* release_log_line();
  ::estafette::ci::contracts::v1::BuildLogLine* mutable_log_line();
  void set_allocated_log_line(::estafette::ci::contracts::v1::BuildLogLine* log_line);

  // .estafette.ci.contracts.v1.BuildLogStepDockerImage image = 3;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 3;
  const ::estafette::ci::contracts::v1::BuildLogStepDockerImage& image() const;
  ::estafette::ci::contracts::v1::BuildLogStepDockerImage* release_image();
  ::estafette::ci::contracts::v1::BuildLogStepDockerImage* mutable_image();
  void set_allocated_image(::estafette::ci::contracts::v1::BuildLogStepDockerImage* image);

  // .google.protobuf.Duration duration = 4;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 4;
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);

  // int64 exit_code = 5;
  void clear_exit_code();
  static const int kExitCodeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 exit_code() const;
  void set_exit_code(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool auto_injected = 7;
  void clear_auto_injected();
  static const int kAutoInjectedFieldNumber = 7;
  bool auto_injected() const;
  void set_auto_injected(bool value);

  // @@protoc_insertion_point(class_scope:estafette.ci.contracts.v1.TailLogLine)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr step_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::estafette::ci::contracts::v1::BuildLogLine* log_line_;
  ::estafette::ci::contracts::v1::BuildLogStepDockerImage* image_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  ::PROTOBUF_NAMESPACE_ID::int64 exit_code_;
  bool auto_injected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estafette_2fci_2fcontracts_2fv1_2ftail_5flog_5fline_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TailLogLine

// string step = 1;
inline void TailLogLine::clear_step() {
  step_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TailLogLine::step() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.TailLogLine.step)
  return step_.GetNoArena();
}
inline void TailLogLine::set_step(const std::string& value) {
  
  step_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.TailLogLine.step)
}
inline void TailLogLine::set_step(std::string&& value) {
  
  step_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.TailLogLine.step)
}
inline void TailLogLine::set_step(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  step_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.TailLogLine.step)
}
inline void TailLogLine::set_step(const char* value, size_t size) {
  
  step_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.TailLogLine.step)
}
inline std::string* TailLogLine::mutable_step() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.TailLogLine.step)
  return step_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TailLogLine::release_step() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.TailLogLine.step)
  
  return step_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TailLogLine::set_allocated_step(std::string* step) {
  if (step != nullptr) {
    
  } else {
    
  }
  step_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), step);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.TailLogLine.step)
}

// .estafette.ci.contracts.v1.BuildLogLine log_line = 2;
inline bool TailLogLine::has_log_line() const {
  return this != internal_default_instance() && log_line_ != nullptr;
}
inline const ::estafette::ci::contracts::v1::BuildLogLine& TailLogLine::log_line() const {
  const ::estafette::ci::contracts::v1::BuildLogLine* p = log_line_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.TailLogLine.log_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::contracts::v1::BuildLogLine*>(
      &::estafette::ci::contracts::v1::_BuildLogLine_default_instance_);
}
inline ::estafette::ci::contracts::v1::BuildLogLine* TailLogLine::release_log_line() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.TailLogLine.log_line)
  
  ::estafette::ci::contracts::v1::BuildLogLine* temp = log_line_;
  log_line_ = nullptr;
  return temp;
}
inline ::estafette::ci::contracts::v1::BuildLogLine* TailLogLine::mutable_log_line() {
  
  if (log_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::contracts::v1::BuildLogLine>(GetArenaNoVirtual());
    log_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.TailLogLine.log_line)
  return log_line_;
}
inline void TailLogLine::set_allocated_log_line(::estafette::ci::contracts::v1::BuildLogLine* log_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_line_);
  }
  if (log_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      log_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_line, submessage_arena);
    }
    
  } else {
    
  }
  log_line_ = log_line;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.TailLogLine.log_line)
}

// .estafette.ci.contracts.v1.BuildLogStepDockerImage image = 3;
inline bool TailLogLine::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline const ::estafette::ci::contracts::v1::BuildLogStepDockerImage& TailLogLine::image() const {
  const ::estafette::ci::contracts::v1::BuildLogStepDockerImage* p = image_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.TailLogLine.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::contracts::v1::BuildLogStepDockerImage*>(
      &::estafette::ci::contracts::v1::_BuildLogStepDockerImage_default_instance_);
}
inline ::estafette::ci::contracts::v1::BuildLogStepDockerImage* TailLogLine::release_image() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.TailLogLine.image)
  
  ::estafette::ci::contracts::v1::BuildLogStepDockerImage* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::estafette::ci::contracts::v1::BuildLogStepDockerImage* TailLogLine::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::contracts::v1::BuildLogStepDockerImage>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.TailLogLine.image)
  return image_;
}
inline void TailLogLine::set_allocated_image(::estafette::ci::contracts::v1::BuildLogStepDockerImage* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.TailLogLine.image)
}

// .google.protobuf.Duration duration = 4;
inline bool TailLogLine::has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TailLogLine::duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.TailLogLine.duration)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Duration* TailLogLine::release_duration() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.TailLogLine.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TailLogLine::mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.TailLogLine.duration)
  return duration_;
}
inline void TailLogLine::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.TailLogLine.duration)
}

// int64 exit_code = 5;
inline void TailLogLine::clear_exit_code() {
  exit_code_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TailLogLine::exit_code() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.TailLogLine.exit_code)
  return exit_code_;
}
inline void TailLogLine::set_exit_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exit_code_ = value;
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.TailLogLine.exit_code)
}

// string status = 6;
inline void TailLogLine::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TailLogLine::status() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.TailLogLine.status)
  return status_.GetNoArena();
}
inline void TailLogLine::set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.TailLogLine.status)
}
inline void TailLogLine::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.TailLogLine.status)
}
inline void TailLogLine::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.TailLogLine.status)
}
inline void TailLogLine::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.TailLogLine.status)
}
inline std::string* TailLogLine::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.TailLogLine.status)
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TailLogLine::release_status() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.TailLogLine.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TailLogLine::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.TailLogLine.status)
}

// bool auto_injected = 7;
inline void TailLogLine::clear_auto_injected() {
  auto_injected_ = false;
}
inline bool TailLogLine::auto_injected() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.TailLogLine.auto_injected)
  return auto_injected_;
}
inline void TailLogLine::set_auto_injected(bool value) {
  
  auto_injected_ = value;
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.TailLogLine.auto_injected)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2ftail_5flog_5fline_2eproto
