// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/contracts/v1/builder_config.proto

#include "estafette/ci/contracts/v1/builder_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fcontracts_2fv1_2fbuild_5fparams_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildParamsConfig_estafette_2fci_2fcontracts_2fv1_2fbuild_5fparams_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fcontracts_2fv1_2fbuild_5fversion_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildVersionConfig_estafette_2fci_2fcontracts_2fv1_2fbuild_5fversion_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fcontracts_2fv1_2fci_5fserver_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CiServerConfig_estafette_2fci_2fcontracts_2fv1_2fci_5fserver_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fcontracts_2fv1_2fcredential_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CredentialConfig_estafette_2fci_2fcontracts_2fv1_2fcredential_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fcontracts_2fv1_2fgit_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GitConfig_estafette_2fci_2fcontracts_2fv1_2fgit_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fcontracts_2fv1_2frelease_5fparams_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseParamsConfig_estafette_2fci_2fcontracts_2fv1_2frelease_5fparams_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fcontracts_2fv1_2ftrusted_5fimage_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrustedImageConfig_estafette_2fci_2fcontracts_2fv1_2ftrusted_5fimage_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_EstafetteEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_EstafetteManifest_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto;
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {
class BuilderConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuilderConfig> _instance;
} _BuilderConfig_default_instance_;
}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette
static void InitDefaultsscc_info_BuilderConfig_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::estafette::ci::contracts::v1::_BuilderConfig_default_instance_;
    new (ptr) ::estafette::ci::contracts::v1::BuilderConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::estafette::ci::contracts::v1::BuilderConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_BuilderConfig_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsscc_info_BuilderConfig_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto}, {
      &scc_info_EstafetteManifest_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto.base,
      &scc_info_EstafetteEvent_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto.base,
      &scc_info_CiServerConfig_estafette_2fci_2fcontracts_2fv1_2fci_5fserver_5fconfig_2eproto.base,
      &scc_info_BuildParamsConfig_estafette_2fci_2fcontracts_2fv1_2fbuild_5fparams_5fconfig_2eproto.base,
      &scc_info_ReleaseParamsConfig_estafette_2fci_2fcontracts_2fv1_2frelease_5fparams_5fconfig_2eproto.base,
      &scc_info_GitConfig_estafette_2fci_2fcontracts_2fv1_2fgit_5fconfig_2eproto.base,
      &scc_info_BuildVersionConfig_estafette_2fci_2fcontracts_2fv1_2fbuild_5fversion_5fconfig_2eproto.base,
      &scc_info_CredentialConfig_estafette_2fci_2fcontracts_2fv1_2fcredential_5fconfig_2eproto.base,
      &scc_info_TrustedImageConfig_estafette_2fci_2fcontracts_2fv1_2ftrusted_5fimage_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, action_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, track_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, registry_mirror_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, docker_daemon_mtu_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, manifest_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, job_name_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, release_name_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, events_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, ci_server_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, build_params_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, release_params_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, git_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, build_version_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, credentials_),
  PROTOBUF_FIELD_OFFSET(::estafette::ci::contracts::v1::BuilderConfig, trusted_images_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::estafette::ci::contracts::v1::BuilderConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::estafette::ci::contracts::v1::_BuilderConfig_default_instance_),
};

const char descriptor_table_protodef_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto[] =
  "\n.estafette/ci/contracts/v1/builder_conf"
  "ig.proto\022\031estafette.ci.contracts.v1\0323est"
  "afette/ci/contracts/v1/build_params_conf"
  "ig.proto\0324estafette/ci/contracts/v1/buil"
  "d_version_config.proto\0320estafette/ci/con"
  "tracts/v1/ci_server_config.proto\0321estafe"
  "tte/ci/contracts/v1/credential_config.pr"
  "oto\032*estafette/ci/contracts/v1/git_confi"
  "g.proto\0325estafette/ci/contracts/v1/relea"
  "se_params_config.proto\0324estafette/ci/con"
  "tracts/v1/trusted_image_config.proto\032.es"
  "tafette/ci/manifest/v1/estafette_event.p"
  "roto\0321estafette/ci/manifest/v1/estafette"
  "_manifest.proto\"\317\005\n\rBuilderConfig\022\016\n\006act"
  "ion\030\001 \001(\t\022\r\n\005track\030\002 \001(\t\022\027\n\017registry_mir"
  "ror\030\003 \001(\t\022\031\n\021docker_daemon_mtu\030\004 \001(\t\022=\n\010"
  "manifest\030\005 \001(\0132+.estafette.ci.manifest.v"
  "1.EstafetteManifest\022\020\n\010job_name\030\006 \001(\t\022\024\n"
  "\014release_name\030\007 \001(\t\0228\n\006events\030\010 \003(\0132(.es"
  "tafette.ci.manifest.v1.EstafetteEvent\022<\n"
  "\tci_server\030\t \001(\0132).estafette.ci.contract"
  "s.v1.CiServerConfig\022B\n\014build_params\030\n \001("
  "\0132,.estafette.ci.contracts.v1.BuildParam"
  "sConfig\022F\n\016release_params\030\013 \001(\0132..estafe"
  "tte.ci.contracts.v1.ReleaseParamsConfig\022"
  "1\n\003git\030\014 \001(\0132$.estafette.ci.contracts.v1"
  ".GitConfig\022D\n\rbuild_version\030\r \001(\0132-.esta"
  "fette.ci.contracts.v1.BuildVersionConfig"
  "\022@\n\013credentials\030\016 \003(\0132+.estafette.ci.con"
  "tracts.v1.CredentialConfig\022E\n\016trusted_im"
  "ages\030\017 \003(\0132-.estafette.ci.contracts.v1.T"
  "rustedImageConfigB{\n\035com.estafette.ci.co"
  "ntracts.v1P\001Z<github.com/estafette/estaf"
  "ette-ci-protos-golang/contracts/v1\252\002\031Est"
  "afette.Ci.Contracts.V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto_deps[9] = {
  &::descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuild_5fparams_5fconfig_2eproto,
  &::descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuild_5fversion_5fconfig_2eproto,
  &::descriptor_table_estafette_2fci_2fcontracts_2fv1_2fci_5fserver_5fconfig_2eproto,
  &::descriptor_table_estafette_2fci_2fcontracts_2fv1_2fcredential_5fconfig_2eproto,
  &::descriptor_table_estafette_2fci_2fcontracts_2fv1_2fgit_5fconfig_2eproto,
  &::descriptor_table_estafette_2fci_2fcontracts_2fv1_2frelease_5fparams_5fconfig_2eproto,
  &::descriptor_table_estafette_2fci_2fcontracts_2fv1_2ftrusted_5fimage_5fconfig_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fevent_2eproto,
  &::descriptor_table_estafette_2fci_2fmanifest_2fv1_2festafette_5fmanifest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto_sccs[1] = {
  &scc_info_BuilderConfig_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto_once;
static bool descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto = {
  &descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto_initialized, descriptor_table_protodef_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto, "estafette/ci/contracts/v1/builder_config.proto", 1390,
  &descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto_once, descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto_sccs, descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto::offsets,
  file_level_metadata_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto, 1, file_level_enum_descriptors_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto, file_level_service_descriptors_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto), true);
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {

// ===================================================================

void BuilderConfig::InitAsDefaultInstance() {
  ::estafette::ci::contracts::v1::_BuilderConfig_default_instance_._instance.get_mutable()->manifest_ = const_cast< ::estafette::ci::manifest::v1::EstafetteManifest*>(
      ::estafette::ci::manifest::v1::EstafetteManifest::internal_default_instance());
  ::estafette::ci::contracts::v1::_BuilderConfig_default_instance_._instance.get_mutable()->ci_server_ = const_cast< ::estafette::ci::contracts::v1::CiServerConfig*>(
      ::estafette::ci::contracts::v1::CiServerConfig::internal_default_instance());
  ::estafette::ci::contracts::v1::_BuilderConfig_default_instance_._instance.get_mutable()->build_params_ = const_cast< ::estafette::ci::contracts::v1::BuildParamsConfig*>(
      ::estafette::ci::contracts::v1::BuildParamsConfig::internal_default_instance());
  ::estafette::ci::contracts::v1::_BuilderConfig_default_instance_._instance.get_mutable()->release_params_ = const_cast< ::estafette::ci::contracts::v1::ReleaseParamsConfig*>(
      ::estafette::ci::contracts::v1::ReleaseParamsConfig::internal_default_instance());
  ::estafette::ci::contracts::v1::_BuilderConfig_default_instance_._instance.get_mutable()->git_ = const_cast< ::estafette::ci::contracts::v1::GitConfig*>(
      ::estafette::ci::contracts::v1::GitConfig::internal_default_instance());
  ::estafette::ci::contracts::v1::_BuilderConfig_default_instance_._instance.get_mutable()->build_version_ = const_cast< ::estafette::ci::contracts::v1::BuildVersionConfig*>(
      ::estafette::ci::contracts::v1::BuildVersionConfig::internal_default_instance());
}
class BuilderConfig::HasBitSetters {
 public:
  static const ::estafette::ci::manifest::v1::EstafetteManifest& manifest(const BuilderConfig* msg);
  static const ::estafette::ci::contracts::v1::CiServerConfig& ci_server(const BuilderConfig* msg);
  static const ::estafette::ci::contracts::v1::BuildParamsConfig& build_params(const BuilderConfig* msg);
  static const ::estafette::ci::contracts::v1::ReleaseParamsConfig& release_params(const BuilderConfig* msg);
  static const ::estafette::ci::contracts::v1::GitConfig& git(const BuilderConfig* msg);
  static const ::estafette::ci::contracts::v1::BuildVersionConfig& build_version(const BuilderConfig* msg);
};

const ::estafette::ci::manifest::v1::EstafetteManifest&
BuilderConfig::HasBitSetters::manifest(const BuilderConfig* msg) {
  return *msg->manifest_;
}
const ::estafette::ci::contracts::v1::CiServerConfig&
BuilderConfig::HasBitSetters::ci_server(const BuilderConfig* msg) {
  return *msg->ci_server_;
}
const ::estafette::ci::contracts::v1::BuildParamsConfig&
BuilderConfig::HasBitSetters::build_params(const BuilderConfig* msg) {
  return *msg->build_params_;
}
const ::estafette::ci::contracts::v1::ReleaseParamsConfig&
BuilderConfig::HasBitSetters::release_params(const BuilderConfig* msg) {
  return *msg->release_params_;
}
const ::estafette::ci::contracts::v1::GitConfig&
BuilderConfig::HasBitSetters::git(const BuilderConfig* msg) {
  return *msg->git_;
}
const ::estafette::ci::contracts::v1::BuildVersionConfig&
BuilderConfig::HasBitSetters::build_version(const BuilderConfig* msg) {
  return *msg->build_version_;
}
void BuilderConfig::clear_manifest() {
  if (GetArenaNoVirtual() == nullptr && manifest_ != nullptr) {
    delete manifest_;
  }
  manifest_ = nullptr;
}
void BuilderConfig::clear_events() {
  events_.Clear();
}
void BuilderConfig::clear_ci_server() {
  if (GetArenaNoVirtual() == nullptr && ci_server_ != nullptr) {
    delete ci_server_;
  }
  ci_server_ = nullptr;
}
void BuilderConfig::clear_build_params() {
  if (GetArenaNoVirtual() == nullptr && build_params_ != nullptr) {
    delete build_params_;
  }
  build_params_ = nullptr;
}
void BuilderConfig::clear_release_params() {
  if (GetArenaNoVirtual() == nullptr && release_params_ != nullptr) {
    delete release_params_;
  }
  release_params_ = nullptr;
}
void BuilderConfig::clear_git() {
  if (GetArenaNoVirtual() == nullptr && git_ != nullptr) {
    delete git_;
  }
  git_ = nullptr;
}
void BuilderConfig::clear_build_version() {
  if (GetArenaNoVirtual() == nullptr && build_version_ != nullptr) {
    delete build_version_;
  }
  build_version_ = nullptr;
}
void BuilderConfig::clear_credentials() {
  credentials_.Clear();
}
void BuilderConfig::clear_trusted_images() {
  trusted_images_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuilderConfig::kActionFieldNumber;
const int BuilderConfig::kTrackFieldNumber;
const int BuilderConfig::kRegistryMirrorFieldNumber;
const int BuilderConfig::kDockerDaemonMtuFieldNumber;
const int BuilderConfig::kManifestFieldNumber;
const int BuilderConfig::kJobNameFieldNumber;
const int BuilderConfig::kReleaseNameFieldNumber;
const int BuilderConfig::kEventsFieldNumber;
const int BuilderConfig::kCiServerFieldNumber;
const int BuilderConfig::kBuildParamsFieldNumber;
const int BuilderConfig::kReleaseParamsFieldNumber;
const int BuilderConfig::kGitFieldNumber;
const int BuilderConfig::kBuildVersionFieldNumber;
const int BuilderConfig::kCredentialsFieldNumber;
const int BuilderConfig::kTrustedImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuilderConfig::BuilderConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:estafette.ci.contracts.v1.BuilderConfig)
}
BuilderConfig::BuilderConfig(const BuilderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      events_(from.events_),
      credentials_(from.credentials_),
      trusted_images_(from.trusted_images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.action().size() > 0) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  track_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.track().size() > 0) {
    track_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  registry_mirror_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.registry_mirror().size() > 0) {
    registry_mirror_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.registry_mirror_);
  }
  docker_daemon_mtu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.docker_daemon_mtu().size() > 0) {
    docker_daemon_mtu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.docker_daemon_mtu_);
  }
  job_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.job_name().size() > 0) {
    job_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.job_name_);
  }
  release_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.release_name().size() > 0) {
    release_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.release_name_);
  }
  if (from.has_manifest()) {
    manifest_ = new ::estafette::ci::manifest::v1::EstafetteManifest(*from.manifest_);
  } else {
    manifest_ = nullptr;
  }
  if (from.has_ci_server()) {
    ci_server_ = new ::estafette::ci::contracts::v1::CiServerConfig(*from.ci_server_);
  } else {
    ci_server_ = nullptr;
  }
  if (from.has_build_params()) {
    build_params_ = new ::estafette::ci::contracts::v1::BuildParamsConfig(*from.build_params_);
  } else {
    build_params_ = nullptr;
  }
  if (from.has_release_params()) {
    release_params_ = new ::estafette::ci::contracts::v1::ReleaseParamsConfig(*from.release_params_);
  } else {
    release_params_ = nullptr;
  }
  if (from.has_git()) {
    git_ = new ::estafette::ci::contracts::v1::GitConfig(*from.git_);
  } else {
    git_ = nullptr;
  }
  if (from.has_build_version()) {
    build_version_ = new ::estafette::ci::contracts::v1::BuildVersionConfig(*from.build_version_);
  } else {
    build_version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:estafette.ci.contracts.v1.BuilderConfig)
}

void BuilderConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuilderConfig_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registry_mirror_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  docker_daemon_mtu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&manifest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_version_) -
      reinterpret_cast<char*>(&manifest_)) + sizeof(build_version_));
}

BuilderConfig::~BuilderConfig() {
  // @@protoc_insertion_point(destructor:estafette.ci.contracts.v1.BuilderConfig)
  SharedDtor();
}

void BuilderConfig::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registry_mirror_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  docker_daemon_mtu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete manifest_;
  if (this != internal_default_instance()) delete ci_server_;
  if (this != internal_default_instance()) delete build_params_;
  if (this != internal_default_instance()) delete release_params_;
  if (this != internal_default_instance()) delete git_;
  if (this != internal_default_instance()) delete build_version_;
}

void BuilderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuilderConfig& BuilderConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuilderConfig_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void BuilderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:estafette.ci.contracts.v1.BuilderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  credentials_.Clear();
  trusted_images_.Clear();
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registry_mirror_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  docker_daemon_mtu_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && manifest_ != nullptr) {
    delete manifest_;
  }
  manifest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ci_server_ != nullptr) {
    delete ci_server_;
  }
  ci_server_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && build_params_ != nullptr) {
    delete build_params_;
  }
  build_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && release_params_ != nullptr) {
    delete release_params_;
  }
  release_params_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && git_ != nullptr) {
    delete git_;
  }
  git_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && build_version_ != nullptr) {
    delete build_version_;
  }
  build_version_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BuilderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_action(), ptr, ctx, "estafette.ci.contracts.v1.BuilderConfig.action");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string track = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_track(), ptr, ctx, "estafette.ci.contracts.v1.BuilderConfig.track");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string registry_mirror = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_registry_mirror(), ptr, ctx, "estafette.ci.contracts.v1.BuilderConfig.registry_mirror");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string docker_daemon_mtu = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_docker_daemon_mtu(), ptr, ctx, "estafette.ci.contracts.v1.BuilderConfig.docker_daemon_mtu");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.manifest.v1.EstafetteManifest manifest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_manifest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string job_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_job_name(), ptr, ctx, "estafette.ci.contracts.v1.BuilderConfig.job_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string release_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_release_name(), ptr, ctx, "estafette.ci.contracts.v1.BuilderConfig.release_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .estafette.ci.manifest.v1.EstafetteEvent events = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.contracts.v1.CiServerConfig ci_server = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_ci_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.contracts.v1.BuildParamsConfig build_params = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_build_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.contracts.v1.ReleaseParamsConfig release_params = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_release_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.contracts.v1.GitConfig git = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_git(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .estafette.ci.contracts.v1.BuildVersionConfig build_version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_build_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .estafette.ci.contracts.v1.CredentialConfig credentials = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_credentials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      // repeated .estafette.ci.contracts.v1.TrustedImageConfig trusted_images = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_trusted_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 122);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BuilderConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:estafette.ci.contracts.v1.BuilderConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->action().data(), static_cast<int>(this->action().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.contracts.v1.BuilderConfig.action"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string track = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_track()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->track().data(), static_cast<int>(this->track().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.contracts.v1.BuilderConfig.track"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string registry_mirror = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_registry_mirror()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->registry_mirror().data(), static_cast<int>(this->registry_mirror().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.contracts.v1.BuilderConfig.registry_mirror"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string docker_daemon_mtu = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_docker_daemon_mtu()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->docker_daemon_mtu().data(), static_cast<int>(this->docker_daemon_mtu().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.contracts.v1.BuilderConfig.docker_daemon_mtu"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.manifest.v1.EstafetteManifest manifest = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_manifest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string job_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_job_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->job_name().data(), static_cast<int>(this->job_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.contracts.v1.BuilderConfig.job_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string release_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_release_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->release_name().data(), static_cast<int>(this->release_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "estafette.ci.contracts.v1.BuilderConfig.release_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .estafette.ci.manifest.v1.EstafetteEvent events = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.contracts.v1.CiServerConfig ci_server = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ci_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.contracts.v1.BuildParamsConfig build_params = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_build_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.contracts.v1.ReleaseParamsConfig release_params = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_release_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.contracts.v1.GitConfig git = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_git()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .estafette.ci.contracts.v1.BuildVersionConfig build_version = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_build_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .estafette.ci.contracts.v1.CredentialConfig credentials = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_credentials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .estafette.ci.contracts.v1.TrustedImageConfig trusted_images = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_trusted_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:estafette.ci.contracts.v1.BuilderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:estafette.ci.contracts.v1.BuilderConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BuilderConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:estafette.ci.contracts.v1.BuilderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->action().data(), static_cast<int>(this->action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.contracts.v1.BuilderConfig.action");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->action(), output);
  }

  // string track = 2;
  if (this->track().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.contracts.v1.BuilderConfig.track");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->track(), output);
  }

  // string registry_mirror = 3;
  if (this->registry_mirror().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->registry_mirror().data(), static_cast<int>(this->registry_mirror().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.contracts.v1.BuilderConfig.registry_mirror");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->registry_mirror(), output);
  }

  // string docker_daemon_mtu = 4;
  if (this->docker_daemon_mtu().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->docker_daemon_mtu().data(), static_cast<int>(this->docker_daemon_mtu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.contracts.v1.BuilderConfig.docker_daemon_mtu");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->docker_daemon_mtu(), output);
  }

  // .estafette.ci.manifest.v1.EstafetteManifest manifest = 5;
  if (this->has_manifest()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::manifest(this), output);
  }

  // string job_name = 6;
  if (this->job_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->job_name().data(), static_cast<int>(this->job_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.contracts.v1.BuilderConfig.job_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->job_name(), output);
  }

  // string release_name = 7;
  if (this->release_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->release_name().data(), static_cast<int>(this->release_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.contracts.v1.BuilderConfig.release_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->release_name(), output);
  }

  // repeated .estafette.ci.manifest.v1.EstafetteEvent events = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->events(static_cast<int>(i)),
      output);
  }

  // .estafette.ci.contracts.v1.CiServerConfig ci_server = 9;
  if (this->has_ci_server()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::ci_server(this), output);
  }

  // .estafette.ci.contracts.v1.BuildParamsConfig build_params = 10;
  if (this->has_build_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::build_params(this), output);
  }

  // .estafette.ci.contracts.v1.ReleaseParamsConfig release_params = 11;
  if (this->has_release_params()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::release_params(this), output);
  }

  // .estafette.ci.contracts.v1.GitConfig git = 12;
  if (this->has_git()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::git(this), output);
  }

  // .estafette.ci.contracts.v1.BuildVersionConfig build_version = 13;
  if (this->has_build_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::build_version(this), output);
  }

  // repeated .estafette.ci.contracts.v1.CredentialConfig credentials = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->credentials_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->credentials(static_cast<int>(i)),
      output);
  }

  // repeated .estafette.ci.contracts.v1.TrustedImageConfig trusted_images = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trusted_images_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->trusted_images(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:estafette.ci.contracts.v1.BuilderConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* BuilderConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:estafette.ci.contracts.v1.BuilderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->action().data(), static_cast<int>(this->action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.contracts.v1.BuilderConfig.action");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->action(), target);
  }

  // string track = 2;
  if (this->track().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.contracts.v1.BuilderConfig.track");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->track(), target);
  }

  // string registry_mirror = 3;
  if (this->registry_mirror().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->registry_mirror().data(), static_cast<int>(this->registry_mirror().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.contracts.v1.BuilderConfig.registry_mirror");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->registry_mirror(), target);
  }

  // string docker_daemon_mtu = 4;
  if (this->docker_daemon_mtu().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->docker_daemon_mtu().data(), static_cast<int>(this->docker_daemon_mtu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.contracts.v1.BuilderConfig.docker_daemon_mtu");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->docker_daemon_mtu(), target);
  }

  // .estafette.ci.manifest.v1.EstafetteManifest manifest = 5;
  if (this->has_manifest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::manifest(this), target);
  }

  // string job_name = 6;
  if (this->job_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->job_name().data(), static_cast<int>(this->job_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.contracts.v1.BuilderConfig.job_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->job_name(), target);
  }

  // string release_name = 7;
  if (this->release_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->release_name().data(), static_cast<int>(this->release_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "estafette.ci.contracts.v1.BuilderConfig.release_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->release_name(), target);
  }

  // repeated .estafette.ci.manifest.v1.EstafetteEvent events = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->events(static_cast<int>(i)), target);
  }

  // .estafette.ci.contracts.v1.CiServerConfig ci_server = 9;
  if (this->has_ci_server()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::ci_server(this), target);
  }

  // .estafette.ci.contracts.v1.BuildParamsConfig build_params = 10;
  if (this->has_build_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::build_params(this), target);
  }

  // .estafette.ci.contracts.v1.ReleaseParamsConfig release_params = 11;
  if (this->has_release_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::release_params(this), target);
  }

  // .estafette.ci.contracts.v1.GitConfig git = 12;
  if (this->has_git()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::git(this), target);
  }

  // .estafette.ci.contracts.v1.BuildVersionConfig build_version = 13;
  if (this->has_build_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::build_version(this), target);
  }

  // repeated .estafette.ci.contracts.v1.CredentialConfig credentials = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->credentials_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->credentials(static_cast<int>(i)), target);
  }

  // repeated .estafette.ci.contracts.v1.TrustedImageConfig trusted_images = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trusted_images_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->trusted_images(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:estafette.ci.contracts.v1.BuilderConfig)
  return target;
}

size_t BuilderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:estafette.ci.contracts.v1.BuilderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .estafette.ci.manifest.v1.EstafetteEvent events = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // repeated .estafette.ci.contracts.v1.CredentialConfig credentials = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->credentials_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->credentials(static_cast<int>(i)));
    }
  }

  // repeated .estafette.ci.contracts.v1.TrustedImageConfig trusted_images = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->trusted_images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->trusted_images(static_cast<int>(i)));
    }
  }

  // string action = 1;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->action());
  }

  // string track = 2;
  if (this->track().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->track());
  }

  // string registry_mirror = 3;
  if (this->registry_mirror().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->registry_mirror());
  }

  // string docker_daemon_mtu = 4;
  if (this->docker_daemon_mtu().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->docker_daemon_mtu());
  }

  // string job_name = 6;
  if (this->job_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->job_name());
  }

  // string release_name = 7;
  if (this->release_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->release_name());
  }

  // .estafette.ci.manifest.v1.EstafetteManifest manifest = 5;
  if (this->has_manifest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *manifest_);
  }

  // .estafette.ci.contracts.v1.CiServerConfig ci_server = 9;
  if (this->has_ci_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ci_server_);
  }

  // .estafette.ci.contracts.v1.BuildParamsConfig build_params = 10;
  if (this->has_build_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *build_params_);
  }

  // .estafette.ci.contracts.v1.ReleaseParamsConfig release_params = 11;
  if (this->has_release_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *release_params_);
  }

  // .estafette.ci.contracts.v1.GitConfig git = 12;
  if (this->has_git()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *git_);
  }

  // .estafette.ci.contracts.v1.BuildVersionConfig build_version = 13;
  if (this->has_build_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *build_version_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuilderConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:estafette.ci.contracts.v1.BuilderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BuilderConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuilderConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:estafette.ci.contracts.v1.BuilderConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:estafette.ci.contracts.v1.BuilderConfig)
    MergeFrom(*source);
  }
}

void BuilderConfig::MergeFrom(const BuilderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:estafette.ci.contracts.v1.BuilderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  credentials_.MergeFrom(from.credentials_);
  trusted_images_.MergeFrom(from.trusted_images_);
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.track().size() > 0) {

    track_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  if (from.registry_mirror().size() > 0) {

    registry_mirror_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.registry_mirror_);
  }
  if (from.docker_daemon_mtu().size() > 0) {

    docker_daemon_mtu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.docker_daemon_mtu_);
  }
  if (from.job_name().size() > 0) {

    job_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.job_name_);
  }
  if (from.release_name().size() > 0) {

    release_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.release_name_);
  }
  if (from.has_manifest()) {
    mutable_manifest()->::estafette::ci::manifest::v1::EstafetteManifest::MergeFrom(from.manifest());
  }
  if (from.has_ci_server()) {
    mutable_ci_server()->::estafette::ci::contracts::v1::CiServerConfig::MergeFrom(from.ci_server());
  }
  if (from.has_build_params()) {
    mutable_build_params()->::estafette::ci::contracts::v1::BuildParamsConfig::MergeFrom(from.build_params());
  }
  if (from.has_release_params()) {
    mutable_release_params()->::estafette::ci::contracts::v1::ReleaseParamsConfig::MergeFrom(from.release_params());
  }
  if (from.has_git()) {
    mutable_git()->::estafette::ci::contracts::v1::GitConfig::MergeFrom(from.git());
  }
  if (from.has_build_version()) {
    mutable_build_version()->::estafette::ci::contracts::v1::BuildVersionConfig::MergeFrom(from.build_version());
  }
}

void BuilderConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:estafette.ci.contracts.v1.BuilderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuilderConfig::CopyFrom(const BuilderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:estafette.ci.contracts.v1.BuilderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuilderConfig::IsInitialized() const {
  return true;
}

void BuilderConfig::Swap(BuilderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuilderConfig::InternalSwap(BuilderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  CastToBase(&credentials_)->InternalSwap(CastToBase(&other->credentials_));
  CastToBase(&trusted_images_)->InternalSwap(CastToBase(&other->trusted_images_));
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  track_.Swap(&other->track_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  registry_mirror_.Swap(&other->registry_mirror_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  docker_daemon_mtu_.Swap(&other->docker_daemon_mtu_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  job_name_.Swap(&other->job_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  release_name_.Swap(&other->release_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(manifest_, other->manifest_);
  swap(ci_server_, other->ci_server_);
  swap(build_params_, other->build_params_);
  swap(release_params_, other->release_params_);
  swap(git_, other->git_);
  swap(build_version_, other->build_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuilderConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::estafette::ci::contracts::v1::BuilderConfig* Arena::CreateMaybeMessage< ::estafette::ci::contracts::v1::BuilderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::estafette::ci::contracts::v1::BuilderConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
