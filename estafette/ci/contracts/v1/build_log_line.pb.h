// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/contracts/v1/build_log_line.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2fbuild_5flog_5fline_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2fbuild_5flog_5fline_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fcontracts_2fv1_2fbuild_5flog_5fline_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_estafette_2fci_2fcontracts_2fv1_2fbuild_5flog_5fline_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuild_5flog_5fline_2eproto;
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {
class BuildLogLine;
class BuildLogLineDefaultTypeInternal;
extern BuildLogLineDefaultTypeInternal _BuildLogLine_default_instance_;
}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> ::estafette::ci::contracts::v1::BuildLogLine* Arena::CreateMaybeMessage<::estafette::ci::contracts::v1::BuildLogLine>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {

// ===================================================================

class BuildLogLine :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:estafette.ci.contracts.v1.BuildLogLine) */ {
 public:
  BuildLogLine();
  virtual ~BuildLogLine();

  BuildLogLine(const BuildLogLine& from);
  BuildLogLine(BuildLogLine&& from) noexcept
    : BuildLogLine() {
    *this = ::std::move(from);
  }

  inline BuildLogLine& operator=(const BuildLogLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildLogLine& operator=(BuildLogLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildLogLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildLogLine* internal_default_instance() {
    return reinterpret_cast<const BuildLogLine*>(
               &_BuildLogLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BuildLogLine* other);
  friend void swap(BuildLogLine& a, BuildLogLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuildLogLine* New() const final {
    return CreateMaybeMessage<BuildLogLine>(nullptr);
  }

  BuildLogLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildLogLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildLogLine& from);
  void MergeFrom(const BuildLogLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildLogLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "estafette.ci.contracts.v1.BuildLogLine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuild_5flog_5fline_2eproto);
    return ::descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuild_5flog_5fline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_type = 3;
  void clear_stream_type();
  static const int kStreamTypeFieldNumber = 3;
  const std::string& stream_type() const;
  void set_stream_type(const std::string& value);
  void set_stream_type(std::string&& value);
  void set_stream_type(const char* value);
  void set_stream_type(const char* value, size_t size);
  std::string* mutable_stream_type();
  std::string* release_stream_type();
  void set_allocated_stream_type(std::string* stream_type);

  // string text = 4;
  void clear_text();
  static const int kTextFieldNumber = 4;
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);

  // .google.protobuf.Timestamp timestamp_time = 2;
  bool has_timestamp_time() const;
  void clear_timestamp_time();
  static const int kTimestampTimeFieldNumber = 2;
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp_time();
  void set_allocated_timestamp_time(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_time);

  // int64 line_number = 1;
  void clear_line_number();
  static const int kLineNumberFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 line_number() const;
  void set_line_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:estafette.ci.contracts.v1.BuildLogLine)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 line_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estafette_2fci_2fcontracts_2fv1_2fbuild_5flog_5fline_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BuildLogLine

// int64 line_number = 1;
inline void BuildLogLine::clear_line_number() {
  line_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BuildLogLine::line_number() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuildLogLine.line_number)
  return line_number_;
}
inline void BuildLogLine::set_line_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  line_number_ = value;
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.BuildLogLine.line_number)
}

// .google.protobuf.Timestamp timestamp_time = 2;
inline bool BuildLogLine::has_timestamp_time() const {
  return this != internal_default_instance() && timestamp_time_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BuildLogLine::timestamp_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_time_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuildLogLine.timestamp_time)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BuildLogLine::release_timestamp_time() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuildLogLine.timestamp_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_time_;
  timestamp_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BuildLogLine::mutable_timestamp_time() {
  
  if (timestamp_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    timestamp_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuildLogLine.timestamp_time)
  return timestamp_time_;
}
inline void BuildLogLine::set_allocated_timestamp_time(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_time_);
  }
  if (timestamp_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_time)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp_time, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_time_ = timestamp_time;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuildLogLine.timestamp_time)
}

// string stream_type = 3;
inline void BuildLogLine::clear_stream_type() {
  stream_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuildLogLine::stream_type() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuildLogLine.stream_type)
  return stream_type_.GetNoArena();
}
inline void BuildLogLine::set_stream_type(const std::string& value) {
  
  stream_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.BuildLogLine.stream_type)
}
inline void BuildLogLine::set_stream_type(std::string&& value) {
  
  stream_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.BuildLogLine.stream_type)
}
inline void BuildLogLine::set_stream_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.BuildLogLine.stream_type)
}
inline void BuildLogLine::set_stream_type(const char* value, size_t size) {
  
  stream_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.BuildLogLine.stream_type)
}
inline std::string* BuildLogLine::mutable_stream_type() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuildLogLine.stream_type)
  return stream_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuildLogLine::release_stream_type() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuildLogLine.stream_type)
  
  return stream_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuildLogLine::set_allocated_stream_type(std::string* stream_type) {
  if (stream_type != nullptr) {
    
  } else {
    
  }
  stream_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_type);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuildLogLine.stream_type)
}

// string text = 4;
inline void BuildLogLine::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuildLogLine::text() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuildLogLine.text)
  return text_.GetNoArena();
}
inline void BuildLogLine::set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.BuildLogLine.text)
}
inline void BuildLogLine::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.BuildLogLine.text)
}
inline void BuildLogLine::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.BuildLogLine.text)
}
inline void BuildLogLine::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.BuildLogLine.text)
}
inline std::string* BuildLogLine::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuildLogLine.text)
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuildLogLine::release_text() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuildLogLine.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuildLogLine::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuildLogLine.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2fbuild_5flog_5fline_2eproto
