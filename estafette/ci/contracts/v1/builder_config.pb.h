// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/contracts/v1/builder_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "estafette/ci/contracts/v1/build_params_config.pb.h"
#include "estafette/ci/contracts/v1/build_version_config.pb.h"
#include "estafette/ci/contracts/v1/ci_server_config.pb.h"
#include "estafette/ci/contracts/v1/credential_config.pb.h"
#include "estafette/ci/contracts/v1/git_config.pb.h"
#include "estafette/ci/contracts/v1/release_params_config.pb.h"
#include "estafette/ci/contracts/v1/trusted_image_config.pb.h"
#include "estafette/ci/manifest/v1/estafette_event.pb.h"
#include "estafette/ci/manifest/v1/estafette_manifest.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto;
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {
class BuilderConfig;
class BuilderConfigDefaultTypeInternal;
extern BuilderConfigDefaultTypeInternal _BuilderConfig_default_instance_;
}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> ::estafette::ci::contracts::v1::BuilderConfig* Arena::CreateMaybeMessage<::estafette::ci::contracts::v1::BuilderConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {

// ===================================================================

class BuilderConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:estafette.ci.contracts.v1.BuilderConfig) */ {
 public:
  BuilderConfig();
  virtual ~BuilderConfig();

  BuilderConfig(const BuilderConfig& from);
  BuilderConfig(BuilderConfig&& from) noexcept
    : BuilderConfig() {
    *this = ::std::move(from);
  }

  inline BuilderConfig& operator=(const BuilderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuilderConfig& operator=(BuilderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuilderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuilderConfig* internal_default_instance() {
    return reinterpret_cast<const BuilderConfig*>(
               &_BuilderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BuilderConfig* other);
  friend void swap(BuilderConfig& a, BuilderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuilderConfig* New() const final {
    return CreateMaybeMessage<BuilderConfig>(nullptr);
  }

  BuilderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuilderConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuilderConfig& from);
  void MergeFrom(const BuilderConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuilderConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "estafette.ci.contracts.v1.BuilderConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto);
    return ::descriptor_table_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .estafette.ci.manifest.v1.EstafetteEvent events = 8;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 8;
  ::estafette::ci::manifest::v1::EstafetteEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteEvent >*
      mutable_events();
  const ::estafette::ci::manifest::v1::EstafetteEvent& events(int index) const;
  ::estafette::ci::manifest::v1::EstafetteEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteEvent >&
      events() const;

  // repeated .estafette.ci.contracts.v1.CredentialConfig credentials = 14;
  int credentials_size() const;
  void clear_credentials();
  static const int kCredentialsFieldNumber = 14;
  ::estafette::ci::contracts::v1::CredentialConfig* mutable_credentials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::CredentialConfig >*
      mutable_credentials();
  const ::estafette::ci::contracts::v1::CredentialConfig& credentials(int index) const;
  ::estafette::ci::contracts::v1::CredentialConfig* add_credentials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::CredentialConfig >&
      credentials() const;

  // repeated .estafette.ci.contracts.v1.TrustedImageConfig trusted_images = 15;
  int trusted_images_size() const;
  void clear_trusted_images();
  static const int kTrustedImagesFieldNumber = 15;
  ::estafette::ci::contracts::v1::TrustedImageConfig* mutable_trusted_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::TrustedImageConfig >*
      mutable_trusted_images();
  const ::estafette::ci::contracts::v1::TrustedImageConfig& trusted_images(int index) const;
  ::estafette::ci::contracts::v1::TrustedImageConfig* add_trusted_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::TrustedImageConfig >&
      trusted_images() const;

  // string action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);

  // string track = 2;
  void clear_track();
  static const int kTrackFieldNumber = 2;
  const std::string& track() const;
  void set_track(const std::string& value);
  void set_track(std::string&& value);
  void set_track(const char* value);
  void set_track(const char* value, size_t size);
  std::string* mutable_track();
  std::string* release_track();
  void set_allocated_track(std::string* track);

  // string registry_mirror = 3;
  void clear_registry_mirror();
  static const int kRegistryMirrorFieldNumber = 3;
  const std::string& registry_mirror() const;
  void set_registry_mirror(const std::string& value);
  void set_registry_mirror(std::string&& value);
  void set_registry_mirror(const char* value);
  void set_registry_mirror(const char* value, size_t size);
  std::string* mutable_registry_mirror();
  std::string* release_registry_mirror();
  void set_allocated_registry_mirror(std::string* registry_mirror);

  // string docker_daemon_mtu = 4;
  void clear_docker_daemon_mtu();
  static const int kDockerDaemonMtuFieldNumber = 4;
  const std::string& docker_daemon_mtu() const;
  void set_docker_daemon_mtu(const std::string& value);
  void set_docker_daemon_mtu(std::string&& value);
  void set_docker_daemon_mtu(const char* value);
  void set_docker_daemon_mtu(const char* value, size_t size);
  std::string* mutable_docker_daemon_mtu();
  std::string* release_docker_daemon_mtu();
  void set_allocated_docker_daemon_mtu(std::string* docker_daemon_mtu);

  // string job_name = 6;
  void clear_job_name();
  static const int kJobNameFieldNumber = 6;
  const std::string& job_name() const;
  void set_job_name(const std::string& value);
  void set_job_name(std::string&& value);
  void set_job_name(const char* value);
  void set_job_name(const char* value, size_t size);
  std::string* mutable_job_name();
  std::string* release_job_name();
  void set_allocated_job_name(std::string* job_name);

  // string release_name = 7;
  void clear_release_name();
  static const int kReleaseNameFieldNumber = 7;
  const std::string& release_name() const;
  void set_release_name(const std::string& value);
  void set_release_name(std::string&& value);
  void set_release_name(const char* value);
  void set_release_name(const char* value, size_t size);
  std::string* mutable_release_name();
  std::string* release_release_name();
  void set_allocated_release_name(std::string* release_name);

  // .estafette.ci.manifest.v1.EstafetteManifest manifest = 5;
  bool has_manifest() const;
  void clear_manifest();
  static const int kManifestFieldNumber = 5;
  const ::estafette::ci::manifest::v1::EstafetteManifest& manifest() const;
  ::estafette::ci::manifest::v1::EstafetteManifest* release_manifest();
  ::estafette::ci::manifest::v1::EstafetteManifest* mutable_manifest();
  void set_allocated_manifest(::estafette::ci::manifest::v1::EstafetteManifest* manifest);

  // .estafette.ci.contracts.v1.CiServerConfig ci_server = 9;
  bool has_ci_server() const;
  void clear_ci_server();
  static const int kCiServerFieldNumber = 9;
  const ::estafette::ci::contracts::v1::CiServerConfig& ci_server() const;
  ::estafette::ci::contracts::v1::CiServerConfig* release_ci_server();
  ::estafette::ci::contracts::v1::CiServerConfig* mutable_ci_server();
  void set_allocated_ci_server(::estafette::ci::contracts::v1::CiServerConfig* ci_server);

  // .estafette.ci.contracts.v1.BuildParamsConfig build_params = 10;
  bool has_build_params() const;
  void clear_build_params();
  static const int kBuildParamsFieldNumber = 10;
  const ::estafette::ci::contracts::v1::BuildParamsConfig& build_params() const;
  ::estafette::ci::contracts::v1::BuildParamsConfig* release_build_params();
  ::estafette::ci::contracts::v1::BuildParamsConfig* mutable_build_params();
  void set_allocated_build_params(::estafette::ci::contracts::v1::BuildParamsConfig* build_params);

  // .estafette.ci.contracts.v1.ReleaseParamsConfig release_params = 11;
  bool has_release_params() const;
  void clear_release_params();
  static const int kReleaseParamsFieldNumber = 11;
  const ::estafette::ci::contracts::v1::ReleaseParamsConfig& release_params() const;
  ::estafette::ci::contracts::v1::ReleaseParamsConfig* release_release_params();
  ::estafette::ci::contracts::v1::ReleaseParamsConfig* mutable_release_params();
  void set_allocated_release_params(::estafette::ci::contracts::v1::ReleaseParamsConfig* release_params);

  // .estafette.ci.contracts.v1.GitConfig git = 12;
  bool has_git() const;
  void clear_git();
  static const int kGitFieldNumber = 12;
  const ::estafette::ci::contracts::v1::GitConfig& git() const;
  ::estafette::ci::contracts::v1::GitConfig* release_git();
  ::estafette::ci::contracts::v1::GitConfig* mutable_git();
  void set_allocated_git(::estafette::ci::contracts::v1::GitConfig* git);

  // .estafette.ci.contracts.v1.BuildVersionConfig build_version = 13;
  bool has_build_version() const;
  void clear_build_version();
  static const int kBuildVersionFieldNumber = 13;
  const ::estafette::ci::contracts::v1::BuildVersionConfig& build_version() const;
  ::estafette::ci::contracts::v1::BuildVersionConfig* release_build_version();
  ::estafette::ci::contracts::v1::BuildVersionConfig* mutable_build_version();
  void set_allocated_build_version(::estafette::ci::contracts::v1::BuildVersionConfig* build_version);

  // @@protoc_insertion_point(class_scope:estafette.ci.contracts.v1.BuilderConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteEvent > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::CredentialConfig > credentials_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::TrustedImageConfig > trusted_images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr registry_mirror_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr docker_daemon_mtu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr release_name_;
  ::estafette::ci::manifest::v1::EstafetteManifest* manifest_;
  ::estafette::ci::contracts::v1::CiServerConfig* ci_server_;
  ::estafette::ci::contracts::v1::BuildParamsConfig* build_params_;
  ::estafette::ci::contracts::v1::ReleaseParamsConfig* release_params_;
  ::estafette::ci::contracts::v1::GitConfig* git_;
  ::estafette::ci::contracts::v1::BuildVersionConfig* build_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BuilderConfig

// string action = 1;
inline void BuilderConfig::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuilderConfig::action() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.action)
  return action_.GetNoArena();
}
inline void BuilderConfig::set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.BuilderConfig.action)
}
inline void BuilderConfig::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.BuilderConfig.action)
}
inline void BuilderConfig::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.BuilderConfig.action)
}
inline void BuilderConfig::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.BuilderConfig.action)
}
inline std::string* BuilderConfig::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.action)
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuilderConfig::release_action() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuilderConfig.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuilderConfig::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuilderConfig.action)
}

// string track = 2;
inline void BuilderConfig::clear_track() {
  track_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuilderConfig::track() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.track)
  return track_.GetNoArena();
}
inline void BuilderConfig::set_track(const std::string& value) {
  
  track_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.BuilderConfig.track)
}
inline void BuilderConfig::set_track(std::string&& value) {
  
  track_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.BuilderConfig.track)
}
inline void BuilderConfig::set_track(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  track_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.BuilderConfig.track)
}
inline void BuilderConfig::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.BuilderConfig.track)
}
inline std::string* BuilderConfig::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.track)
  return track_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuilderConfig::release_track() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuilderConfig.track)
  
  return track_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuilderConfig::set_allocated_track(std::string* track) {
  if (track != nullptr) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuilderConfig.track)
}

// string registry_mirror = 3;
inline void BuilderConfig::clear_registry_mirror() {
  registry_mirror_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuilderConfig::registry_mirror() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.registry_mirror)
  return registry_mirror_.GetNoArena();
}
inline void BuilderConfig::set_registry_mirror(const std::string& value) {
  
  registry_mirror_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.BuilderConfig.registry_mirror)
}
inline void BuilderConfig::set_registry_mirror(std::string&& value) {
  
  registry_mirror_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.BuilderConfig.registry_mirror)
}
inline void BuilderConfig::set_registry_mirror(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  registry_mirror_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.BuilderConfig.registry_mirror)
}
inline void BuilderConfig::set_registry_mirror(const char* value, size_t size) {
  
  registry_mirror_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.BuilderConfig.registry_mirror)
}
inline std::string* BuilderConfig::mutable_registry_mirror() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.registry_mirror)
  return registry_mirror_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuilderConfig::release_registry_mirror() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuilderConfig.registry_mirror)
  
  return registry_mirror_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuilderConfig::set_allocated_registry_mirror(std::string* registry_mirror) {
  if (registry_mirror != nullptr) {
    
  } else {
    
  }
  registry_mirror_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), registry_mirror);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuilderConfig.registry_mirror)
}

// string docker_daemon_mtu = 4;
inline void BuilderConfig::clear_docker_daemon_mtu() {
  docker_daemon_mtu_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuilderConfig::docker_daemon_mtu() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.docker_daemon_mtu)
  return docker_daemon_mtu_.GetNoArena();
}
inline void BuilderConfig::set_docker_daemon_mtu(const std::string& value) {
  
  docker_daemon_mtu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.BuilderConfig.docker_daemon_mtu)
}
inline void BuilderConfig::set_docker_daemon_mtu(std::string&& value) {
  
  docker_daemon_mtu_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.BuilderConfig.docker_daemon_mtu)
}
inline void BuilderConfig::set_docker_daemon_mtu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  docker_daemon_mtu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.BuilderConfig.docker_daemon_mtu)
}
inline void BuilderConfig::set_docker_daemon_mtu(const char* value, size_t size) {
  
  docker_daemon_mtu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.BuilderConfig.docker_daemon_mtu)
}
inline std::string* BuilderConfig::mutable_docker_daemon_mtu() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.docker_daemon_mtu)
  return docker_daemon_mtu_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuilderConfig::release_docker_daemon_mtu() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuilderConfig.docker_daemon_mtu)
  
  return docker_daemon_mtu_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuilderConfig::set_allocated_docker_daemon_mtu(std::string* docker_daemon_mtu) {
  if (docker_daemon_mtu != nullptr) {
    
  } else {
    
  }
  docker_daemon_mtu_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), docker_daemon_mtu);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuilderConfig.docker_daemon_mtu)
}

// .estafette.ci.manifest.v1.EstafetteManifest manifest = 5;
inline bool BuilderConfig::has_manifest() const {
  return this != internal_default_instance() && manifest_ != nullptr;
}
inline const ::estafette::ci::manifest::v1::EstafetteManifest& BuilderConfig::manifest() const {
  const ::estafette::ci::manifest::v1::EstafetteManifest* p = manifest_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.manifest)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::manifest::v1::EstafetteManifest*>(
      &::estafette::ci::manifest::v1::_EstafetteManifest_default_instance_);
}
inline ::estafette::ci::manifest::v1::EstafetteManifest* BuilderConfig::release_manifest() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuilderConfig.manifest)
  
  ::estafette::ci::manifest::v1::EstafetteManifest* temp = manifest_;
  manifest_ = nullptr;
  return temp;
}
inline ::estafette::ci::manifest::v1::EstafetteManifest* BuilderConfig::mutable_manifest() {
  
  if (manifest_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::manifest::v1::EstafetteManifest>(GetArenaNoVirtual());
    manifest_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.manifest)
  return manifest_;
}
inline void BuilderConfig::set_allocated_manifest(::estafette::ci::manifest::v1::EstafetteManifest* manifest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(manifest_);
  }
  if (manifest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      manifest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manifest, submessage_arena);
    }
    
  } else {
    
  }
  manifest_ = manifest;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuilderConfig.manifest)
}

// string job_name = 6;
inline void BuilderConfig::clear_job_name() {
  job_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuilderConfig::job_name() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.job_name)
  return job_name_.GetNoArena();
}
inline void BuilderConfig::set_job_name(const std::string& value) {
  
  job_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.BuilderConfig.job_name)
}
inline void BuilderConfig::set_job_name(std::string&& value) {
  
  job_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.BuilderConfig.job_name)
}
inline void BuilderConfig::set_job_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.BuilderConfig.job_name)
}
inline void BuilderConfig::set_job_name(const char* value, size_t size) {
  
  job_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.BuilderConfig.job_name)
}
inline std::string* BuilderConfig::mutable_job_name() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.job_name)
  return job_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuilderConfig::release_job_name() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuilderConfig.job_name)
  
  return job_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuilderConfig::set_allocated_job_name(std::string* job_name) {
  if (job_name != nullptr) {
    
  } else {
    
  }
  job_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_name);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuilderConfig.job_name)
}

// string release_name = 7;
inline void BuilderConfig::clear_release_name() {
  release_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuilderConfig::release_name() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.release_name)
  return release_name_.GetNoArena();
}
inline void BuilderConfig::set_release_name(const std::string& value) {
  
  release_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.BuilderConfig.release_name)
}
inline void BuilderConfig::set_release_name(std::string&& value) {
  
  release_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.BuilderConfig.release_name)
}
inline void BuilderConfig::set_release_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  release_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.BuilderConfig.release_name)
}
inline void BuilderConfig::set_release_name(const char* value, size_t size) {
  
  release_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.BuilderConfig.release_name)
}
inline std::string* BuilderConfig::mutable_release_name() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.release_name)
  return release_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuilderConfig::release_release_name() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuilderConfig.release_name)
  
  return release_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuilderConfig::set_allocated_release_name(std::string* release_name) {
  if (release_name != nullptr) {
    
  } else {
    
  }
  release_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), release_name);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuilderConfig.release_name)
}

// repeated .estafette.ci.manifest.v1.EstafetteEvent events = 8;
inline int BuilderConfig::events_size() const {
  return events_.size();
}
inline ::estafette::ci::manifest::v1::EstafetteEvent* BuilderConfig::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteEvent >*
BuilderConfig::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:estafette.ci.contracts.v1.BuilderConfig.events)
  return &events_;
}
inline const ::estafette::ci::manifest::v1::EstafetteEvent& BuilderConfig::events(int index) const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.events)
  return events_.Get(index);
}
inline ::estafette::ci::manifest::v1::EstafetteEvent* BuilderConfig::add_events() {
  // @@protoc_insertion_point(field_add:estafette.ci.contracts.v1.BuilderConfig.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::manifest::v1::EstafetteEvent >&
BuilderConfig::events() const {
  // @@protoc_insertion_point(field_list:estafette.ci.contracts.v1.BuilderConfig.events)
  return events_;
}

// .estafette.ci.contracts.v1.CiServerConfig ci_server = 9;
inline bool BuilderConfig::has_ci_server() const {
  return this != internal_default_instance() && ci_server_ != nullptr;
}
inline const ::estafette::ci::contracts::v1::CiServerConfig& BuilderConfig::ci_server() const {
  const ::estafette::ci::contracts::v1::CiServerConfig* p = ci_server_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.ci_server)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::contracts::v1::CiServerConfig*>(
      &::estafette::ci::contracts::v1::_CiServerConfig_default_instance_);
}
inline ::estafette::ci::contracts::v1::CiServerConfig* BuilderConfig::release_ci_server() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuilderConfig.ci_server)
  
  ::estafette::ci::contracts::v1::CiServerConfig* temp = ci_server_;
  ci_server_ = nullptr;
  return temp;
}
inline ::estafette::ci::contracts::v1::CiServerConfig* BuilderConfig::mutable_ci_server() {
  
  if (ci_server_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::contracts::v1::CiServerConfig>(GetArenaNoVirtual());
    ci_server_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.ci_server)
  return ci_server_;
}
inline void BuilderConfig::set_allocated_ci_server(::estafette::ci::contracts::v1::CiServerConfig* ci_server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ci_server_);
  }
  if (ci_server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ci_server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ci_server, submessage_arena);
    }
    
  } else {
    
  }
  ci_server_ = ci_server;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuilderConfig.ci_server)
}

// .estafette.ci.contracts.v1.BuildParamsConfig build_params = 10;
inline bool BuilderConfig::has_build_params() const {
  return this != internal_default_instance() && build_params_ != nullptr;
}
inline const ::estafette::ci::contracts::v1::BuildParamsConfig& BuilderConfig::build_params() const {
  const ::estafette::ci::contracts::v1::BuildParamsConfig* p = build_params_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.build_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::contracts::v1::BuildParamsConfig*>(
      &::estafette::ci::contracts::v1::_BuildParamsConfig_default_instance_);
}
inline ::estafette::ci::contracts::v1::BuildParamsConfig* BuilderConfig::release_build_params() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuilderConfig.build_params)
  
  ::estafette::ci::contracts::v1::BuildParamsConfig* temp = build_params_;
  build_params_ = nullptr;
  return temp;
}
inline ::estafette::ci::contracts::v1::BuildParamsConfig* BuilderConfig::mutable_build_params() {
  
  if (build_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::contracts::v1::BuildParamsConfig>(GetArenaNoVirtual());
    build_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.build_params)
  return build_params_;
}
inline void BuilderConfig::set_allocated_build_params(::estafette::ci::contracts::v1::BuildParamsConfig* build_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_params_);
  }
  if (build_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      build_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build_params, submessage_arena);
    }
    
  } else {
    
  }
  build_params_ = build_params;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuilderConfig.build_params)
}

// .estafette.ci.contracts.v1.ReleaseParamsConfig release_params = 11;
inline bool BuilderConfig::has_release_params() const {
  return this != internal_default_instance() && release_params_ != nullptr;
}
inline const ::estafette::ci::contracts::v1::ReleaseParamsConfig& BuilderConfig::release_params() const {
  const ::estafette::ci::contracts::v1::ReleaseParamsConfig* p = release_params_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.release_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::contracts::v1::ReleaseParamsConfig*>(
      &::estafette::ci::contracts::v1::_ReleaseParamsConfig_default_instance_);
}
inline ::estafette::ci::contracts::v1::ReleaseParamsConfig* BuilderConfig::release_release_params() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuilderConfig.release_params)
  
  ::estafette::ci::contracts::v1::ReleaseParamsConfig* temp = release_params_;
  release_params_ = nullptr;
  return temp;
}
inline ::estafette::ci::contracts::v1::ReleaseParamsConfig* BuilderConfig::mutable_release_params() {
  
  if (release_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::contracts::v1::ReleaseParamsConfig>(GetArenaNoVirtual());
    release_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.release_params)
  return release_params_;
}
inline void BuilderConfig::set_allocated_release_params(::estafette::ci::contracts::v1::ReleaseParamsConfig* release_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_params_);
  }
  if (release_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      release_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release_params, submessage_arena);
    }
    
  } else {
    
  }
  release_params_ = release_params;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuilderConfig.release_params)
}

// .estafette.ci.contracts.v1.GitConfig git = 12;
inline bool BuilderConfig::has_git() const {
  return this != internal_default_instance() && git_ != nullptr;
}
inline const ::estafette::ci::contracts::v1::GitConfig& BuilderConfig::git() const {
  const ::estafette::ci::contracts::v1::GitConfig* p = git_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.git)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::contracts::v1::GitConfig*>(
      &::estafette::ci::contracts::v1::_GitConfig_default_instance_);
}
inline ::estafette::ci::contracts::v1::GitConfig* BuilderConfig::release_git() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuilderConfig.git)
  
  ::estafette::ci::contracts::v1::GitConfig* temp = git_;
  git_ = nullptr;
  return temp;
}
inline ::estafette::ci::contracts::v1::GitConfig* BuilderConfig::mutable_git() {
  
  if (git_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::contracts::v1::GitConfig>(GetArenaNoVirtual());
    git_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.git)
  return git_;
}
inline void BuilderConfig::set_allocated_git(::estafette::ci::contracts::v1::GitConfig* git) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(git_);
  }
  if (git) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      git = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, git, submessage_arena);
    }
    
  } else {
    
  }
  git_ = git;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuilderConfig.git)
}

// .estafette.ci.contracts.v1.BuildVersionConfig build_version = 13;
inline bool BuilderConfig::has_build_version() const {
  return this != internal_default_instance() && build_version_ != nullptr;
}
inline const ::estafette::ci::contracts::v1::BuildVersionConfig& BuilderConfig::build_version() const {
  const ::estafette::ci::contracts::v1::BuildVersionConfig* p = build_version_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.build_version)
  return p != nullptr ? *p : *reinterpret_cast<const ::estafette::ci::contracts::v1::BuildVersionConfig*>(
      &::estafette::ci::contracts::v1::_BuildVersionConfig_default_instance_);
}
inline ::estafette::ci::contracts::v1::BuildVersionConfig* BuilderConfig::release_build_version() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.BuilderConfig.build_version)
  
  ::estafette::ci::contracts::v1::BuildVersionConfig* temp = build_version_;
  build_version_ = nullptr;
  return temp;
}
inline ::estafette::ci::contracts::v1::BuildVersionConfig* BuilderConfig::mutable_build_version() {
  
  if (build_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::estafette::ci::contracts::v1::BuildVersionConfig>(GetArenaNoVirtual());
    build_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.build_version)
  return build_version_;
}
inline void BuilderConfig::set_allocated_build_version(::estafette::ci::contracts::v1::BuildVersionConfig* build_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_version_);
  }
  if (build_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      build_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build_version, submessage_arena);
    }
    
  } else {
    
  }
  build_version_ = build_version;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.BuilderConfig.build_version)
}

// repeated .estafette.ci.contracts.v1.CredentialConfig credentials = 14;
inline int BuilderConfig::credentials_size() const {
  return credentials_.size();
}
inline ::estafette::ci::contracts::v1::CredentialConfig* BuilderConfig::mutable_credentials(int index) {
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.credentials)
  return credentials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::CredentialConfig >*
BuilderConfig::mutable_credentials() {
  // @@protoc_insertion_point(field_mutable_list:estafette.ci.contracts.v1.BuilderConfig.credentials)
  return &credentials_;
}
inline const ::estafette::ci::contracts::v1::CredentialConfig& BuilderConfig::credentials(int index) const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.credentials)
  return credentials_.Get(index);
}
inline ::estafette::ci::contracts::v1::CredentialConfig* BuilderConfig::add_credentials() {
  // @@protoc_insertion_point(field_add:estafette.ci.contracts.v1.BuilderConfig.credentials)
  return credentials_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::CredentialConfig >&
BuilderConfig::credentials() const {
  // @@protoc_insertion_point(field_list:estafette.ci.contracts.v1.BuilderConfig.credentials)
  return credentials_;
}

// repeated .estafette.ci.contracts.v1.TrustedImageConfig trusted_images = 15;
inline int BuilderConfig::trusted_images_size() const {
  return trusted_images_.size();
}
inline ::estafette::ci::contracts::v1::TrustedImageConfig* BuilderConfig::mutable_trusted_images(int index) {
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.BuilderConfig.trusted_images)
  return trusted_images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::TrustedImageConfig >*
BuilderConfig::mutable_trusted_images() {
  // @@protoc_insertion_point(field_mutable_list:estafette.ci.contracts.v1.BuilderConfig.trusted_images)
  return &trusted_images_;
}
inline const ::estafette::ci::contracts::v1::TrustedImageConfig& BuilderConfig::trusted_images(int index) const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.BuilderConfig.trusted_images)
  return trusted_images_.Get(index);
}
inline ::estafette::ci::contracts::v1::TrustedImageConfig* BuilderConfig::add_trusted_images() {
  // @@protoc_insertion_point(field_add:estafette.ci.contracts.v1.BuilderConfig.trusted_images)
  return trusted_images_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::TrustedImageConfig >&
BuilderConfig::trusted_images() const {
  // @@protoc_insertion_point(field_list:estafette.ci.contracts.v1.BuilderConfig.trusted_images)
  return trusted_images_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2fbuilder_5fconfig_2eproto
