// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/contracts/v1/ci_server_config.proto

#ifndef PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2fci_5fserver_5fconfig_2eproto
#define PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2fci_5fserver_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_estafette_2fci_2fcontracts_2fv1_2fci_5fserver_5fconfig_2eproto 

namespace protobuf_estafette_2fci_2fcontracts_2fv1_2fci_5fserver_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_estafette_2fci_2fcontracts_2fv1_2fci_5fserver_5fconfig_2eproto
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {
class CiServerConfig;
class CiServerConfigDefaultTypeInternal;
extern CiServerConfigDefaultTypeInternal _CiServerConfig_default_instance_;
}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette
namespace google {
namespace protobuf {
template<> ::estafette::ci::contracts::v1::CiServerConfig* Arena::CreateMaybeMessage<::estafette::ci::contracts::v1::CiServerConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {

// ===================================================================

class CiServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:estafette.ci.contracts.v1.CiServerConfig) */ {
 public:
  CiServerConfig();
  virtual ~CiServerConfig();

  CiServerConfig(const CiServerConfig& from);

  inline CiServerConfig& operator=(const CiServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CiServerConfig(CiServerConfig&& from) noexcept
    : CiServerConfig() {
    *this = ::std::move(from);
  }

  inline CiServerConfig& operator=(CiServerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CiServerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CiServerConfig* internal_default_instance() {
    return reinterpret_cast<const CiServerConfig*>(
               &_CiServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CiServerConfig* other);
  friend void swap(CiServerConfig& a, CiServerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CiServerConfig* New() const final {
    return CreateMaybeMessage<CiServerConfig>(NULL);
  }

  CiServerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CiServerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CiServerConfig& from);
  void MergeFrom(const CiServerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CiServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string base_url = 1;
  void clear_base_url();
  static const int kBaseUrlFieldNumber = 1;
  const ::std::string& base_url() const;
  void set_base_url(const ::std::string& value);
  #if LANG_CXX11
  void set_base_url(::std::string&& value);
  #endif
  void set_base_url(const char* value);
  void set_base_url(const char* value, size_t size);
  ::std::string* mutable_base_url();
  ::std::string* release_base_url();
  void set_allocated_base_url(::std::string* base_url);

  // string builder_events_url = 2;
  void clear_builder_events_url();
  static const int kBuilderEventsUrlFieldNumber = 2;
  const ::std::string& builder_events_url() const;
  void set_builder_events_url(const ::std::string& value);
  #if LANG_CXX11
  void set_builder_events_url(::std::string&& value);
  #endif
  void set_builder_events_url(const char* value);
  void set_builder_events_url(const char* value, size_t size);
  ::std::string* mutable_builder_events_url();
  ::std::string* release_builder_events_url();
  void set_allocated_builder_events_url(::std::string* builder_events_url);

  // string post_logs_url = 3;
  void clear_post_logs_url();
  static const int kPostLogsUrlFieldNumber = 3;
  const ::std::string& post_logs_url() const;
  void set_post_logs_url(const ::std::string& value);
  #if LANG_CXX11
  void set_post_logs_url(::std::string&& value);
  #endif
  void set_post_logs_url(const char* value);
  void set_post_logs_url(const char* value, size_t size);
  ::std::string* mutable_post_logs_url();
  ::std::string* release_post_logs_url();
  void set_allocated_post_logs_url(::std::string* post_logs_url);

  // string api_key = 4;
  void clear_api_key();
  static const int kApiKeyFieldNumber = 4;
  const ::std::string& api_key() const;
  void set_api_key(const ::std::string& value);
  #if LANG_CXX11
  void set_api_key(::std::string&& value);
  #endif
  void set_api_key(const char* value);
  void set_api_key(const char* value, size_t size);
  ::std::string* mutable_api_key();
  ::std::string* release_api_key();
  void set_allocated_api_key(::std::string* api_key);

  // @@protoc_insertion_point(class_scope:estafette.ci.contracts.v1.CiServerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr base_url_;
  ::google::protobuf::internal::ArenaStringPtr builder_events_url_;
  ::google::protobuf::internal::ArenaStringPtr post_logs_url_;
  ::google::protobuf::internal::ArenaStringPtr api_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_estafette_2fci_2fcontracts_2fv1_2fci_5fserver_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CiServerConfig

// string base_url = 1;
inline void CiServerConfig::clear_base_url() {
  base_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CiServerConfig::base_url() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.CiServerConfig.base_url)
  return base_url_.GetNoArena();
}
inline void CiServerConfig::set_base_url(const ::std::string& value) {
  
  base_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.CiServerConfig.base_url)
}
#if LANG_CXX11
inline void CiServerConfig::set_base_url(::std::string&& value) {
  
  base_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.CiServerConfig.base_url)
}
#endif
inline void CiServerConfig::set_base_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  base_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.CiServerConfig.base_url)
}
inline void CiServerConfig::set_base_url(const char* value, size_t size) {
  
  base_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.CiServerConfig.base_url)
}
inline ::std::string* CiServerConfig::mutable_base_url() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.CiServerConfig.base_url)
  return base_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CiServerConfig::release_base_url() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.CiServerConfig.base_url)
  
  return base_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CiServerConfig::set_allocated_base_url(::std::string* base_url) {
  if (base_url != NULL) {
    
  } else {
    
  }
  base_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_url);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.CiServerConfig.base_url)
}

// string builder_events_url = 2;
inline void CiServerConfig::clear_builder_events_url() {
  builder_events_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CiServerConfig::builder_events_url() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.CiServerConfig.builder_events_url)
  return builder_events_url_.GetNoArena();
}
inline void CiServerConfig::set_builder_events_url(const ::std::string& value) {
  
  builder_events_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.CiServerConfig.builder_events_url)
}
#if LANG_CXX11
inline void CiServerConfig::set_builder_events_url(::std::string&& value) {
  
  builder_events_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.CiServerConfig.builder_events_url)
}
#endif
inline void CiServerConfig::set_builder_events_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  builder_events_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.CiServerConfig.builder_events_url)
}
inline void CiServerConfig::set_builder_events_url(const char* value, size_t size) {
  
  builder_events_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.CiServerConfig.builder_events_url)
}
inline ::std::string* CiServerConfig::mutable_builder_events_url() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.CiServerConfig.builder_events_url)
  return builder_events_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CiServerConfig::release_builder_events_url() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.CiServerConfig.builder_events_url)
  
  return builder_events_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CiServerConfig::set_allocated_builder_events_url(::std::string* builder_events_url) {
  if (builder_events_url != NULL) {
    
  } else {
    
  }
  builder_events_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), builder_events_url);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.CiServerConfig.builder_events_url)
}

// string post_logs_url = 3;
inline void CiServerConfig::clear_post_logs_url() {
  post_logs_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CiServerConfig::post_logs_url() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.CiServerConfig.post_logs_url)
  return post_logs_url_.GetNoArena();
}
inline void CiServerConfig::set_post_logs_url(const ::std::string& value) {
  
  post_logs_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.CiServerConfig.post_logs_url)
}
#if LANG_CXX11
inline void CiServerConfig::set_post_logs_url(::std::string&& value) {
  
  post_logs_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.CiServerConfig.post_logs_url)
}
#endif
inline void CiServerConfig::set_post_logs_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  post_logs_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.CiServerConfig.post_logs_url)
}
inline void CiServerConfig::set_post_logs_url(const char* value, size_t size) {
  
  post_logs_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.CiServerConfig.post_logs_url)
}
inline ::std::string* CiServerConfig::mutable_post_logs_url() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.CiServerConfig.post_logs_url)
  return post_logs_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CiServerConfig::release_post_logs_url() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.CiServerConfig.post_logs_url)
  
  return post_logs_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CiServerConfig::set_allocated_post_logs_url(::std::string* post_logs_url) {
  if (post_logs_url != NULL) {
    
  } else {
    
  }
  post_logs_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), post_logs_url);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.CiServerConfig.post_logs_url)
}

// string api_key = 4;
inline void CiServerConfig::clear_api_key() {
  api_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CiServerConfig::api_key() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.CiServerConfig.api_key)
  return api_key_.GetNoArena();
}
inline void CiServerConfig::set_api_key(const ::std::string& value) {
  
  api_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.CiServerConfig.api_key)
}
#if LANG_CXX11
inline void CiServerConfig::set_api_key(::std::string&& value) {
  
  api_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.CiServerConfig.api_key)
}
#endif
inline void CiServerConfig::set_api_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  api_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.CiServerConfig.api_key)
}
inline void CiServerConfig::set_api_key(const char* value, size_t size) {
  
  api_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.CiServerConfig.api_key)
}
inline ::std::string* CiServerConfig::mutable_api_key() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.CiServerConfig.api_key)
  return api_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CiServerConfig::release_api_key() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.CiServerConfig.api_key)
  
  return api_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CiServerConfig::set_allocated_api_key(::std::string* api_key) {
  if (api_key != NULL) {
    
  } else {
    
  }
  api_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), api_key);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.CiServerConfig.api_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2fci_5fserver_5fconfig_2eproto
