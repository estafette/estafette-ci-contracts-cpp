// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: estafette/ci/contracts/v1/release_log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2frelease_5flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2frelease_5flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "estafette/ci/contracts/v1/build_log_step.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_estafette_2fci_2fcontracts_2fv1_2frelease_5flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_estafette_2fci_2fcontracts_2fv1_2frelease_5flog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_estafette_2fci_2fcontracts_2fv1_2frelease_5flog_2eproto;
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {
class ReleaseLog;
class ReleaseLogDefaultTypeInternal;
extern ReleaseLogDefaultTypeInternal _ReleaseLog_default_instance_;
}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette
PROTOBUF_NAMESPACE_OPEN
template<> ::estafette::ci::contracts::v1::ReleaseLog* Arena::CreateMaybeMessage<::estafette::ci::contracts::v1::ReleaseLog>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace estafette {
namespace ci {
namespace contracts {
namespace v1 {

// ===================================================================

class ReleaseLog :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:estafette.ci.contracts.v1.ReleaseLog) */ {
 public:
  ReleaseLog();
  virtual ~ReleaseLog();

  ReleaseLog(const ReleaseLog& from);
  ReleaseLog(ReleaseLog&& from) noexcept
    : ReleaseLog() {
    *this = ::std::move(from);
  }

  inline ReleaseLog& operator=(const ReleaseLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseLog& operator=(ReleaseLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReleaseLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleaseLog* internal_default_instance() {
    return reinterpret_cast<const ReleaseLog*>(
               &_ReleaseLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReleaseLog* other);
  friend void swap(ReleaseLog& a, ReleaseLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReleaseLog* New() const final {
    return CreateMaybeMessage<ReleaseLog>(nullptr);
  }

  ReleaseLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReleaseLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReleaseLog& from);
  void MergeFrom(const ReleaseLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "estafette.ci.contracts.v1.ReleaseLog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_estafette_2fci_2fcontracts_2fv1_2frelease_5flog_2eproto);
    return ::descriptor_table_estafette_2fci_2fcontracts_2fv1_2frelease_5flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .estafette.ci.contracts.v1.BuildLogStep steps = 6;
  int steps_size() const;
  void clear_steps();
  static const int kStepsFieldNumber = 6;
  ::estafette::ci::contracts::v1::BuildLogStep* mutable_steps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::BuildLogStep >*
      mutable_steps();
  const ::estafette::ci::contracts::v1::BuildLogStep& steps(int index) const;
  ::estafette::ci::contracts::v1::BuildLogStep* add_steps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::BuildLogStep >&
      steps() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id__();
  void set_allocated_id(std::string* id);

  // string repo_source = 2;
  void clear_repo_source();
  static const int kRepoSourceFieldNumber = 2;
  const std::string& repo_source() const;
  void set_repo_source(const std::string& value);
  void set_repo_source(std::string&& value);
  void set_repo_source(const char* value);
  void set_repo_source(const char* value, size_t size);
  std::string* mutable_repo_source();
  std::string* release_repo_source();
  void set_allocated_repo_source(std::string* repo_source);

  // string repo_owner = 3;
  void clear_repo_owner();
  static const int kRepoOwnerFieldNumber = 3;
  const std::string& repo_owner() const;
  void set_repo_owner(const std::string& value);
  void set_repo_owner(std::string&& value);
  void set_repo_owner(const char* value);
  void set_repo_owner(const char* value, size_t size);
  std::string* mutable_repo_owner();
  std::string* release_repo_owner();
  void set_allocated_repo_owner(std::string* repo_owner);

  // string repo_name = 4;
  void clear_repo_name();
  static const int kRepoNameFieldNumber = 4;
  const std::string& repo_name() const;
  void set_repo_name(const std::string& value);
  void set_repo_name(std::string&& value);
  void set_repo_name(const char* value);
  void set_repo_name(const char* value, size_t size);
  std::string* mutable_repo_name();
  std::string* release_repo_name();
  void set_allocated_repo_name(std::string* repo_name);

  // string release_id = 5;
  void clear_release_id();
  static const int kReleaseIdFieldNumber = 5;
  const std::string& release_id() const;
  void set_release_id(const std::string& value);
  void set_release_id(std::string&& value);
  void set_release_id(const char* value);
  void set_release_id(const char* value, size_t size);
  std::string* mutable_release_id();
  std::string* release_release_id();
  void set_allocated_release_id(std::string* release_id);

  // .google.protobuf.Timestamp inserted_at_time = 7;
  bool has_inserted_at_time() const;
  void clear_inserted_at_time();
  static const int kInsertedAtTimeFieldNumber = 7;
  const PROTOBUF_NAMESPACE_ID::Timestamp& inserted_at_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_inserted_at_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_inserted_at_time();
  void set_allocated_inserted_at_time(PROTOBUF_NAMESPACE_ID::Timestamp* inserted_at_time);

  // @@protoc_insertion_point(class_scope:estafette.ci.contracts.v1.ReleaseLog)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::BuildLogStep > steps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repo_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr release_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* inserted_at_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_estafette_2fci_2fcontracts_2fv1_2frelease_5flog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReleaseLog

// string id = 1;
inline void ReleaseLog::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReleaseLog::id() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.ReleaseLog.id)
  return id_.GetNoArena();
}
inline void ReleaseLog::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.ReleaseLog.id)
}
inline void ReleaseLog::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.ReleaseLog.id)
}
inline void ReleaseLog::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.ReleaseLog.id)
}
inline void ReleaseLog::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.ReleaseLog.id)
}
inline std::string* ReleaseLog::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.ReleaseLog.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReleaseLog::release_id__() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.ReleaseLog.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseLog::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.ReleaseLog.id)
}

// string repo_source = 2;
inline void ReleaseLog::clear_repo_source() {
  repo_source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReleaseLog::repo_source() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.ReleaseLog.repo_source)
  return repo_source_.GetNoArena();
}
inline void ReleaseLog::set_repo_source(const std::string& value) {
  
  repo_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.ReleaseLog.repo_source)
}
inline void ReleaseLog::set_repo_source(std::string&& value) {
  
  repo_source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.ReleaseLog.repo_source)
}
inline void ReleaseLog::set_repo_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.ReleaseLog.repo_source)
}
inline void ReleaseLog::set_repo_source(const char* value, size_t size) {
  
  repo_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.ReleaseLog.repo_source)
}
inline std::string* ReleaseLog::mutable_repo_source() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.ReleaseLog.repo_source)
  return repo_source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReleaseLog::release_repo_source() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.ReleaseLog.repo_source)
  
  return repo_source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseLog::set_allocated_repo_source(std::string* repo_source) {
  if (repo_source != nullptr) {
    
  } else {
    
  }
  repo_source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repo_source);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.ReleaseLog.repo_source)
}

// string repo_owner = 3;
inline void ReleaseLog::clear_repo_owner() {
  repo_owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReleaseLog::repo_owner() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.ReleaseLog.repo_owner)
  return repo_owner_.GetNoArena();
}
inline void ReleaseLog::set_repo_owner(const std::string& value) {
  
  repo_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.ReleaseLog.repo_owner)
}
inline void ReleaseLog::set_repo_owner(std::string&& value) {
  
  repo_owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.ReleaseLog.repo_owner)
}
inline void ReleaseLog::set_repo_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.ReleaseLog.repo_owner)
}
inline void ReleaseLog::set_repo_owner(const char* value, size_t size) {
  
  repo_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.ReleaseLog.repo_owner)
}
inline std::string* ReleaseLog::mutable_repo_owner() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.ReleaseLog.repo_owner)
  return repo_owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReleaseLog::release_repo_owner() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.ReleaseLog.repo_owner)
  
  return repo_owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseLog::set_allocated_repo_owner(std::string* repo_owner) {
  if (repo_owner != nullptr) {
    
  } else {
    
  }
  repo_owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repo_owner);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.ReleaseLog.repo_owner)
}

// string repo_name = 4;
inline void ReleaseLog::clear_repo_name() {
  repo_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReleaseLog::repo_name() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.ReleaseLog.repo_name)
  return repo_name_.GetNoArena();
}
inline void ReleaseLog::set_repo_name(const std::string& value) {
  
  repo_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.ReleaseLog.repo_name)
}
inline void ReleaseLog::set_repo_name(std::string&& value) {
  
  repo_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.ReleaseLog.repo_name)
}
inline void ReleaseLog::set_repo_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.ReleaseLog.repo_name)
}
inline void ReleaseLog::set_repo_name(const char* value, size_t size) {
  
  repo_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.ReleaseLog.repo_name)
}
inline std::string* ReleaseLog::mutable_repo_name() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.ReleaseLog.repo_name)
  return repo_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReleaseLog::release_repo_name() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.ReleaseLog.repo_name)
  
  return repo_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseLog::set_allocated_repo_name(std::string* repo_name) {
  if (repo_name != nullptr) {
    
  } else {
    
  }
  repo_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repo_name);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.ReleaseLog.repo_name)
}

// string release_id = 5;
inline void ReleaseLog::clear_release_id() {
  release_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReleaseLog::release_id() const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.ReleaseLog.release_id)
  return release_id_.GetNoArena();
}
inline void ReleaseLog::set_release_id(const std::string& value) {
  
  release_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:estafette.ci.contracts.v1.ReleaseLog.release_id)
}
inline void ReleaseLog::set_release_id(std::string&& value) {
  
  release_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:estafette.ci.contracts.v1.ReleaseLog.release_id)
}
inline void ReleaseLog::set_release_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  release_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:estafette.ci.contracts.v1.ReleaseLog.release_id)
}
inline void ReleaseLog::set_release_id(const char* value, size_t size) {
  
  release_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:estafette.ci.contracts.v1.ReleaseLog.release_id)
}
inline std::string* ReleaseLog::mutable_release_id() {
  
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.ReleaseLog.release_id)
  return release_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReleaseLog::release_release_id() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.ReleaseLog.release_id)
  
  return release_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseLog::set_allocated_release_id(std::string* release_id) {
  if (release_id != nullptr) {
    
  } else {
    
  }
  release_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), release_id);
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.ReleaseLog.release_id)
}

// repeated .estafette.ci.contracts.v1.BuildLogStep steps = 6;
inline int ReleaseLog::steps_size() const {
  return steps_.size();
}
inline ::estafette::ci::contracts::v1::BuildLogStep* ReleaseLog::mutable_steps(int index) {
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.ReleaseLog.steps)
  return steps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::BuildLogStep >*
ReleaseLog::mutable_steps() {
  // @@protoc_insertion_point(field_mutable_list:estafette.ci.contracts.v1.ReleaseLog.steps)
  return &steps_;
}
inline const ::estafette::ci::contracts::v1::BuildLogStep& ReleaseLog::steps(int index) const {
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.ReleaseLog.steps)
  return steps_.Get(index);
}
inline ::estafette::ci::contracts::v1::BuildLogStep* ReleaseLog::add_steps() {
  // @@protoc_insertion_point(field_add:estafette.ci.contracts.v1.ReleaseLog.steps)
  return steps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::estafette::ci::contracts::v1::BuildLogStep >&
ReleaseLog::steps() const {
  // @@protoc_insertion_point(field_list:estafette.ci.contracts.v1.ReleaseLog.steps)
  return steps_;
}

// .google.protobuf.Timestamp inserted_at_time = 7;
inline bool ReleaseLog::has_inserted_at_time() const {
  return this != internal_default_instance() && inserted_at_time_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReleaseLog::inserted_at_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = inserted_at_time_;
  // @@protoc_insertion_point(field_get:estafette.ci.contracts.v1.ReleaseLog.inserted_at_time)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReleaseLog::release_inserted_at_time() {
  // @@protoc_insertion_point(field_release:estafette.ci.contracts.v1.ReleaseLog.inserted_at_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = inserted_at_time_;
  inserted_at_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReleaseLog::mutable_inserted_at_time() {
  
  if (inserted_at_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    inserted_at_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:estafette.ci.contracts.v1.ReleaseLog.inserted_at_time)
  return inserted_at_time_;
}
inline void ReleaseLog::set_allocated_inserted_at_time(PROTOBUF_NAMESPACE_ID::Timestamp* inserted_at_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inserted_at_time_);
  }
  if (inserted_at_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inserted_at_time)->GetArena();
    if (message_arena != submessage_arena) {
      inserted_at_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inserted_at_time, submessage_arena);
    }
    
  } else {
    
  }
  inserted_at_time_ = inserted_at_time;
  // @@protoc_insertion_point(field_set_allocated:estafette.ci.contracts.v1.ReleaseLog.inserted_at_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace contracts
}  // namespace ci
}  // namespace estafette

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_estafette_2fci_2fcontracts_2fv1_2frelease_5flog_2eproto
