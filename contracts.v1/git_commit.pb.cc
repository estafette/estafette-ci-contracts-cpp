// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contracts.v1/git_commit.proto

#include "contracts.v1/git_commit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_contracts_2ev1_2fgit_5fauthor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_contracts_2ev1_2fgit_5fauthor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GitAuthor;
}  // namespace protobuf_contracts_2ev1_2fgit_5fauthor_2eproto
namespace contracts {
namespace v1 {
class GitCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GitCommit>
      _instance;
} _GitCommit_default_instance_;
}  // namespace v1
}  // namespace contracts
namespace protobuf_contracts_2ev1_2fgit_5fcommit_2eproto {
static void InitDefaultsGitCommit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contracts::v1::_GitCommit_default_instance_;
    new (ptr) ::contracts::v1::GitCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contracts::v1::GitCommit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GitCommit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGitCommit}, {
      &protobuf_contracts_2ev1_2fgit_5fauthor_2eproto::scc_info_GitAuthor.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GitCommit.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::contracts::v1::GitCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::contracts::v1::GitCommit, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::contracts::v1::GitCommit, author_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::contracts::v1::GitCommit)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::contracts::v1::_GitCommit_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "contracts.v1/git_commit.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035contracts.v1/git_commit.proto\022\014contrac"
      "ts.v1\032\035contracts.v1/git_author.proto\"E\n\t"
      "GitCommit\022\017\n\007message\030\001 \001(\t\022\'\n\006author\030\002 \001"
      "(\0132\027.contracts.v1.GitAuthorBAZ\?github.co"
      "m/estafette/estafette-ci-contracts-golan"
      "g/contracts_v1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "contracts.v1/git_commit.proto", &protobuf_RegisterTypes);
  ::protobuf_contracts_2ev1_2fgit_5fauthor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_contracts_2ev1_2fgit_5fcommit_2eproto
namespace contracts {
namespace v1 {

// ===================================================================

void GitCommit::InitAsDefaultInstance() {
  ::contracts::v1::_GitCommit_default_instance_._instance.get_mutable()->author_ = const_cast< ::contracts::v1::GitAuthor*>(
      ::contracts::v1::GitAuthor::internal_default_instance());
}
void GitCommit::clear_author() {
  if (GetArenaNoVirtual() == NULL && author_ != NULL) {
    delete author_;
  }
  author_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GitCommit::kMessageFieldNumber;
const int GitCommit::kAuthorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GitCommit::GitCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_contracts_2ev1_2fgit_5fcommit_2eproto::scc_info_GitCommit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:contracts.v1.GitCommit)
}
GitCommit::GitCommit(const GitCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_author()) {
    author_ = new ::contracts::v1::GitAuthor(*from.author_);
  } else {
    author_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:contracts.v1.GitCommit)
}

void GitCommit::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_ = NULL;
}

GitCommit::~GitCommit() {
  // @@protoc_insertion_point(destructor:contracts.v1.GitCommit)
  SharedDtor();
}

void GitCommit::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete author_;
}

void GitCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GitCommit::descriptor() {
  ::protobuf_contracts_2ev1_2fgit_5fcommit_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_contracts_2ev1_2fgit_5fcommit_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GitCommit& GitCommit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_contracts_2ev1_2fgit_5fcommit_2eproto::scc_info_GitCommit.base);
  return *internal_default_instance();
}


void GitCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:contracts.v1.GitCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && author_ != NULL) {
    delete author_;
  }
  author_ = NULL;
  _internal_metadata_.Clear();
}

bool GitCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:contracts.v1.GitCommit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "contracts.v1.GitCommit.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .contracts.v1.GitAuthor author = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_author()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contracts.v1.GitCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contracts.v1.GitCommit)
  return false;
#undef DO_
}

void GitCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contracts.v1.GitCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "contracts.v1.GitCommit.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // .contracts.v1.GitAuthor author = 2;
  if (this->has_author()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_author(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:contracts.v1.GitCommit)
}

::google::protobuf::uint8* GitCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:contracts.v1.GitCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "contracts.v1.GitCommit.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // .contracts.v1.GitAuthor author = 2;
  if (this->has_author()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_author(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contracts.v1.GitCommit)
  return target;
}

size_t GitCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contracts.v1.GitCommit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .contracts.v1.GitAuthor author = 2;
  if (this->has_author()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *author_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GitCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contracts.v1.GitCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const GitCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GitCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contracts.v1.GitCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contracts.v1.GitCommit)
    MergeFrom(*source);
  }
}

void GitCommit::MergeFrom(const GitCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contracts.v1.GitCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_author()) {
    mutable_author()->::contracts::v1::GitAuthor::MergeFrom(from.author());
  }
}

void GitCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contracts.v1.GitCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GitCommit::CopyFrom(const GitCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contracts.v1.GitCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GitCommit::IsInitialized() const {
  return true;
}

void GitCommit::Swap(GitCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GitCommit::InternalSwap(GitCommit* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(author_, other->author_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GitCommit::GetMetadata() const {
  protobuf_contracts_2ev1_2fgit_5fcommit_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_contracts_2ev1_2fgit_5fcommit_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contracts
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::contracts::v1::GitCommit* Arena::CreateMaybeMessage< ::contracts::v1::GitCommit >(Arena* arena) {
  return Arena::CreateInternal< ::contracts::v1::GitCommit >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
